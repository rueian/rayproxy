// Copyright 2017 The Ray Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: src/ray/protobuf/gcs_service.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GcsServiceFailureType int32

const (
	GcsServiceFailureType_RPC_DISCONNECT     GcsServiceFailureType = 0
	GcsServiceFailureType_GCS_SERVER_RESTART GcsServiceFailureType = 1
)

// Enum value maps for GcsServiceFailureType.
var (
	GcsServiceFailureType_name = map[int32]string{
		0: "RPC_DISCONNECT",
		1: "GCS_SERVER_RESTART",
	}
	GcsServiceFailureType_value = map[string]int32{
		"RPC_DISCONNECT":     0,
		"GCS_SERVER_RESTART": 1,
	}
)

func (x GcsServiceFailureType) Enum() *GcsServiceFailureType {
	p := new(GcsServiceFailureType)
	*p = x
	return p
}

func (x GcsServiceFailureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GcsServiceFailureType) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_gcs_service_proto_enumTypes[0].Descriptor()
}

func (GcsServiceFailureType) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_gcs_service_proto_enumTypes[0]
}

func (x GcsServiceFailureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GcsServiceFailureType.Descriptor instead.
func (GcsServiceFailureType) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{0}
}

type AddJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *JobTableData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AddJobRequest) Reset() {
	*x = AddJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddJobRequest) ProtoMessage() {}

func (x *AddJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddJobRequest.ProtoReflect.Descriptor instead.
func (*AddJobRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{0}
}

func (x *AddJobRequest) GetData() *JobTableData {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddJobReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AddJobReply) Reset() {
	*x = AddJobReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddJobReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddJobReply) ProtoMessage() {}

func (x *AddJobReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddJobReply.ProtoReflect.Descriptor instead.
func (*AddJobReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{1}
}

func (x *AddJobReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type MarkJobFinishedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId []byte `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *MarkJobFinishedRequest) Reset() {
	*x = MarkJobFinishedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkJobFinishedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkJobFinishedRequest) ProtoMessage() {}

func (x *MarkJobFinishedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkJobFinishedRequest.ProtoReflect.Descriptor instead.
func (*MarkJobFinishedRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{2}
}

func (x *MarkJobFinishedRequest) GetJobId() []byte {
	if x != nil {
		return x.JobId
	}
	return nil
}

type MarkJobFinishedReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *MarkJobFinishedReply) Reset() {
	*x = MarkJobFinishedReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkJobFinishedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkJobFinishedReply) ProtoMessage() {}

func (x *MarkJobFinishedReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkJobFinishedReply.ProtoReflect.Descriptor instead.
func (*MarkJobFinishedReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{3}
}

func (x *MarkJobFinishedReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetAllJobInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllJobInfoRequest) Reset() {
	*x = GetAllJobInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllJobInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllJobInfoRequest) ProtoMessage() {}

func (x *GetAllJobInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllJobInfoRequest.ProtoReflect.Descriptor instead.
func (*GetAllJobInfoRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{4}
}

type GetAllJobInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      *GcsStatus      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	JobInfoList []*JobTableData `protobuf:"bytes,2,rep,name=job_info_list,json=jobInfoList,proto3" json:"job_info_list,omitempty"`
}

func (x *GetAllJobInfoReply) Reset() {
	*x = GetAllJobInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllJobInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllJobInfoReply) ProtoMessage() {}

func (x *GetAllJobInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllJobInfoReply.ProtoReflect.Descriptor instead.
func (*GetAllJobInfoReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetAllJobInfoReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetAllJobInfoReply) GetJobInfoList() []*JobTableData {
	if x != nil {
		return x.JobInfoList
	}
	return nil
}

type ReportJobErrorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobError *ErrorTableData `protobuf:"bytes,1,opt,name=job_error,json=jobError,proto3" json:"job_error,omitempty"`
}

func (x *ReportJobErrorRequest) Reset() {
	*x = ReportJobErrorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportJobErrorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportJobErrorRequest) ProtoMessage() {}

func (x *ReportJobErrorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportJobErrorRequest.ProtoReflect.Descriptor instead.
func (*ReportJobErrorRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{6}
}

func (x *ReportJobErrorRequest) GetJobError() *ErrorTableData {
	if x != nil {
		return x.JobError
	}
	return nil
}

type ReportJobErrorReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ReportJobErrorReply) Reset() {
	*x = ReportJobErrorReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportJobErrorReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportJobErrorReply) ProtoMessage() {}

func (x *ReportJobErrorReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportJobErrorReply.ProtoReflect.Descriptor instead.
func (*ReportJobErrorReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{7}
}

func (x *ReportJobErrorReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetNextJobIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNextJobIDRequest) Reset() {
	*x = GetNextJobIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNextJobIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextJobIDRequest) ProtoMessage() {}

func (x *GetNextJobIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextJobIDRequest.ProtoReflect.Descriptor instead.
func (*GetNextJobIDRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{8}
}

type GetNextJobIDReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	JobId  int32      `protobuf:"varint,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *GetNextJobIDReply) Reset() {
	*x = GetNextJobIDReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNextJobIDReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextJobIDReply) ProtoMessage() {}

func (x *GetNextJobIDReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextJobIDReply.ProtoReflect.Descriptor instead.
func (*GetNextJobIDReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetNextJobIDReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetNextJobIDReply) GetJobId() int32 {
	if x != nil {
		return x.JobId
	}
	return 0
}

type GetActorInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of this actor. If actor_id is set, name will not be set.
	ActorId []byte `protobuf:"bytes,1,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	// Name of the actor. This is only used for detached actors. If name is set,
	// actor_id will not be set.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetActorInfoRequest) Reset() {
	*x = GetActorInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActorInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActorInfoRequest) ProtoMessage() {}

func (x *GetActorInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActorInfoRequest.ProtoReflect.Descriptor instead.
func (*GetActorInfoRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetActorInfoRequest) GetActorId() []byte {
	if x != nil {
		return x.ActorId
	}
	return nil
}

func (x *GetActorInfoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetActorInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Data of actor.
	ActorTableData *ActorTableData `protobuf:"bytes,2,opt,name=actor_table_data,json=actorTableData,proto3" json:"actor_table_data,omitempty"`
}

func (x *GetActorInfoReply) Reset() {
	*x = GetActorInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActorInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActorInfoReply) ProtoMessage() {}

func (x *GetActorInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActorInfoReply.ProtoReflect.Descriptor instead.
func (*GetActorInfoReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetActorInfoReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetActorInfoReply) GetActorTableData() *ActorTableData {
	if x != nil {
		return x.ActorTableData
	}
	return nil
}

type GetNamedActorInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the actor.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace of the actor.
	RayNamespace string `protobuf:"bytes,2,opt,name=ray_namespace,json=rayNamespace,proto3" json:"ray_namespace,omitempty"`
}

func (x *GetNamedActorInfoRequest) Reset() {
	*x = GetNamedActorInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNamedActorInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNamedActorInfoRequest) ProtoMessage() {}

func (x *GetNamedActorInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNamedActorInfoRequest.ProtoReflect.Descriptor instead.
func (*GetNamedActorInfoRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetNamedActorInfoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetNamedActorInfoRequest) GetRayNamespace() string {
	if x != nil {
		return x.RayNamespace
	}
	return ""
}

type GetNamedActorInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Data of actor.
	ActorTableData *ActorTableData `protobuf:"bytes,2,opt,name=actor_table_data,json=actorTableData,proto3" json:"actor_table_data,omitempty"`
	// The task specification of this actor's creation task.
	TaskSpec *TaskSpec `protobuf:"bytes,3,opt,name=task_spec,json=taskSpec,proto3" json:"task_spec,omitempty"`
}

func (x *GetNamedActorInfoReply) Reset() {
	*x = GetNamedActorInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNamedActorInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNamedActorInfoReply) ProtoMessage() {}

func (x *GetNamedActorInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNamedActorInfoReply.ProtoReflect.Descriptor instead.
func (*GetNamedActorInfoReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetNamedActorInfoReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetNamedActorInfoReply) GetActorTableData() *ActorTableData {
	if x != nil {
		return x.ActorTableData
	}
	return nil
}

func (x *GetNamedActorInfoReply) GetTaskSpec() *TaskSpec {
	if x != nil {
		return x.TaskSpec
	}
	return nil
}

type ListNamedActorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether or not to include actors from all namespaces.
	AllNamespaces bool `protobuf:"varint,1,opt,name=all_namespaces,json=allNamespaces,proto3" json:"all_namespaces,omitempty"`
	// Namespace to filter to if all_namespaces is false.
	RayNamespace string `protobuf:"bytes,2,opt,name=ray_namespace,json=rayNamespace,proto3" json:"ray_namespace,omitempty"`
}

func (x *ListNamedActorsRequest) Reset() {
	*x = ListNamedActorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNamedActorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamedActorsRequest) ProtoMessage() {}

func (x *ListNamedActorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamedActorsRequest.ProtoReflect.Descriptor instead.
func (*ListNamedActorsRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{14}
}

func (x *ListNamedActorsRequest) GetAllNamespaces() bool {
	if x != nil {
		return x.AllNamespaces
	}
	return false
}

func (x *ListNamedActorsRequest) GetRayNamespace() string {
	if x != nil {
		return x.RayNamespace
	}
	return ""
}

type ListNamedActorsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          *GcsStatus        `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	NamedActorsList []*NamedActorInfo `protobuf:"bytes,2,rep,name=named_actors_list,json=namedActorsList,proto3" json:"named_actors_list,omitempty"`
}

func (x *ListNamedActorsReply) Reset() {
	*x = ListNamedActorsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNamedActorsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamedActorsReply) ProtoMessage() {}

func (x *ListNamedActorsReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamedActorsReply.ProtoReflect.Descriptor instead.
func (*ListNamedActorsReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{15}
}

func (x *ListNamedActorsReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListNamedActorsReply) GetNamedActorsList() []*NamedActorInfo {
	if x != nil {
		return x.NamedActorsList
	}
	return nil
}

type GetAllActorInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether or not to filter out actors which belong to dead jobs.
	ShowDeadJobs bool `protobuf:"varint,1,opt,name=show_dead_jobs,json=showDeadJobs,proto3" json:"show_dead_jobs,omitempty"`
}

func (x *GetAllActorInfoRequest) Reset() {
	*x = GetAllActorInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllActorInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllActorInfoRequest) ProtoMessage() {}

func (x *GetAllActorInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllActorInfoRequest.ProtoReflect.Descriptor instead.
func (*GetAllActorInfoRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{16}
}

func (x *GetAllActorInfoRequest) GetShowDeadJobs() bool {
	if x != nil {
		return x.ShowDeadJobs
	}
	return false
}

type GetAllActorInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Data of actor.
	ActorTableData []*ActorTableData `protobuf:"bytes,2,rep,name=actor_table_data,json=actorTableData,proto3" json:"actor_table_data,omitempty"`
}

func (x *GetAllActorInfoReply) Reset() {
	*x = GetAllActorInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllActorInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllActorInfoReply) ProtoMessage() {}

func (x *GetAllActorInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllActorInfoReply.ProtoReflect.Descriptor instead.
func (*GetAllActorInfoReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{17}
}

func (x *GetAllActorInfoReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetAllActorInfoReply) GetActorTableData() []*ActorTableData {
	if x != nil {
		return x.ActorTableData
	}
	return nil
}

// `KillActorViaGcsRequest` is sent to GCS Service to ask to kill an actor.
// `KillActorViaGcsRequest` is different from `KillActorRequest`.
// `KillActorRequest` is send to core worker to ask to kill an actor.
type KillActorViaGcsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of this actor.
	ActorId []byte `protobuf:"bytes,1,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	// Whether to force kill the actor.
	ForceKill bool `protobuf:"varint,2,opt,name=force_kill,json=forceKill,proto3" json:"force_kill,omitempty"`
	// If set to true, the killed actor will not be restarted anymore.
	NoRestart bool `protobuf:"varint,3,opt,name=no_restart,json=noRestart,proto3" json:"no_restart,omitempty"`
}

func (x *KillActorViaGcsRequest) Reset() {
	*x = KillActorViaGcsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KillActorViaGcsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillActorViaGcsRequest) ProtoMessage() {}

func (x *KillActorViaGcsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillActorViaGcsRequest.ProtoReflect.Descriptor instead.
func (*KillActorViaGcsRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{18}
}

func (x *KillActorViaGcsRequest) GetActorId() []byte {
	if x != nil {
		return x.ActorId
	}
	return nil
}

func (x *KillActorViaGcsRequest) GetForceKill() bool {
	if x != nil {
		return x.ForceKill
	}
	return false
}

func (x *KillActorViaGcsRequest) GetNoRestart() bool {
	if x != nil {
		return x.NoRestart
	}
	return false
}

type KillActorViaGcsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *KillActorViaGcsReply) Reset() {
	*x = KillActorViaGcsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KillActorViaGcsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillActorViaGcsReply) ProtoMessage() {}

func (x *KillActorViaGcsReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillActorViaGcsReply.ProtoReflect.Descriptor instead.
func (*KillActorViaGcsReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{19}
}

func (x *KillActorViaGcsReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type RegisterNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Info of node.
	NodeInfo *GcsNodeInfo `protobuf:"bytes,1,opt,name=node_info,json=nodeInfo,proto3" json:"node_info,omitempty"`
}

func (x *RegisterNodeRequest) Reset() {
	*x = RegisterNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterNodeRequest) ProtoMessage() {}

func (x *RegisterNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterNodeRequest.ProtoReflect.Descriptor instead.
func (*RegisterNodeRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{20}
}

func (x *RegisterNodeRequest) GetNodeInfo() *GcsNodeInfo {
	if x != nil {
		return x.NodeInfo
	}
	return nil
}

type RegisterNodeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RegisterNodeReply) Reset() {
	*x = RegisterNodeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterNodeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterNodeReply) ProtoMessage() {}

func (x *RegisterNodeReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterNodeReply.ProtoReflect.Descriptor instead.
func (*RegisterNodeReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{21}
}

func (x *RegisterNodeReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetAllNodeInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllNodeInfoRequest) Reset() {
	*x = GetAllNodeInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllNodeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllNodeInfoRequest) ProtoMessage() {}

func (x *GetAllNodeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllNodeInfoRequest.ProtoReflect.Descriptor instead.
func (*GetAllNodeInfoRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{22}
}

type GetAllNodeInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *GcsStatus     `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	NodeInfoList []*GcsNodeInfo `protobuf:"bytes,2,rep,name=node_info_list,json=nodeInfoList,proto3" json:"node_info_list,omitempty"`
}

func (x *GetAllNodeInfoReply) Reset() {
	*x = GetAllNodeInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllNodeInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllNodeInfoReply) ProtoMessage() {}

func (x *GetAllNodeInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllNodeInfoReply.ProtoReflect.Descriptor instead.
func (*GetAllNodeInfoReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{23}
}

func (x *GetAllNodeInfoReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetAllNodeInfoReply) GetNodeInfoList() []*GcsNodeInfo {
	if x != nil {
		return x.NodeInfoList
	}
	return nil
}

type ReportHeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Heartbeat *HeartbeatTableData `protobuf:"bytes,1,opt,name=heartbeat,proto3" json:"heartbeat,omitempty"`
}

func (x *ReportHeartbeatRequest) Reset() {
	*x = ReportHeartbeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportHeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportHeartbeatRequest) ProtoMessage() {}

func (x *ReportHeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportHeartbeatRequest.ProtoReflect.Descriptor instead.
func (*ReportHeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{24}
}

func (x *ReportHeartbeatRequest) GetHeartbeat() *HeartbeatTableData {
	if x != nil {
		return x.Heartbeat
	}
	return nil
}

type ReportHeartbeatReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ReportHeartbeatReply) Reset() {
	*x = ReportHeartbeatReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportHeartbeatReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportHeartbeatReply) ProtoMessage() {}

func (x *ReportHeartbeatReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportHeartbeatReply.ProtoReflect.Descriptor instead.
func (*ReportHeartbeatReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{25}
}

func (x *ReportHeartbeatReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type CheckAliveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CheckAliveRequest) Reset() {
	*x = CheckAliveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAliveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAliveRequest) ProtoMessage() {}

func (x *CheckAliveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAliveRequest.ProtoReflect.Descriptor instead.
func (*CheckAliveRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{26}
}

type CheckAliveReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	RayVersion string     `protobuf:"bytes,2,opt,name=ray_version,json=rayVersion,proto3" json:"ray_version,omitempty"`
}

func (x *CheckAliveReply) Reset() {
	*x = CheckAliveReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAliveReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAliveReply) ProtoMessage() {}

func (x *CheckAliveReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAliveReply.ProtoReflect.Descriptor instead.
func (*CheckAliveReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{27}
}

func (x *CheckAliveReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CheckAliveReply) GetRayVersion() string {
	if x != nil {
		return x.RayVersion
	}
	return ""
}

type GetInternalConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetInternalConfigRequest) Reset() {
	*x = GetInternalConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInternalConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInternalConfigRequest) ProtoMessage() {}

func (x *GetInternalConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInternalConfigRequest.ProtoReflect.Descriptor instead.
func (*GetInternalConfigRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{28}
}

type GetInternalConfigReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Config string     `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *GetInternalConfigReply) Reset() {
	*x = GetInternalConfigReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInternalConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInternalConfigReply) ProtoMessage() {}

func (x *GetInternalConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInternalConfigReply.ProtoReflect.Descriptor instead.
func (*GetInternalConfigReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{29}
}

func (x *GetInternalConfigReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetInternalConfigReply) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

type GetResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId []byte `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *GetResourcesRequest) Reset() {
	*x = GetResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourcesRequest) ProtoMessage() {}

func (x *GetResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourcesRequest.ProtoReflect.Descriptor instead.
func (*GetResourcesRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{30}
}

func (x *GetResourcesRequest) GetNodeId() []byte {
	if x != nil {
		return x.NodeId
	}
	return nil
}

type GetResourcesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *GcsStatus                    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Resources map[string]*ResourceTableData `protobuf:"bytes,2,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetResourcesReply) Reset() {
	*x = GetResourcesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourcesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourcesReply) ProtoMessage() {}

func (x *GetResourcesReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourcesReply.ProtoReflect.Descriptor instead.
func (*GetResourcesReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{31}
}

func (x *GetResourcesReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetResourcesReply) GetResources() map[string]*ResourceTableData {
	if x != nil {
		return x.Resources
	}
	return nil
}

type DeleteResourcesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteResourcesReply) Reset() {
	*x = DeleteResourcesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResourcesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResourcesReply) ProtoMessage() {}

func (x *DeleteResourcesReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResourcesReply.ProtoReflect.Descriptor instead.
func (*DeleteResourcesReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteResourcesReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetAllAvailableResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllAvailableResourcesRequest) Reset() {
	*x = GetAllAvailableResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllAvailableResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllAvailableResourcesRequest) ProtoMessage() {}

func (x *GetAllAvailableResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllAvailableResourcesRequest.ProtoReflect.Descriptor instead.
func (*GetAllAvailableResourcesRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{33}
}

type GetAllAvailableResourcesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *GcsStatus            `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ResourcesList []*AvailableResources `protobuf:"bytes,2,rep,name=resources_list,json=resourcesList,proto3" json:"resources_list,omitempty"`
}

func (x *GetAllAvailableResourcesReply) Reset() {
	*x = GetAllAvailableResourcesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllAvailableResourcesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllAvailableResourcesReply) ProtoMessage() {}

func (x *GetAllAvailableResourcesReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllAvailableResourcesReply.ProtoReflect.Descriptor instead.
func (*GetAllAvailableResourcesReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{34}
}

func (x *GetAllAvailableResourcesReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetAllAvailableResourcesReply) GetResourcesList() []*AvailableResources {
	if x != nil {
		return x.ResourcesList
	}
	return nil
}

type ReportResourceUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resources *ResourcesData `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
}

func (x *ReportResourceUsageRequest) Reset() {
	*x = ReportResourceUsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportResourceUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportResourceUsageRequest) ProtoMessage() {}

func (x *ReportResourceUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportResourceUsageRequest.ProtoReflect.Descriptor instead.
func (*ReportResourceUsageRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{35}
}

func (x *ReportResourceUsageRequest) GetResources() *ResourcesData {
	if x != nil {
		return x.Resources
	}
	return nil
}

type ReportResourceUsageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ReportResourceUsageReply) Reset() {
	*x = ReportResourceUsageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportResourceUsageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportResourceUsageReply) ProtoMessage() {}

func (x *ReportResourceUsageReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportResourceUsageReply.ProtoReflect.Descriptor instead.
func (*ReportResourceUsageReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{36}
}

func (x *ReportResourceUsageReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type AddProfileDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileData *ProfileTableData `protobuf:"bytes,1,opt,name=profile_data,json=profileData,proto3" json:"profile_data,omitempty"`
}

func (x *AddProfileDataRequest) Reset() {
	*x = AddProfileDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProfileDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProfileDataRequest) ProtoMessage() {}

func (x *AddProfileDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProfileDataRequest.ProtoReflect.Descriptor instead.
func (*AddProfileDataRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{37}
}

func (x *AddProfileDataRequest) GetProfileData() *ProfileTableData {
	if x != nil {
		return x.ProfileData
	}
	return nil
}

type AddProfileDataReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AddProfileDataReply) Reset() {
	*x = AddProfileDataReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProfileDataReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProfileDataReply) ProtoMessage() {}

func (x *AddProfileDataReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProfileDataReply.ProtoReflect.Descriptor instead.
func (*AddProfileDataReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{38}
}

func (x *AddProfileDataReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetAllProfileInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllProfileInfoRequest) Reset() {
	*x = GetAllProfileInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllProfileInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllProfileInfoRequest) ProtoMessage() {}

func (x *GetAllProfileInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllProfileInfoRequest.ProtoReflect.Descriptor instead.
func (*GetAllProfileInfoRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{39}
}

type GetAllProfileInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          *GcsStatus          `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ProfileInfoList []*ProfileTableData `protobuf:"bytes,2,rep,name=profile_info_list,json=profileInfoList,proto3" json:"profile_info_list,omitempty"`
}

func (x *GetAllProfileInfoReply) Reset() {
	*x = GetAllProfileInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllProfileInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllProfileInfoReply) ProtoMessage() {}

func (x *GetAllProfileInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllProfileInfoReply.ProtoReflect.Descriptor instead.
func (*GetAllProfileInfoReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{40}
}

func (x *GetAllProfileInfoReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetAllProfileInfoReply) GetProfileInfoList() []*ProfileTableData {
	if x != nil {
		return x.ProfileInfoList
	}
	return nil
}

type ReportWorkerFailureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerFailure *WorkerTableData `protobuf:"bytes,1,opt,name=worker_failure,json=workerFailure,proto3" json:"worker_failure,omitempty"`
}

func (x *ReportWorkerFailureRequest) Reset() {
	*x = ReportWorkerFailureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportWorkerFailureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportWorkerFailureRequest) ProtoMessage() {}

func (x *ReportWorkerFailureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportWorkerFailureRequest.ProtoReflect.Descriptor instead.
func (*ReportWorkerFailureRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{41}
}

func (x *ReportWorkerFailureRequest) GetWorkerFailure() *WorkerTableData {
	if x != nil {
		return x.WorkerFailure
	}
	return nil
}

type ReportWorkerFailureReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ReportWorkerFailureReply) Reset() {
	*x = ReportWorkerFailureReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportWorkerFailureReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportWorkerFailureReply) ProtoMessage() {}

func (x *ReportWorkerFailureReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportWorkerFailureReply.ProtoReflect.Descriptor instead.
func (*ReportWorkerFailureReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{42}
}

func (x *ReportWorkerFailureReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetWorkerInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of this worker.
	WorkerId []byte `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
}

func (x *GetWorkerInfoRequest) Reset() {
	*x = GetWorkerInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkerInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkerInfoRequest) ProtoMessage() {}

func (x *GetWorkerInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkerInfoRequest.ProtoReflect.Descriptor instead.
func (*GetWorkerInfoRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{43}
}

func (x *GetWorkerInfoRequest) GetWorkerId() []byte {
	if x != nil {
		return x.WorkerId
	}
	return nil
}

type GetWorkerInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Data of worker.
	WorkerTableData *WorkerTableData `protobuf:"bytes,2,opt,name=worker_table_data,json=workerTableData,proto3" json:"worker_table_data,omitempty"`
}

func (x *GetWorkerInfoReply) Reset() {
	*x = GetWorkerInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkerInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkerInfoReply) ProtoMessage() {}

func (x *GetWorkerInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkerInfoReply.ProtoReflect.Descriptor instead.
func (*GetWorkerInfoReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{44}
}

func (x *GetWorkerInfoReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetWorkerInfoReply) GetWorkerTableData() *WorkerTableData {
	if x != nil {
		return x.WorkerTableData
	}
	return nil
}

type GetAllWorkerInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllWorkerInfoRequest) Reset() {
	*x = GetAllWorkerInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllWorkerInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllWorkerInfoRequest) ProtoMessage() {}

func (x *GetAllWorkerInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllWorkerInfoRequest.ProtoReflect.Descriptor instead.
func (*GetAllWorkerInfoRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{45}
}

type GetAllWorkerInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Data of worker
	WorkerTableData []*WorkerTableData `protobuf:"bytes,2,rep,name=worker_table_data,json=workerTableData,proto3" json:"worker_table_data,omitempty"`
}

func (x *GetAllWorkerInfoReply) Reset() {
	*x = GetAllWorkerInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllWorkerInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllWorkerInfoReply) ProtoMessage() {}

func (x *GetAllWorkerInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllWorkerInfoReply.ProtoReflect.Descriptor instead.
func (*GetAllWorkerInfoReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{46}
}

func (x *GetAllWorkerInfoReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetAllWorkerInfoReply) GetWorkerTableData() []*WorkerTableData {
	if x != nil {
		return x.WorkerTableData
	}
	return nil
}

type AddWorkerInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerData *WorkerTableData `protobuf:"bytes,1,opt,name=worker_data,json=workerData,proto3" json:"worker_data,omitempty"`
}

func (x *AddWorkerInfoRequest) Reset() {
	*x = AddWorkerInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddWorkerInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddWorkerInfoRequest) ProtoMessage() {}

func (x *AddWorkerInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddWorkerInfoRequest.ProtoReflect.Descriptor instead.
func (*AddWorkerInfoRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{47}
}

func (x *AddWorkerInfoRequest) GetWorkerData() *WorkerTableData {
	if x != nil {
		return x.WorkerData
	}
	return nil
}

type AddWorkerInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AddWorkerInfoReply) Reset() {
	*x = AddWorkerInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddWorkerInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddWorkerInfoReply) ProtoMessage() {}

func (x *AddWorkerInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddWorkerInfoReply.ProtoReflect.Descriptor instead.
func (*AddWorkerInfoReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{48}
}

func (x *AddWorkerInfoReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type CreateActorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskSpec *TaskSpec `protobuf:"bytes,1,opt,name=task_spec,json=taskSpec,proto3" json:"task_spec,omitempty"`
}

func (x *CreateActorRequest) Reset() {
	*x = CreateActorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateActorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateActorRequest) ProtoMessage() {}

func (x *CreateActorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateActorRequest.ProtoReflect.Descriptor instead.
func (*CreateActorRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{49}
}

func (x *CreateActorRequest) GetTaskSpec() *TaskSpec {
	if x != nil {
		return x.TaskSpec
	}
	return nil
}

type CreateActorReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Address where the actor was created.
	ActorAddress *Address `protobuf:"bytes,2,opt,name=actor_address,json=actorAddress,proto3" json:"actor_address,omitempty"`
	// Info about any refs that the created actor is borrowing.
	BorrowedRefs []*ObjectReferenceCount `protobuf:"bytes,3,rep,name=borrowed_refs,json=borrowedRefs,proto3" json:"borrowed_refs,omitempty"`
}

func (x *CreateActorReply) Reset() {
	*x = CreateActorReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateActorReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateActorReply) ProtoMessage() {}

func (x *CreateActorReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateActorReply.ProtoReflect.Descriptor instead.
func (*CreateActorReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{50}
}

func (x *CreateActorReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreateActorReply) GetActorAddress() *Address {
	if x != nil {
		return x.ActorAddress
	}
	return nil
}

func (x *CreateActorReply) GetBorrowedRefs() []*ObjectReferenceCount {
	if x != nil {
		return x.BorrowedRefs
	}
	return nil
}

type RegisterActorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskSpec *TaskSpec `protobuf:"bytes,1,opt,name=task_spec,json=taskSpec,proto3" json:"task_spec,omitempty"`
}

func (x *RegisterActorRequest) Reset() {
	*x = RegisterActorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterActorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterActorRequest) ProtoMessage() {}

func (x *RegisterActorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterActorRequest.ProtoReflect.Descriptor instead.
func (*RegisterActorRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{51}
}

func (x *RegisterActorRequest) GetTaskSpec() *TaskSpec {
	if x != nil {
		return x.TaskSpec
	}
	return nil
}

type RegisterActorReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RegisterActorReply) Reset() {
	*x = RegisterActorReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterActorReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterActorReply) ProtoMessage() {}

func (x *RegisterActorReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterActorReply.ProtoReflect.Descriptor instead.
func (*RegisterActorReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{52}
}

func (x *RegisterActorReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type CreatePlacementGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlacementGroupSpec *PlacementGroupSpec `protobuf:"bytes,1,opt,name=placement_group_spec,json=placementGroupSpec,proto3" json:"placement_group_spec,omitempty"`
}

func (x *CreatePlacementGroupRequest) Reset() {
	*x = CreatePlacementGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlacementGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlacementGroupRequest) ProtoMessage() {}

func (x *CreatePlacementGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlacementGroupRequest.ProtoReflect.Descriptor instead.
func (*CreatePlacementGroupRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{53}
}

func (x *CreatePlacementGroupRequest) GetPlacementGroupSpec() *PlacementGroupSpec {
	if x != nil {
		return x.PlacementGroupSpec
	}
	return nil
}

type CreatePlacementGroupReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CreatePlacementGroupReply) Reset() {
	*x = CreatePlacementGroupReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlacementGroupReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlacementGroupReply) ProtoMessage() {}

func (x *CreatePlacementGroupReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlacementGroupReply.ProtoReflect.Descriptor instead.
func (*CreatePlacementGroupReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{54}
}

func (x *CreatePlacementGroupReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type RemovePlacementGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlacementGroupId []byte `protobuf:"bytes,1,opt,name=placement_group_id,json=placementGroupId,proto3" json:"placement_group_id,omitempty"`
}

func (x *RemovePlacementGroupRequest) Reset() {
	*x = RemovePlacementGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePlacementGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePlacementGroupRequest) ProtoMessage() {}

func (x *RemovePlacementGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePlacementGroupRequest.ProtoReflect.Descriptor instead.
func (*RemovePlacementGroupRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{55}
}

func (x *RemovePlacementGroupRequest) GetPlacementGroupId() []byte {
	if x != nil {
		return x.PlacementGroupId
	}
	return nil
}

type RemovePlacementGroupReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RemovePlacementGroupReply) Reset() {
	*x = RemovePlacementGroupReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePlacementGroupReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePlacementGroupReply) ProtoMessage() {}

func (x *RemovePlacementGroupReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePlacementGroupReply.ProtoReflect.Descriptor instead.
func (*RemovePlacementGroupReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{56}
}

func (x *RemovePlacementGroupReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetPlacementGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlacementGroupId []byte `protobuf:"bytes,1,opt,name=placement_group_id,json=placementGroupId,proto3" json:"placement_group_id,omitempty"`
}

func (x *GetPlacementGroupRequest) Reset() {
	*x = GetPlacementGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlacementGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlacementGroupRequest) ProtoMessage() {}

func (x *GetPlacementGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlacementGroupRequest.ProtoReflect.Descriptor instead.
func (*GetPlacementGroupRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{57}
}

func (x *GetPlacementGroupRequest) GetPlacementGroupId() []byte {
	if x != nil {
		return x.PlacementGroupId
	}
	return nil
}

type GetPlacementGroupReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                  *GcsStatus               `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	PlacementGroupTableData *PlacementGroupTableData `protobuf:"bytes,2,opt,name=placement_group_table_data,json=placementGroupTableData,proto3" json:"placement_group_table_data,omitempty"`
}

func (x *GetPlacementGroupReply) Reset() {
	*x = GetPlacementGroupReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlacementGroupReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlacementGroupReply) ProtoMessage() {}

func (x *GetPlacementGroupReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlacementGroupReply.ProtoReflect.Descriptor instead.
func (*GetPlacementGroupReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{58}
}

func (x *GetPlacementGroupReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetPlacementGroupReply) GetPlacementGroupTableData() *PlacementGroupTableData {
	if x != nil {
		return x.PlacementGroupTableData
	}
	return nil
}

type GetAllPlacementGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllPlacementGroupRequest) Reset() {
	*x = GetAllPlacementGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllPlacementGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllPlacementGroupRequest) ProtoMessage() {}

func (x *GetAllPlacementGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllPlacementGroupRequest.ProtoReflect.Descriptor instead.
func (*GetAllPlacementGroupRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{59}
}

type GetAllPlacementGroupReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Data of placement group
	PlacementGroupTableData []*PlacementGroupTableData `protobuf:"bytes,2,rep,name=placement_group_table_data,json=placementGroupTableData,proto3" json:"placement_group_table_data,omitempty"`
}

func (x *GetAllPlacementGroupReply) Reset() {
	*x = GetAllPlacementGroupReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllPlacementGroupReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllPlacementGroupReply) ProtoMessage() {}

func (x *GetAllPlacementGroupReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllPlacementGroupReply.ProtoReflect.Descriptor instead.
func (*GetAllPlacementGroupReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{60}
}

func (x *GetAllPlacementGroupReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetAllPlacementGroupReply) GetPlacementGroupTableData() []*PlacementGroupTableData {
	if x != nil {
		return x.PlacementGroupTableData
	}
	return nil
}

type WaitPlacementGroupUntilReadyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlacementGroupId []byte `protobuf:"bytes,1,opt,name=placement_group_id,json=placementGroupId,proto3" json:"placement_group_id,omitempty"`
}

func (x *WaitPlacementGroupUntilReadyRequest) Reset() {
	*x = WaitPlacementGroupUntilReadyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitPlacementGroupUntilReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitPlacementGroupUntilReadyRequest) ProtoMessage() {}

func (x *WaitPlacementGroupUntilReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitPlacementGroupUntilReadyRequest.ProtoReflect.Descriptor instead.
func (*WaitPlacementGroupUntilReadyRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{61}
}

func (x *WaitPlacementGroupUntilReadyRequest) GetPlacementGroupId() []byte {
	if x != nil {
		return x.PlacementGroupId
	}
	return nil
}

type WaitPlacementGroupUntilReadyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *WaitPlacementGroupUntilReadyReply) Reset() {
	*x = WaitPlacementGroupUntilReadyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitPlacementGroupUntilReadyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitPlacementGroupUntilReadyReply) ProtoMessage() {}

func (x *WaitPlacementGroupUntilReadyReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitPlacementGroupUntilReadyReply.ProtoReflect.Descriptor instead.
func (*WaitPlacementGroupUntilReadyReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{62}
}

func (x *WaitPlacementGroupUntilReadyReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetNamedPlacementGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the placement group.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace to search.
	RayNamespace string `protobuf:"bytes,2,opt,name=ray_namespace,json=rayNamespace,proto3" json:"ray_namespace,omitempty"`
}

func (x *GetNamedPlacementGroupRequest) Reset() {
	*x = GetNamedPlacementGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNamedPlacementGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNamedPlacementGroupRequest) ProtoMessage() {}

func (x *GetNamedPlacementGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNamedPlacementGroupRequest.ProtoReflect.Descriptor instead.
func (*GetNamedPlacementGroupRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{63}
}

func (x *GetNamedPlacementGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetNamedPlacementGroupRequest) GetRayNamespace() string {
	if x != nil {
		return x.RayNamespace
	}
	return ""
}

type GetNamedPlacementGroupReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Data of placement group.
	PlacementGroupTableData *PlacementGroupTableData `protobuf:"bytes,2,opt,name=placement_group_table_data,json=placementGroupTableData,proto3" json:"placement_group_table_data,omitempty"`
}

func (x *GetNamedPlacementGroupReply) Reset() {
	*x = GetNamedPlacementGroupReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNamedPlacementGroupReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNamedPlacementGroupReply) ProtoMessage() {}

func (x *GetNamedPlacementGroupReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNamedPlacementGroupReply.ProtoReflect.Descriptor instead.
func (*GetNamedPlacementGroupReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{64}
}

func (x *GetNamedPlacementGroupReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetNamedPlacementGroupReply) GetPlacementGroupTableData() *PlacementGroupTableData {
	if x != nil {
		return x.PlacementGroupTableData
	}
	return nil
}

type DrainNodeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the node to drain.
	NodeId []byte `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *DrainNodeData) Reset() {
	*x = DrainNodeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrainNodeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrainNodeData) ProtoMessage() {}

func (x *DrainNodeData) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrainNodeData.ProtoReflect.Descriptor instead.
func (*DrainNodeData) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{65}
}

func (x *DrainNodeData) GetNodeId() []byte {
	if x != nil {
		return x.NodeId
	}
	return nil
}

type DrainNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Batched information of nodes to drain.
	DrainNodeData []*DrainNodeData `protobuf:"bytes,1,rep,name=drain_node_data,json=drainNodeData,proto3" json:"drain_node_data,omitempty"`
}

func (x *DrainNodeRequest) Reset() {
	*x = DrainNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrainNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrainNodeRequest) ProtoMessage() {}

func (x *DrainNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrainNodeRequest.ProtoReflect.Descriptor instead.
func (*DrainNodeRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{66}
}

func (x *DrainNodeRequest) GetDrainNodeData() []*DrainNodeData {
	if x != nil {
		return x.DrainNodeData
	}
	return nil
}

type DrainNodeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The node id that is successfully drained from GCS.
	NodeId []byte `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *DrainNodeStatus) Reset() {
	*x = DrainNodeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrainNodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrainNodeStatus) ProtoMessage() {}

func (x *DrainNodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrainNodeStatus.ProtoReflect.Descriptor instead.
func (*DrainNodeStatus) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{67}
}

func (x *DrainNodeStatus) GetNodeId() []byte {
	if x != nil {
		return x.NodeId
	}
	return nil
}

type DrainNodeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether or not the RPC succeeds.
	Status *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Batched status of nodes that are drained.
	DrainNodeStatus []*DrainNodeStatus `protobuf:"bytes,2,rep,name=drain_node_status,json=drainNodeStatus,proto3" json:"drain_node_status,omitempty"`
}

func (x *DrainNodeReply) Reset() {
	*x = DrainNodeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrainNodeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrainNodeReply) ProtoMessage() {}

func (x *DrainNodeReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrainNodeReply.ProtoReflect.Descriptor instead.
func (*DrainNodeReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{68}
}

func (x *DrainNodeReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DrainNodeReply) GetDrainNodeStatus() []*DrainNodeStatus {
	if x != nil {
		return x.DrainNodeStatus
	}
	return nil
}

type InternalKVGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Namespace []byte `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *InternalKVGetRequest) Reset() {
	*x = InternalKVGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalKVGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalKVGetRequest) ProtoMessage() {}

func (x *InternalKVGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalKVGetRequest.ProtoReflect.Descriptor instead.
func (*InternalKVGetRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{69}
}

func (x *InternalKVGetRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *InternalKVGetRequest) GetNamespace() []byte {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type InternalKVGetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Value  []byte     `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *InternalKVGetReply) Reset() {
	*x = InternalKVGetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalKVGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalKVGetReply) ProtoMessage() {}

func (x *InternalKVGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalKVGetReply.ProtoReflect.Descriptor instead.
func (*InternalKVGetReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{70}
}

func (x *InternalKVGetReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InternalKVGetReply) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type InternalKVPutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value     []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Overwrite bool   `protobuf:"varint,3,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
	Namespace []byte `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *InternalKVPutRequest) Reset() {
	*x = InternalKVPutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalKVPutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalKVPutRequest) ProtoMessage() {}

func (x *InternalKVPutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalKVPutRequest.ProtoReflect.Descriptor instead.
func (*InternalKVPutRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{71}
}

func (x *InternalKVPutRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *InternalKVPutRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InternalKVPutRequest) GetOverwrite() bool {
	if x != nil {
		return x.Overwrite
	}
	return false
}

func (x *InternalKVPutRequest) GetNamespace() []byte {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type InternalKVPutReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	AddedNum int32      `protobuf:"varint,2,opt,name=added_num,json=addedNum,proto3" json:"added_num,omitempty"`
}

func (x *InternalKVPutReply) Reset() {
	*x = InternalKVPutReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalKVPutReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalKVPutReply) ProtoMessage() {}

func (x *InternalKVPutReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalKVPutReply.ProtoReflect.Descriptor instead.
func (*InternalKVPutReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{72}
}

func (x *InternalKVPutReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InternalKVPutReply) GetAddedNum() int32 {
	if x != nil {
		return x.AddedNum
	}
	return 0
}

type InternalKVDelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Namespace   []byte `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	DelByPrefix bool   `protobuf:"varint,3,opt,name=del_by_prefix,json=delByPrefix,proto3" json:"del_by_prefix,omitempty"`
}

func (x *InternalKVDelRequest) Reset() {
	*x = InternalKVDelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalKVDelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalKVDelRequest) ProtoMessage() {}

func (x *InternalKVDelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalKVDelRequest.ProtoReflect.Descriptor instead.
func (*InternalKVDelRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{73}
}

func (x *InternalKVDelRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *InternalKVDelRequest) GetNamespace() []byte {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *InternalKVDelRequest) GetDelByPrefix() bool {
	if x != nil {
		return x.DelByPrefix
	}
	return false
}

type InternalKVDelReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	DeletedNum int32      `protobuf:"varint,2,opt,name=deleted_num,json=deletedNum,proto3" json:"deleted_num,omitempty"`
}

func (x *InternalKVDelReply) Reset() {
	*x = InternalKVDelReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalKVDelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalKVDelReply) ProtoMessage() {}

func (x *InternalKVDelReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalKVDelReply.ProtoReflect.Descriptor instead.
func (*InternalKVDelReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{74}
}

func (x *InternalKVDelReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InternalKVDelReply) GetDeletedNum() int32 {
	if x != nil {
		return x.DeletedNum
	}
	return 0
}

type InternalKVExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Namespace []byte `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *InternalKVExistsRequest) Reset() {
	*x = InternalKVExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalKVExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalKVExistsRequest) ProtoMessage() {}

func (x *InternalKVExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalKVExistsRequest.ProtoReflect.Descriptor instead.
func (*InternalKVExistsRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{75}
}

func (x *InternalKVExistsRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *InternalKVExistsRequest) GetNamespace() []byte {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type InternalKVExistsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Exists bool       `protobuf:"varint,2,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *InternalKVExistsReply) Reset() {
	*x = InternalKVExistsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalKVExistsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalKVExistsReply) ProtoMessage() {}

func (x *InternalKVExistsReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalKVExistsReply.ProtoReflect.Descriptor instead.
func (*InternalKVExistsReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{76}
}

func (x *InternalKVExistsReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InternalKVExistsReply) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type InternalKVKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix    []byte `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Namespace []byte `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *InternalKVKeysRequest) Reset() {
	*x = InternalKVKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalKVKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalKVKeysRequest) ProtoMessage() {}

func (x *InternalKVKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalKVKeysRequest.ProtoReflect.Descriptor instead.
func (*InternalKVKeysRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{77}
}

func (x *InternalKVKeysRequest) GetPrefix() []byte {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *InternalKVKeysRequest) GetNamespace() []byte {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type InternalKVKeysReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *GcsStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Results [][]byte   `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *InternalKVKeysReply) Reset() {
	*x = InternalKVKeysReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalKVKeysReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalKVKeysReply) ProtoMessage() {}

func (x *InternalKVKeysReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalKVKeysReply.ProtoReflect.Descriptor instead.
func (*InternalKVKeysReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{78}
}

func (x *InternalKVKeysReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InternalKVKeysReply) GetResults() [][]byte {
	if x != nil {
		return x.Results
	}
	return nil
}

type GcsPublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / The messages that are published.
	PubMessages []*PubMessage `protobuf:"bytes,1,rep,name=pub_messages,json=pubMessages,proto3" json:"pub_messages,omitempty"`
}

func (x *GcsPublishRequest) Reset() {
	*x = GcsPublishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcsPublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcsPublishRequest) ProtoMessage() {}

func (x *GcsPublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcsPublishRequest.ProtoReflect.Descriptor instead.
func (*GcsPublishRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{79}
}

func (x *GcsPublishRequest) GetPubMessages() []*PubMessage {
	if x != nil {
		return x.PubMessages
	}
	return nil
}

type GcsPublishReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Not populated.
	Status *GcsStatus `protobuf:"bytes,100,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GcsPublishReply) Reset() {
	*x = GcsPublishReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcsPublishReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcsPublishReply) ProtoMessage() {}

func (x *GcsPublishReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcsPublishReply.ProtoReflect.Descriptor instead.
func (*GcsPublishReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{80}
}

func (x *GcsPublishReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type GcsSubscriberPollRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / The id of the subscriber.
	SubscriberId []byte `protobuf:"bytes,1,opt,name=subscriber_id,json=subscriberId,proto3" json:"subscriber_id,omitempty"`
}

func (x *GcsSubscriberPollRequest) Reset() {
	*x = GcsSubscriberPollRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcsSubscriberPollRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcsSubscriberPollRequest) ProtoMessage() {}

func (x *GcsSubscriberPollRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcsSubscriberPollRequest.ProtoReflect.Descriptor instead.
func (*GcsSubscriberPollRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{81}
}

func (x *GcsSubscriberPollRequest) GetSubscriberId() []byte {
	if x != nil {
		return x.SubscriberId
	}
	return nil
}

type GcsSubscriberPollReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / The messages that are published.
	PubMessages []*PubMessage `protobuf:"bytes,1,rep,name=pub_messages,json=pubMessages,proto3" json:"pub_messages,omitempty"`
	// Not populated.
	Status *GcsStatus `protobuf:"bytes,100,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GcsSubscriberPollReply) Reset() {
	*x = GcsSubscriberPollReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcsSubscriberPollReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcsSubscriberPollReply) ProtoMessage() {}

func (x *GcsSubscriberPollReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcsSubscriberPollReply.ProtoReflect.Descriptor instead.
func (*GcsSubscriberPollReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{82}
}

func (x *GcsSubscriberPollReply) GetPubMessages() []*PubMessage {
	if x != nil {
		return x.PubMessages
	}
	return nil
}

func (x *GcsSubscriberPollReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type GcsSubscriberCommandBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / The id of the subscriber.
	SubscriberId []byte `protobuf:"bytes,1,opt,name=subscriber_id,json=subscriberId,proto3" json:"subscriber_id,omitempty"`
	// / Set of pubsub commands. Look at pubsub.proto for more details about the term.
	Commands []*Command `protobuf:"bytes,2,rep,name=commands,proto3" json:"commands,omitempty"`
}

func (x *GcsSubscriberCommandBatchRequest) Reset() {
	*x = GcsSubscriberCommandBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcsSubscriberCommandBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcsSubscriberCommandBatchRequest) ProtoMessage() {}

func (x *GcsSubscriberCommandBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcsSubscriberCommandBatchRequest.ProtoReflect.Descriptor instead.
func (*GcsSubscriberCommandBatchRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{83}
}

func (x *GcsSubscriberCommandBatchRequest) GetSubscriberId() []byte {
	if x != nil {
		return x.SubscriberId
	}
	return nil
}

func (x *GcsSubscriberCommandBatchRequest) GetCommands() []*Command {
	if x != nil {
		return x.Commands
	}
	return nil
}

type GcsSubscriberCommandBatchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Not populated.
	Status *GcsStatus `protobuf:"bytes,100,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GcsSubscriberCommandBatchReply) Reset() {
	*x = GcsSubscriberCommandBatchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcsSubscriberCommandBatchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcsSubscriberCommandBatchReply) ProtoMessage() {}

func (x *GcsSubscriberCommandBatchReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcsSubscriberCommandBatchReply.ProtoReflect.Descriptor instead.
func (*GcsSubscriberCommandBatchReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{84}
}

func (x *GcsSubscriberCommandBatchReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetAllResourceUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllResourceUsageRequest) Reset() {
	*x = GetAllResourceUsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllResourceUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllResourceUsageRequest) ProtoMessage() {}

func (x *GetAllResourceUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllResourceUsageRequest.ProtoReflect.Descriptor instead.
func (*GetAllResourceUsageRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{85}
}

type GetAllResourceUsageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            *GcsStatus              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ResourceUsageData *ResourceUsageBatchData `protobuf:"bytes,2,opt,name=resource_usage_data,json=resourceUsageData,proto3" json:"resource_usage_data,omitempty"`
}

func (x *GetAllResourceUsageReply) Reset() {
	*x = GetAllResourceUsageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllResourceUsageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllResourceUsageReply) ProtoMessage() {}

func (x *GetAllResourceUsageReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllResourceUsageReply.ProtoReflect.Descriptor instead.
func (*GetAllResourceUsageReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{86}
}

func (x *GetAllResourceUsageReply) GetStatus() *GcsStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetAllResourceUsageReply) GetResourceUsageData() *ResourceUsageBatchData {
	if x != nil {
		return x.ResourceUsageData
	}
	return nil
}

type GcsStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GcsStatus) Reset() {
	*x = GcsStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcsStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcsStatus) ProtoMessage() {}

func (x *GcsStatus) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_service_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcsStatus.ProtoReflect.Descriptor instead.
func (*GcsStatus) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_service_proto_rawDescGZIP(), []int{87}
}

func (x *GcsStatus) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GcsStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_src_ray_protobuf_gcs_service_proto protoreflect.FileDescriptor

var file_src_ray_protobuf_gcs_service_proto_rawDesc = []byte{
	0x0a, 0x22, 0x73, 0x72, 0x63, 0x2f, 0x72, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x1a, 0x1d, 0x73,
	0x72, 0x63, 0x2f, 0x72, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x73, 0x72,
	0x63, 0x2f, 0x72, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x73, 0x72, 0x63, 0x2f, 0x72, 0x61,
	0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x75, 0x62, 0x73, 0x75,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3a, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x4a, 0x6f, 0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x39, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x63, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2f,
	0x0a, 0x16, 0x4d, 0x61, 0x72, 0x6b, 0x4a, 0x6f, 0x62, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22,
	0x42, 0x0a, 0x14, 0x4d, 0x61, 0x72, 0x6b, 0x4a, 0x6f, 0x62, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4a, 0x6f, 0x62,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7b, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x63, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a,
	0x0d, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4a,
	0x6f, 0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x6a, 0x6f, 0x62,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4a, 0x6f, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x34, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6a,
	0x6f, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x41, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4a, 0x6f, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x78, 0x74, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x56, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x4a, 0x6f, 0x62, 0x49,
	0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x82, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x41, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x53, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x41, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x53,
	0x70, 0x65, 0x63, 0x22, 0x64, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x63, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43,
	0x0a, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x3e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x65, 0x61, 0x64, 0x4a,
	0x6f, 0x62, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x71, 0x0a, 0x16, 0x4b,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x69, 0x61, 0x47, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x22, 0x42,
	0x0a, 0x14, 0x4b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x69, 0x61, 0x47, 0x63,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x48, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x63, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3f, 0x0a, 0x11,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x63, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x17, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x63, 0x73, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x39, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x22, 0x42, 0x0a, 0x14, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x63, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x13,
	0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x5e, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x6c, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x61, 0x79, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x5c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x2e, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0xe2, 0x01,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x63,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x47, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x58, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x42, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x21, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x0d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x52, 0x0a, 0x1a, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22,
	0x46, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x55, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x41,
	0x0a, 0x13, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8b, 0x01,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x1a, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x22, 0x46, 0x0a, 0x18, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x33, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x11, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x44, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x51, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x39, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x12, 0x41, 0x64,
	0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x63, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x44, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x70,
	0x65, 0x63, 0x22, 0xb9, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x62, 0x6f,
	0x72, 0x72, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x0c, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x66, 0x73, 0x22, 0x46,
	0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x52, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x22, 0x40, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6c, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x22, 0x47, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x63,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x4b, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x19,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x48, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22,
	0xa3, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5d, 0x0a, 0x1a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x17, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x1d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x63, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5d,
	0x0a, 0x1a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x17, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x53, 0x0a,
	0x23, 0x57, 0x61, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x10, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x22, 0x4f, 0x0a, 0x21, 0x57, 0x61, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x58, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xa8, 0x01,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5d, 0x0a, 0x1a, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x17, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x28, 0x0a, 0x0d, 0x44, 0x72, 0x61, 0x69,
	0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x22, 0x52, 0x0a, 0x10, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0f, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x2a, 0x0a, 0x0f, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x0e, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x44, 0x0a, 0x11, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x46, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4b, 0x56, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22,
	0x56, 0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x56, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7a, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4b, 0x56, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x22, 0x5d, 0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4b,
	0x56, 0x50, 0x75, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x64, 0x64, 0x65, 0x64, 0x4e,
	0x75, 0x6d, 0x22, 0x6a, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x56,
	0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x65,
	0x6c, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x42, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x61,
	0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x56, 0x44, 0x65, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4e, 0x75,
	0x6d, 0x22, 0x49, 0x0a, 0x17, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x56, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x5b, 0x0a, 0x15,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x56, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x4d, 0x0a, 0x15, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x56, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x5b, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x56, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x63, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x4b, 0x0a, 0x11, 0x47, 0x63, 0x73, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x70, 0x75,
	0x62, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x62, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x22, 0x3d, 0x0a, 0x0f, 0x47, 0x63, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x3f, 0x0a, 0x18, 0x47, 0x63, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x7c, 0x0a, 0x16, 0x47, 0x63, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x36, 0x0a, 0x0c,
	0x70, 0x75, 0x62, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x62,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x75, 0x0a, 0x20, 0x47, 0x63, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x08, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x4c, 0x0a, 0x1e, 0x47, 0x63, 0x73, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x63, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a, 0x13,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x39, 0x0a,
	0x09, 0x47, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x43, 0x0a, 0x15, 0x47, 0x63, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x50, 0x43, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x43, 0x53, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x32, 0x85, 0x03,
	0x0a, 0x11, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x12, 0x16, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x51, 0x0a, 0x0f, 0x4d,
	0x61, 0x72, 0x6b, 0x4a, 0x6f, 0x62, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1f,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x4a, 0x6f, 0x62,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x4a, 0x6f,
	0x62, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4b,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1d, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4a,
	0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4e, 0x0a, 0x0e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1e, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x6f,
	0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x6f,
	0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x12, 0x1c, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x4a, 0x6f, 0x62,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x4a, 0x6f, 0x62, 0x49, 0x44,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xc5, 0x04, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x47, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a,
	0x0d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x45, 0x0a, 0x0b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x48, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1c, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x57, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x21, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x51, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1f, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x51, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x51, 0x0a, 0x0f, 0x4b, 0x69,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x69, 0x61, 0x47, 0x63, 0x73, 0x12, 0x1f, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x56, 0x69, 0x61, 0x47, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x56, 0x69, 0x61, 0x47, 0x63, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xb0, 0x01,
	0x0a, 0x17, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x47,
	0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x0f, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x1f, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x0a,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x32, 0xba, 0x01, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x47, 0x63, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x57, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xe5, 0x02,
	0x0a, 0x14, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x63, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x23, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4b, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x54, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4b, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xff, 0x04, 0x0a, 0x1c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x63, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x60, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x24, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x57, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x21, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x66, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x60, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x24, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x78, 0x0a,
	0x1c, 0x57, 0x61, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x2c, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xa3, 0x03, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x56, 0x47, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x4b, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x56, 0x47, 0x65,
	0x74, 0x12, 0x1d, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x56, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4b, 0x56, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4b, 0x0a,
	0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x56, 0x50, 0x75, 0x74, 0x12, 0x1d,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x4b, 0x56, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x4b, 0x56, 0x50, 0x75, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4b, 0x0a, 0x0d, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x56, 0x44, 0x65, 0x6c, 0x12, 0x1d, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x56,
	0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x56, 0x44,
	0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x54, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4b, 0x56, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x56,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x4b, 0x56, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4e, 0x0a,
	0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x56, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x1e, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x4b, 0x56, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x4b, 0x56, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xa8, 0x02,
	0x0a, 0x18, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62,
	0x47, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x47, 0x63,
	0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x1a, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x63, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x63, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x57,
	0x0a, 0x11, 0x47, 0x63, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x50,
	0x6f, 0x6c, 0x6c, 0x12, 0x21, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x63,
	0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x63, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x50, 0x6f,
	0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6f, 0x0a, 0x19, 0x47, 0x63, 0x73, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x29, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x63, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x63, 0x73, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0x92, 0x03, 0x0a, 0x1a, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x63, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x6c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x28, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x5d, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5d,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xc8, 0x02,
	0x0a, 0x12, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x63, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f,
	0x0a, 0x09, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x4e, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1e, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x57, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x8b, 0x01, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x42, 0x0f, 0x47, 0x63, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x75, 0x65, 0x69, 0x61, 0x6e, 0x2f, 0x72,
	0x61, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x72, 0x61, 0x79, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0xf8, 0x01, 0x01, 0xa2, 0x02, 0x03, 0x52, 0x52,
	0x58, 0xaa, 0x02, 0x07, 0x52, 0x61, 0x79, 0x2e, 0x52, 0x70, 0x63, 0xca, 0x02, 0x07, 0x52, 0x61,
	0x79, 0x5c, 0x52, 0x70, 0x63, 0xe2, 0x02, 0x13, 0x52, 0x61, 0x79, 0x5c, 0x52, 0x70, 0x63, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x08, 0x52, 0x61,
	0x79, 0x3a, 0x3a, 0x52, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_src_ray_protobuf_gcs_service_proto_rawDescOnce sync.Once
	file_src_ray_protobuf_gcs_service_proto_rawDescData = file_src_ray_protobuf_gcs_service_proto_rawDesc
)

func file_src_ray_protobuf_gcs_service_proto_rawDescGZIP() []byte {
	file_src_ray_protobuf_gcs_service_proto_rawDescOnce.Do(func() {
		file_src_ray_protobuf_gcs_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_ray_protobuf_gcs_service_proto_rawDescData)
	})
	return file_src_ray_protobuf_gcs_service_proto_rawDescData
}

var file_src_ray_protobuf_gcs_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_src_ray_protobuf_gcs_service_proto_msgTypes = make([]protoimpl.MessageInfo, 89)
var file_src_ray_protobuf_gcs_service_proto_goTypes = []interface{}{
	(GcsServiceFailureType)(0),                  // 0: ray.rpc.GcsServiceFailureType
	(*AddJobRequest)(nil),                       // 1: ray.rpc.AddJobRequest
	(*AddJobReply)(nil),                         // 2: ray.rpc.AddJobReply
	(*MarkJobFinishedRequest)(nil),              // 3: ray.rpc.MarkJobFinishedRequest
	(*MarkJobFinishedReply)(nil),                // 4: ray.rpc.MarkJobFinishedReply
	(*GetAllJobInfoRequest)(nil),                // 5: ray.rpc.GetAllJobInfoRequest
	(*GetAllJobInfoReply)(nil),                  // 6: ray.rpc.GetAllJobInfoReply
	(*ReportJobErrorRequest)(nil),               // 7: ray.rpc.ReportJobErrorRequest
	(*ReportJobErrorReply)(nil),                 // 8: ray.rpc.ReportJobErrorReply
	(*GetNextJobIDRequest)(nil),                 // 9: ray.rpc.GetNextJobIDRequest
	(*GetNextJobIDReply)(nil),                   // 10: ray.rpc.GetNextJobIDReply
	(*GetActorInfoRequest)(nil),                 // 11: ray.rpc.GetActorInfoRequest
	(*GetActorInfoReply)(nil),                   // 12: ray.rpc.GetActorInfoReply
	(*GetNamedActorInfoRequest)(nil),            // 13: ray.rpc.GetNamedActorInfoRequest
	(*GetNamedActorInfoReply)(nil),              // 14: ray.rpc.GetNamedActorInfoReply
	(*ListNamedActorsRequest)(nil),              // 15: ray.rpc.ListNamedActorsRequest
	(*ListNamedActorsReply)(nil),                // 16: ray.rpc.ListNamedActorsReply
	(*GetAllActorInfoRequest)(nil),              // 17: ray.rpc.GetAllActorInfoRequest
	(*GetAllActorInfoReply)(nil),                // 18: ray.rpc.GetAllActorInfoReply
	(*KillActorViaGcsRequest)(nil),              // 19: ray.rpc.KillActorViaGcsRequest
	(*KillActorViaGcsReply)(nil),                // 20: ray.rpc.KillActorViaGcsReply
	(*RegisterNodeRequest)(nil),                 // 21: ray.rpc.RegisterNodeRequest
	(*RegisterNodeReply)(nil),                   // 22: ray.rpc.RegisterNodeReply
	(*GetAllNodeInfoRequest)(nil),               // 23: ray.rpc.GetAllNodeInfoRequest
	(*GetAllNodeInfoReply)(nil),                 // 24: ray.rpc.GetAllNodeInfoReply
	(*ReportHeartbeatRequest)(nil),              // 25: ray.rpc.ReportHeartbeatRequest
	(*ReportHeartbeatReply)(nil),                // 26: ray.rpc.ReportHeartbeatReply
	(*CheckAliveRequest)(nil),                   // 27: ray.rpc.CheckAliveRequest
	(*CheckAliveReply)(nil),                     // 28: ray.rpc.CheckAliveReply
	(*GetInternalConfigRequest)(nil),            // 29: ray.rpc.GetInternalConfigRequest
	(*GetInternalConfigReply)(nil),              // 30: ray.rpc.GetInternalConfigReply
	(*GetResourcesRequest)(nil),                 // 31: ray.rpc.GetResourcesRequest
	(*GetResourcesReply)(nil),                   // 32: ray.rpc.GetResourcesReply
	(*DeleteResourcesReply)(nil),                // 33: ray.rpc.DeleteResourcesReply
	(*GetAllAvailableResourcesRequest)(nil),     // 34: ray.rpc.GetAllAvailableResourcesRequest
	(*GetAllAvailableResourcesReply)(nil),       // 35: ray.rpc.GetAllAvailableResourcesReply
	(*ReportResourceUsageRequest)(nil),          // 36: ray.rpc.ReportResourceUsageRequest
	(*ReportResourceUsageReply)(nil),            // 37: ray.rpc.ReportResourceUsageReply
	(*AddProfileDataRequest)(nil),               // 38: ray.rpc.AddProfileDataRequest
	(*AddProfileDataReply)(nil),                 // 39: ray.rpc.AddProfileDataReply
	(*GetAllProfileInfoRequest)(nil),            // 40: ray.rpc.GetAllProfileInfoRequest
	(*GetAllProfileInfoReply)(nil),              // 41: ray.rpc.GetAllProfileInfoReply
	(*ReportWorkerFailureRequest)(nil),          // 42: ray.rpc.ReportWorkerFailureRequest
	(*ReportWorkerFailureReply)(nil),            // 43: ray.rpc.ReportWorkerFailureReply
	(*GetWorkerInfoRequest)(nil),                // 44: ray.rpc.GetWorkerInfoRequest
	(*GetWorkerInfoReply)(nil),                  // 45: ray.rpc.GetWorkerInfoReply
	(*GetAllWorkerInfoRequest)(nil),             // 46: ray.rpc.GetAllWorkerInfoRequest
	(*GetAllWorkerInfoReply)(nil),               // 47: ray.rpc.GetAllWorkerInfoReply
	(*AddWorkerInfoRequest)(nil),                // 48: ray.rpc.AddWorkerInfoRequest
	(*AddWorkerInfoReply)(nil),                  // 49: ray.rpc.AddWorkerInfoReply
	(*CreateActorRequest)(nil),                  // 50: ray.rpc.CreateActorRequest
	(*CreateActorReply)(nil),                    // 51: ray.rpc.CreateActorReply
	(*RegisterActorRequest)(nil),                // 52: ray.rpc.RegisterActorRequest
	(*RegisterActorReply)(nil),                  // 53: ray.rpc.RegisterActorReply
	(*CreatePlacementGroupRequest)(nil),         // 54: ray.rpc.CreatePlacementGroupRequest
	(*CreatePlacementGroupReply)(nil),           // 55: ray.rpc.CreatePlacementGroupReply
	(*RemovePlacementGroupRequest)(nil),         // 56: ray.rpc.RemovePlacementGroupRequest
	(*RemovePlacementGroupReply)(nil),           // 57: ray.rpc.RemovePlacementGroupReply
	(*GetPlacementGroupRequest)(nil),            // 58: ray.rpc.GetPlacementGroupRequest
	(*GetPlacementGroupReply)(nil),              // 59: ray.rpc.GetPlacementGroupReply
	(*GetAllPlacementGroupRequest)(nil),         // 60: ray.rpc.GetAllPlacementGroupRequest
	(*GetAllPlacementGroupReply)(nil),           // 61: ray.rpc.GetAllPlacementGroupReply
	(*WaitPlacementGroupUntilReadyRequest)(nil), // 62: ray.rpc.WaitPlacementGroupUntilReadyRequest
	(*WaitPlacementGroupUntilReadyReply)(nil),   // 63: ray.rpc.WaitPlacementGroupUntilReadyReply
	(*GetNamedPlacementGroupRequest)(nil),       // 64: ray.rpc.GetNamedPlacementGroupRequest
	(*GetNamedPlacementGroupReply)(nil),         // 65: ray.rpc.GetNamedPlacementGroupReply
	(*DrainNodeData)(nil),                       // 66: ray.rpc.DrainNodeData
	(*DrainNodeRequest)(nil),                    // 67: ray.rpc.DrainNodeRequest
	(*DrainNodeStatus)(nil),                     // 68: ray.rpc.DrainNodeStatus
	(*DrainNodeReply)(nil),                      // 69: ray.rpc.DrainNodeReply
	(*InternalKVGetRequest)(nil),                // 70: ray.rpc.InternalKVGetRequest
	(*InternalKVGetReply)(nil),                  // 71: ray.rpc.InternalKVGetReply
	(*InternalKVPutRequest)(nil),                // 72: ray.rpc.InternalKVPutRequest
	(*InternalKVPutReply)(nil),                  // 73: ray.rpc.InternalKVPutReply
	(*InternalKVDelRequest)(nil),                // 74: ray.rpc.InternalKVDelRequest
	(*InternalKVDelReply)(nil),                  // 75: ray.rpc.InternalKVDelReply
	(*InternalKVExistsRequest)(nil),             // 76: ray.rpc.InternalKVExistsRequest
	(*InternalKVExistsReply)(nil),               // 77: ray.rpc.InternalKVExistsReply
	(*InternalKVKeysRequest)(nil),               // 78: ray.rpc.InternalKVKeysRequest
	(*InternalKVKeysReply)(nil),                 // 79: ray.rpc.InternalKVKeysReply
	(*GcsPublishRequest)(nil),                   // 80: ray.rpc.GcsPublishRequest
	(*GcsPublishReply)(nil),                     // 81: ray.rpc.GcsPublishReply
	(*GcsSubscriberPollRequest)(nil),            // 82: ray.rpc.GcsSubscriberPollRequest
	(*GcsSubscriberPollReply)(nil),              // 83: ray.rpc.GcsSubscriberPollReply
	(*GcsSubscriberCommandBatchRequest)(nil),    // 84: ray.rpc.GcsSubscriberCommandBatchRequest
	(*GcsSubscriberCommandBatchReply)(nil),      // 85: ray.rpc.GcsSubscriberCommandBatchReply
	(*GetAllResourceUsageRequest)(nil),          // 86: ray.rpc.GetAllResourceUsageRequest
	(*GetAllResourceUsageReply)(nil),            // 87: ray.rpc.GetAllResourceUsageReply
	(*GcsStatus)(nil),                           // 88: ray.rpc.GcsStatus
	nil,                                         // 89: ray.rpc.GetResourcesReply.ResourcesEntry
	(*JobTableData)(nil),                        // 90: ray.rpc.JobTableData
	(*ErrorTableData)(nil),                      // 91: ray.rpc.ErrorTableData
	(*ActorTableData)(nil),                      // 92: ray.rpc.ActorTableData
	(*TaskSpec)(nil),                            // 93: ray.rpc.TaskSpec
	(*NamedActorInfo)(nil),                      // 94: ray.rpc.NamedActorInfo
	(*GcsNodeInfo)(nil),                         // 95: ray.rpc.GcsNodeInfo
	(*HeartbeatTableData)(nil),                  // 96: ray.rpc.HeartbeatTableData
	(*AvailableResources)(nil),                  // 97: ray.rpc.AvailableResources
	(*ResourcesData)(nil),                       // 98: ray.rpc.ResourcesData
	(*ProfileTableData)(nil),                    // 99: ray.rpc.ProfileTableData
	(*WorkerTableData)(nil),                     // 100: ray.rpc.WorkerTableData
	(*Address)(nil),                             // 101: ray.rpc.Address
	(*ObjectReferenceCount)(nil),                // 102: ray.rpc.ObjectReferenceCount
	(*PlacementGroupSpec)(nil),                  // 103: ray.rpc.PlacementGroupSpec
	(*PlacementGroupTableData)(nil),             // 104: ray.rpc.PlacementGroupTableData
	(*PubMessage)(nil),                          // 105: ray.rpc.PubMessage
	(*Command)(nil),                             // 106: ray.rpc.Command
	(*ResourceUsageBatchData)(nil),              // 107: ray.rpc.ResourceUsageBatchData
	(*ResourceTableData)(nil),                   // 108: ray.rpc.ResourceTableData
}
var file_src_ray_protobuf_gcs_service_proto_depIdxs = []int32{
	90,  // 0: ray.rpc.AddJobRequest.data:type_name -> ray.rpc.JobTableData
	88,  // 1: ray.rpc.AddJobReply.status:type_name -> ray.rpc.GcsStatus
	88,  // 2: ray.rpc.MarkJobFinishedReply.status:type_name -> ray.rpc.GcsStatus
	88,  // 3: ray.rpc.GetAllJobInfoReply.status:type_name -> ray.rpc.GcsStatus
	90,  // 4: ray.rpc.GetAllJobInfoReply.job_info_list:type_name -> ray.rpc.JobTableData
	91,  // 5: ray.rpc.ReportJobErrorRequest.job_error:type_name -> ray.rpc.ErrorTableData
	88,  // 6: ray.rpc.ReportJobErrorReply.status:type_name -> ray.rpc.GcsStatus
	88,  // 7: ray.rpc.GetNextJobIDReply.status:type_name -> ray.rpc.GcsStatus
	88,  // 8: ray.rpc.GetActorInfoReply.status:type_name -> ray.rpc.GcsStatus
	92,  // 9: ray.rpc.GetActorInfoReply.actor_table_data:type_name -> ray.rpc.ActorTableData
	88,  // 10: ray.rpc.GetNamedActorInfoReply.status:type_name -> ray.rpc.GcsStatus
	92,  // 11: ray.rpc.GetNamedActorInfoReply.actor_table_data:type_name -> ray.rpc.ActorTableData
	93,  // 12: ray.rpc.GetNamedActorInfoReply.task_spec:type_name -> ray.rpc.TaskSpec
	88,  // 13: ray.rpc.ListNamedActorsReply.status:type_name -> ray.rpc.GcsStatus
	94,  // 14: ray.rpc.ListNamedActorsReply.named_actors_list:type_name -> ray.rpc.NamedActorInfo
	88,  // 15: ray.rpc.GetAllActorInfoReply.status:type_name -> ray.rpc.GcsStatus
	92,  // 16: ray.rpc.GetAllActorInfoReply.actor_table_data:type_name -> ray.rpc.ActorTableData
	88,  // 17: ray.rpc.KillActorViaGcsReply.status:type_name -> ray.rpc.GcsStatus
	95,  // 18: ray.rpc.RegisterNodeRequest.node_info:type_name -> ray.rpc.GcsNodeInfo
	88,  // 19: ray.rpc.RegisterNodeReply.status:type_name -> ray.rpc.GcsStatus
	88,  // 20: ray.rpc.GetAllNodeInfoReply.status:type_name -> ray.rpc.GcsStatus
	95,  // 21: ray.rpc.GetAllNodeInfoReply.node_info_list:type_name -> ray.rpc.GcsNodeInfo
	96,  // 22: ray.rpc.ReportHeartbeatRequest.heartbeat:type_name -> ray.rpc.HeartbeatTableData
	88,  // 23: ray.rpc.ReportHeartbeatReply.status:type_name -> ray.rpc.GcsStatus
	88,  // 24: ray.rpc.CheckAliveReply.status:type_name -> ray.rpc.GcsStatus
	88,  // 25: ray.rpc.GetInternalConfigReply.status:type_name -> ray.rpc.GcsStatus
	88,  // 26: ray.rpc.GetResourcesReply.status:type_name -> ray.rpc.GcsStatus
	89,  // 27: ray.rpc.GetResourcesReply.resources:type_name -> ray.rpc.GetResourcesReply.ResourcesEntry
	88,  // 28: ray.rpc.DeleteResourcesReply.status:type_name -> ray.rpc.GcsStatus
	88,  // 29: ray.rpc.GetAllAvailableResourcesReply.status:type_name -> ray.rpc.GcsStatus
	97,  // 30: ray.rpc.GetAllAvailableResourcesReply.resources_list:type_name -> ray.rpc.AvailableResources
	98,  // 31: ray.rpc.ReportResourceUsageRequest.resources:type_name -> ray.rpc.ResourcesData
	88,  // 32: ray.rpc.ReportResourceUsageReply.status:type_name -> ray.rpc.GcsStatus
	99,  // 33: ray.rpc.AddProfileDataRequest.profile_data:type_name -> ray.rpc.ProfileTableData
	88,  // 34: ray.rpc.AddProfileDataReply.status:type_name -> ray.rpc.GcsStatus
	88,  // 35: ray.rpc.GetAllProfileInfoReply.status:type_name -> ray.rpc.GcsStatus
	99,  // 36: ray.rpc.GetAllProfileInfoReply.profile_info_list:type_name -> ray.rpc.ProfileTableData
	100, // 37: ray.rpc.ReportWorkerFailureRequest.worker_failure:type_name -> ray.rpc.WorkerTableData
	88,  // 38: ray.rpc.ReportWorkerFailureReply.status:type_name -> ray.rpc.GcsStatus
	88,  // 39: ray.rpc.GetWorkerInfoReply.status:type_name -> ray.rpc.GcsStatus
	100, // 40: ray.rpc.GetWorkerInfoReply.worker_table_data:type_name -> ray.rpc.WorkerTableData
	88,  // 41: ray.rpc.GetAllWorkerInfoReply.status:type_name -> ray.rpc.GcsStatus
	100, // 42: ray.rpc.GetAllWorkerInfoReply.worker_table_data:type_name -> ray.rpc.WorkerTableData
	100, // 43: ray.rpc.AddWorkerInfoRequest.worker_data:type_name -> ray.rpc.WorkerTableData
	88,  // 44: ray.rpc.AddWorkerInfoReply.status:type_name -> ray.rpc.GcsStatus
	93,  // 45: ray.rpc.CreateActorRequest.task_spec:type_name -> ray.rpc.TaskSpec
	88,  // 46: ray.rpc.CreateActorReply.status:type_name -> ray.rpc.GcsStatus
	101, // 47: ray.rpc.CreateActorReply.actor_address:type_name -> ray.rpc.Address
	102, // 48: ray.rpc.CreateActorReply.borrowed_refs:type_name -> ray.rpc.ObjectReferenceCount
	93,  // 49: ray.rpc.RegisterActorRequest.task_spec:type_name -> ray.rpc.TaskSpec
	88,  // 50: ray.rpc.RegisterActorReply.status:type_name -> ray.rpc.GcsStatus
	103, // 51: ray.rpc.CreatePlacementGroupRequest.placement_group_spec:type_name -> ray.rpc.PlacementGroupSpec
	88,  // 52: ray.rpc.CreatePlacementGroupReply.status:type_name -> ray.rpc.GcsStatus
	88,  // 53: ray.rpc.RemovePlacementGroupReply.status:type_name -> ray.rpc.GcsStatus
	88,  // 54: ray.rpc.GetPlacementGroupReply.status:type_name -> ray.rpc.GcsStatus
	104, // 55: ray.rpc.GetPlacementGroupReply.placement_group_table_data:type_name -> ray.rpc.PlacementGroupTableData
	88,  // 56: ray.rpc.GetAllPlacementGroupReply.status:type_name -> ray.rpc.GcsStatus
	104, // 57: ray.rpc.GetAllPlacementGroupReply.placement_group_table_data:type_name -> ray.rpc.PlacementGroupTableData
	88,  // 58: ray.rpc.WaitPlacementGroupUntilReadyReply.status:type_name -> ray.rpc.GcsStatus
	88,  // 59: ray.rpc.GetNamedPlacementGroupReply.status:type_name -> ray.rpc.GcsStatus
	104, // 60: ray.rpc.GetNamedPlacementGroupReply.placement_group_table_data:type_name -> ray.rpc.PlacementGroupTableData
	66,  // 61: ray.rpc.DrainNodeRequest.drain_node_data:type_name -> ray.rpc.DrainNodeData
	88,  // 62: ray.rpc.DrainNodeReply.status:type_name -> ray.rpc.GcsStatus
	68,  // 63: ray.rpc.DrainNodeReply.drain_node_status:type_name -> ray.rpc.DrainNodeStatus
	88,  // 64: ray.rpc.InternalKVGetReply.status:type_name -> ray.rpc.GcsStatus
	88,  // 65: ray.rpc.InternalKVPutReply.status:type_name -> ray.rpc.GcsStatus
	88,  // 66: ray.rpc.InternalKVDelReply.status:type_name -> ray.rpc.GcsStatus
	88,  // 67: ray.rpc.InternalKVExistsReply.status:type_name -> ray.rpc.GcsStatus
	88,  // 68: ray.rpc.InternalKVKeysReply.status:type_name -> ray.rpc.GcsStatus
	105, // 69: ray.rpc.GcsPublishRequest.pub_messages:type_name -> ray.rpc.PubMessage
	88,  // 70: ray.rpc.GcsPublishReply.status:type_name -> ray.rpc.GcsStatus
	105, // 71: ray.rpc.GcsSubscriberPollReply.pub_messages:type_name -> ray.rpc.PubMessage
	88,  // 72: ray.rpc.GcsSubscriberPollReply.status:type_name -> ray.rpc.GcsStatus
	106, // 73: ray.rpc.GcsSubscriberCommandBatchRequest.commands:type_name -> ray.rpc.Command
	88,  // 74: ray.rpc.GcsSubscriberCommandBatchReply.status:type_name -> ray.rpc.GcsStatus
	88,  // 75: ray.rpc.GetAllResourceUsageReply.status:type_name -> ray.rpc.GcsStatus
	107, // 76: ray.rpc.GetAllResourceUsageReply.resource_usage_data:type_name -> ray.rpc.ResourceUsageBatchData
	108, // 77: ray.rpc.GetResourcesReply.ResourcesEntry.value:type_name -> ray.rpc.ResourceTableData
	1,   // 78: ray.rpc.JobInfoGcsService.AddJob:input_type -> ray.rpc.AddJobRequest
	3,   // 79: ray.rpc.JobInfoGcsService.MarkJobFinished:input_type -> ray.rpc.MarkJobFinishedRequest
	5,   // 80: ray.rpc.JobInfoGcsService.GetAllJobInfo:input_type -> ray.rpc.GetAllJobInfoRequest
	7,   // 81: ray.rpc.JobInfoGcsService.ReportJobError:input_type -> ray.rpc.ReportJobErrorRequest
	9,   // 82: ray.rpc.JobInfoGcsService.GetNextJobID:input_type -> ray.rpc.GetNextJobIDRequest
	52,  // 83: ray.rpc.ActorInfoGcsService.RegisterActor:input_type -> ray.rpc.RegisterActorRequest
	50,  // 84: ray.rpc.ActorInfoGcsService.CreateActor:input_type -> ray.rpc.CreateActorRequest
	11,  // 85: ray.rpc.ActorInfoGcsService.GetActorInfo:input_type -> ray.rpc.GetActorInfoRequest
	13,  // 86: ray.rpc.ActorInfoGcsService.GetNamedActorInfo:input_type -> ray.rpc.GetNamedActorInfoRequest
	15,  // 87: ray.rpc.ActorInfoGcsService.ListNamedActors:input_type -> ray.rpc.ListNamedActorsRequest
	17,  // 88: ray.rpc.ActorInfoGcsService.GetAllActorInfo:input_type -> ray.rpc.GetAllActorInfoRequest
	19,  // 89: ray.rpc.ActorInfoGcsService.KillActorViaGcs:input_type -> ray.rpc.KillActorViaGcsRequest
	25,  // 90: ray.rpc.HeartbeatInfoGcsService.ReportHeartbeat:input_type -> ray.rpc.ReportHeartbeatRequest
	27,  // 91: ray.rpc.HeartbeatInfoGcsService.CheckAlive:input_type -> ray.rpc.CheckAliveRequest
	38,  // 92: ray.rpc.StatsGcsService.AddProfileData:input_type -> ray.rpc.AddProfileDataRequest
	40,  // 93: ray.rpc.StatsGcsService.GetAllProfileInfo:input_type -> ray.rpc.GetAllProfileInfoRequest
	42,  // 94: ray.rpc.WorkerInfoGcsService.ReportWorkerFailure:input_type -> ray.rpc.ReportWorkerFailureRequest
	44,  // 95: ray.rpc.WorkerInfoGcsService.GetWorkerInfo:input_type -> ray.rpc.GetWorkerInfoRequest
	46,  // 96: ray.rpc.WorkerInfoGcsService.GetAllWorkerInfo:input_type -> ray.rpc.GetAllWorkerInfoRequest
	48,  // 97: ray.rpc.WorkerInfoGcsService.AddWorkerInfo:input_type -> ray.rpc.AddWorkerInfoRequest
	54,  // 98: ray.rpc.PlacementGroupInfoGcsService.CreatePlacementGroup:input_type -> ray.rpc.CreatePlacementGroupRequest
	56,  // 99: ray.rpc.PlacementGroupInfoGcsService.RemovePlacementGroup:input_type -> ray.rpc.RemovePlacementGroupRequest
	58,  // 100: ray.rpc.PlacementGroupInfoGcsService.GetPlacementGroup:input_type -> ray.rpc.GetPlacementGroupRequest
	64,  // 101: ray.rpc.PlacementGroupInfoGcsService.GetNamedPlacementGroup:input_type -> ray.rpc.GetNamedPlacementGroupRequest
	60,  // 102: ray.rpc.PlacementGroupInfoGcsService.GetAllPlacementGroup:input_type -> ray.rpc.GetAllPlacementGroupRequest
	62,  // 103: ray.rpc.PlacementGroupInfoGcsService.WaitPlacementGroupUntilReady:input_type -> ray.rpc.WaitPlacementGroupUntilReadyRequest
	70,  // 104: ray.rpc.InternalKVGcsService.InternalKVGet:input_type -> ray.rpc.InternalKVGetRequest
	72,  // 105: ray.rpc.InternalKVGcsService.InternalKVPut:input_type -> ray.rpc.InternalKVPutRequest
	74,  // 106: ray.rpc.InternalKVGcsService.InternalKVDel:input_type -> ray.rpc.InternalKVDelRequest
	76,  // 107: ray.rpc.InternalKVGcsService.InternalKVExists:input_type -> ray.rpc.InternalKVExistsRequest
	78,  // 108: ray.rpc.InternalKVGcsService.InternalKVKeys:input_type -> ray.rpc.InternalKVKeysRequest
	80,  // 109: ray.rpc.InternalPubSubGcsService.GcsPublish:input_type -> ray.rpc.GcsPublishRequest
	82,  // 110: ray.rpc.InternalPubSubGcsService.GcsSubscriberPoll:input_type -> ray.rpc.GcsSubscriberPollRequest
	84,  // 111: ray.rpc.InternalPubSubGcsService.GcsSubscriberCommandBatch:input_type -> ray.rpc.GcsSubscriberCommandBatchRequest
	31,  // 112: ray.rpc.NodeResourceInfoGcsService.GetResources:input_type -> ray.rpc.GetResourcesRequest
	34,  // 113: ray.rpc.NodeResourceInfoGcsService.GetAllAvailableResources:input_type -> ray.rpc.GetAllAvailableResourcesRequest
	36,  // 114: ray.rpc.NodeResourceInfoGcsService.ReportResourceUsage:input_type -> ray.rpc.ReportResourceUsageRequest
	86,  // 115: ray.rpc.NodeResourceInfoGcsService.GetAllResourceUsage:input_type -> ray.rpc.GetAllResourceUsageRequest
	21,  // 116: ray.rpc.NodeInfoGcsService.RegisterNode:input_type -> ray.rpc.RegisterNodeRequest
	67,  // 117: ray.rpc.NodeInfoGcsService.DrainNode:input_type -> ray.rpc.DrainNodeRequest
	23,  // 118: ray.rpc.NodeInfoGcsService.GetAllNodeInfo:input_type -> ray.rpc.GetAllNodeInfoRequest
	29,  // 119: ray.rpc.NodeInfoGcsService.GetInternalConfig:input_type -> ray.rpc.GetInternalConfigRequest
	2,   // 120: ray.rpc.JobInfoGcsService.AddJob:output_type -> ray.rpc.AddJobReply
	4,   // 121: ray.rpc.JobInfoGcsService.MarkJobFinished:output_type -> ray.rpc.MarkJobFinishedReply
	6,   // 122: ray.rpc.JobInfoGcsService.GetAllJobInfo:output_type -> ray.rpc.GetAllJobInfoReply
	8,   // 123: ray.rpc.JobInfoGcsService.ReportJobError:output_type -> ray.rpc.ReportJobErrorReply
	10,  // 124: ray.rpc.JobInfoGcsService.GetNextJobID:output_type -> ray.rpc.GetNextJobIDReply
	53,  // 125: ray.rpc.ActorInfoGcsService.RegisterActor:output_type -> ray.rpc.RegisterActorReply
	51,  // 126: ray.rpc.ActorInfoGcsService.CreateActor:output_type -> ray.rpc.CreateActorReply
	12,  // 127: ray.rpc.ActorInfoGcsService.GetActorInfo:output_type -> ray.rpc.GetActorInfoReply
	14,  // 128: ray.rpc.ActorInfoGcsService.GetNamedActorInfo:output_type -> ray.rpc.GetNamedActorInfoReply
	16,  // 129: ray.rpc.ActorInfoGcsService.ListNamedActors:output_type -> ray.rpc.ListNamedActorsReply
	18,  // 130: ray.rpc.ActorInfoGcsService.GetAllActorInfo:output_type -> ray.rpc.GetAllActorInfoReply
	20,  // 131: ray.rpc.ActorInfoGcsService.KillActorViaGcs:output_type -> ray.rpc.KillActorViaGcsReply
	26,  // 132: ray.rpc.HeartbeatInfoGcsService.ReportHeartbeat:output_type -> ray.rpc.ReportHeartbeatReply
	28,  // 133: ray.rpc.HeartbeatInfoGcsService.CheckAlive:output_type -> ray.rpc.CheckAliveReply
	39,  // 134: ray.rpc.StatsGcsService.AddProfileData:output_type -> ray.rpc.AddProfileDataReply
	41,  // 135: ray.rpc.StatsGcsService.GetAllProfileInfo:output_type -> ray.rpc.GetAllProfileInfoReply
	43,  // 136: ray.rpc.WorkerInfoGcsService.ReportWorkerFailure:output_type -> ray.rpc.ReportWorkerFailureReply
	45,  // 137: ray.rpc.WorkerInfoGcsService.GetWorkerInfo:output_type -> ray.rpc.GetWorkerInfoReply
	47,  // 138: ray.rpc.WorkerInfoGcsService.GetAllWorkerInfo:output_type -> ray.rpc.GetAllWorkerInfoReply
	49,  // 139: ray.rpc.WorkerInfoGcsService.AddWorkerInfo:output_type -> ray.rpc.AddWorkerInfoReply
	55,  // 140: ray.rpc.PlacementGroupInfoGcsService.CreatePlacementGroup:output_type -> ray.rpc.CreatePlacementGroupReply
	57,  // 141: ray.rpc.PlacementGroupInfoGcsService.RemovePlacementGroup:output_type -> ray.rpc.RemovePlacementGroupReply
	59,  // 142: ray.rpc.PlacementGroupInfoGcsService.GetPlacementGroup:output_type -> ray.rpc.GetPlacementGroupReply
	65,  // 143: ray.rpc.PlacementGroupInfoGcsService.GetNamedPlacementGroup:output_type -> ray.rpc.GetNamedPlacementGroupReply
	61,  // 144: ray.rpc.PlacementGroupInfoGcsService.GetAllPlacementGroup:output_type -> ray.rpc.GetAllPlacementGroupReply
	63,  // 145: ray.rpc.PlacementGroupInfoGcsService.WaitPlacementGroupUntilReady:output_type -> ray.rpc.WaitPlacementGroupUntilReadyReply
	71,  // 146: ray.rpc.InternalKVGcsService.InternalKVGet:output_type -> ray.rpc.InternalKVGetReply
	73,  // 147: ray.rpc.InternalKVGcsService.InternalKVPut:output_type -> ray.rpc.InternalKVPutReply
	75,  // 148: ray.rpc.InternalKVGcsService.InternalKVDel:output_type -> ray.rpc.InternalKVDelReply
	77,  // 149: ray.rpc.InternalKVGcsService.InternalKVExists:output_type -> ray.rpc.InternalKVExistsReply
	79,  // 150: ray.rpc.InternalKVGcsService.InternalKVKeys:output_type -> ray.rpc.InternalKVKeysReply
	81,  // 151: ray.rpc.InternalPubSubGcsService.GcsPublish:output_type -> ray.rpc.GcsPublishReply
	83,  // 152: ray.rpc.InternalPubSubGcsService.GcsSubscriberPoll:output_type -> ray.rpc.GcsSubscriberPollReply
	85,  // 153: ray.rpc.InternalPubSubGcsService.GcsSubscriberCommandBatch:output_type -> ray.rpc.GcsSubscriberCommandBatchReply
	32,  // 154: ray.rpc.NodeResourceInfoGcsService.GetResources:output_type -> ray.rpc.GetResourcesReply
	35,  // 155: ray.rpc.NodeResourceInfoGcsService.GetAllAvailableResources:output_type -> ray.rpc.GetAllAvailableResourcesReply
	37,  // 156: ray.rpc.NodeResourceInfoGcsService.ReportResourceUsage:output_type -> ray.rpc.ReportResourceUsageReply
	87,  // 157: ray.rpc.NodeResourceInfoGcsService.GetAllResourceUsage:output_type -> ray.rpc.GetAllResourceUsageReply
	22,  // 158: ray.rpc.NodeInfoGcsService.RegisterNode:output_type -> ray.rpc.RegisterNodeReply
	69,  // 159: ray.rpc.NodeInfoGcsService.DrainNode:output_type -> ray.rpc.DrainNodeReply
	24,  // 160: ray.rpc.NodeInfoGcsService.GetAllNodeInfo:output_type -> ray.rpc.GetAllNodeInfoReply
	30,  // 161: ray.rpc.NodeInfoGcsService.GetInternalConfig:output_type -> ray.rpc.GetInternalConfigReply
	120, // [120:162] is the sub-list for method output_type
	78,  // [78:120] is the sub-list for method input_type
	78,  // [78:78] is the sub-list for extension type_name
	78,  // [78:78] is the sub-list for extension extendee
	0,   // [0:78] is the sub-list for field type_name
}

func init() { file_src_ray_protobuf_gcs_service_proto_init() }
func file_src_ray_protobuf_gcs_service_proto_init() {
	if File_src_ray_protobuf_gcs_service_proto != nil {
		return
	}
	file_src_ray_protobuf_common_proto_init()
	file_src_ray_protobuf_gcs_proto_init()
	file_src_ray_protobuf_pubsub_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_src_ray_protobuf_gcs_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddJobReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkJobFinishedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkJobFinishedReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllJobInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllJobInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportJobErrorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportJobErrorReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNextJobIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNextJobIDReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActorInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActorInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNamedActorInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNamedActorInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNamedActorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNamedActorsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllActorInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllActorInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KillActorViaGcsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KillActorViaGcsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterNodeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllNodeInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllNodeInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportHeartbeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportHeartbeatReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAliveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAliveReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInternalConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInternalConfigReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourcesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResourcesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllAvailableResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllAvailableResourcesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportResourceUsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportResourceUsageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProfileDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProfileDataReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllProfileInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllProfileInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportWorkerFailureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportWorkerFailureReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkerInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkerInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllWorkerInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllWorkerInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddWorkerInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddWorkerInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateActorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateActorReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterActorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterActorReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlacementGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlacementGroupReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePlacementGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePlacementGroupReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlacementGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlacementGroupReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllPlacementGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllPlacementGroupReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitPlacementGroupUntilReadyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitPlacementGroupUntilReadyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNamedPlacementGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNamedPlacementGroupReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrainNodeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrainNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrainNodeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrainNodeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalKVGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalKVGetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalKVPutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalKVPutReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalKVDelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalKVDelReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalKVExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalKVExistsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalKVKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalKVKeysReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GcsPublishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GcsPublishReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GcsSubscriberPollRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GcsSubscriberPollReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GcsSubscriberCommandBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GcsSubscriberCommandBatchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllResourceUsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllResourceUsageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_service_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GcsStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_ray_protobuf_gcs_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   89,
			NumExtensions: 0,
			NumServices:   10,
		},
		GoTypes:           file_src_ray_protobuf_gcs_service_proto_goTypes,
		DependencyIndexes: file_src_ray_protobuf_gcs_service_proto_depIdxs,
		EnumInfos:         file_src_ray_protobuf_gcs_service_proto_enumTypes,
		MessageInfos:      file_src_ray_protobuf_gcs_service_proto_msgTypes,
	}.Build()
	File_src_ray_protobuf_gcs_service_proto = out.File
	file_src_ray_protobuf_gcs_service_proto_rawDesc = nil
	file_src_ray_protobuf_gcs_service_proto_goTypes = nil
	file_src_ray_protobuf_gcs_service_proto_depIdxs = nil
}
