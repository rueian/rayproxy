// Copyright 2017 The Ray Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: src/ray/protobuf/runtime_env_common.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// / The pip type runtime env.
type PipRuntimeEnv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PipRuntimeEnv:
	//
	//	*PipRuntimeEnv_Config_
	//	*PipRuntimeEnv_VirtualEnvName
	PipRuntimeEnv isPipRuntimeEnv_PipRuntimeEnv `protobuf_oneof:"pip_runtime_env"`
}

func (x *PipRuntimeEnv) Reset() {
	*x = PipRuntimeEnv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_runtime_env_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipRuntimeEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipRuntimeEnv) ProtoMessage() {}

func (x *PipRuntimeEnv) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_runtime_env_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipRuntimeEnv.ProtoReflect.Descriptor instead.
func (*PipRuntimeEnv) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_runtime_env_common_proto_rawDescGZIP(), []int{0}
}

func (m *PipRuntimeEnv) GetPipRuntimeEnv() isPipRuntimeEnv_PipRuntimeEnv {
	if m != nil {
		return m.PipRuntimeEnv
	}
	return nil
}

func (x *PipRuntimeEnv) GetConfig() *PipRuntimeEnv_Config {
	if x, ok := x.GetPipRuntimeEnv().(*PipRuntimeEnv_Config_); ok {
		return x.Config
	}
	return nil
}

func (x *PipRuntimeEnv) GetVirtualEnvName() string {
	if x, ok := x.GetPipRuntimeEnv().(*PipRuntimeEnv_VirtualEnvName); ok {
		return x.VirtualEnvName
	}
	return ""
}

type isPipRuntimeEnv_PipRuntimeEnv interface {
	isPipRuntimeEnv_PipRuntimeEnv()
}

type PipRuntimeEnv_Config_ struct {
	// / The pip packages config.
	Config *PipRuntimeEnv_Config `protobuf:"bytes,1,opt,name=config,proto3,oneof"`
}

type PipRuntimeEnv_VirtualEnvName struct {
	// / The name of a local virtual env.
	VirtualEnvName string `protobuf:"bytes,2,opt,name=virtual_env_name,json=virtualEnvName,proto3,oneof"`
}

func (*PipRuntimeEnv_Config_) isPipRuntimeEnv_PipRuntimeEnv() {}

func (*PipRuntimeEnv_VirtualEnvName) isPipRuntimeEnv_PipRuntimeEnv() {}

// / The conda type runtime env.
type CondaRuntimeEnv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CondaRuntimeEnv:
	//
	//	*CondaRuntimeEnv_Config
	//	*CondaRuntimeEnv_CondaEnvName
	CondaRuntimeEnv isCondaRuntimeEnv_CondaRuntimeEnv `protobuf_oneof:"conda_runtime_env"`
}

func (x *CondaRuntimeEnv) Reset() {
	*x = CondaRuntimeEnv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_runtime_env_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CondaRuntimeEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CondaRuntimeEnv) ProtoMessage() {}

func (x *CondaRuntimeEnv) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_runtime_env_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CondaRuntimeEnv.ProtoReflect.Descriptor instead.
func (*CondaRuntimeEnv) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_runtime_env_common_proto_rawDescGZIP(), []int{1}
}

func (m *CondaRuntimeEnv) GetCondaRuntimeEnv() isCondaRuntimeEnv_CondaRuntimeEnv {
	if m != nil {
		return m.CondaRuntimeEnv
	}
	return nil
}

func (x *CondaRuntimeEnv) GetConfig() string {
	if x, ok := x.GetCondaRuntimeEnv().(*CondaRuntimeEnv_Config); ok {
		return x.Config
	}
	return ""
}

func (x *CondaRuntimeEnv) GetCondaEnvName() string {
	if x, ok := x.GetCondaRuntimeEnv().(*CondaRuntimeEnv_CondaEnvName); ok {
		return x.CondaEnvName
	}
	return ""
}

type isCondaRuntimeEnv_CondaRuntimeEnv interface {
	isCondaRuntimeEnv_CondaRuntimeEnv()
}

type CondaRuntimeEnv_Config struct {
	// / The conda YAML config.
	Config string `protobuf:"bytes,1,opt,name=config,proto3,oneof"`
}

type CondaRuntimeEnv_CondaEnvName struct {
	// / The name of a local conda env.
	CondaEnvName string `protobuf:"bytes,2,opt,name=conda_env_name,json=condaEnvName,proto3,oneof"`
}

func (*CondaRuntimeEnv_Config) isCondaRuntimeEnv_CondaRuntimeEnv() {}

func (*CondaRuntimeEnv_CondaEnvName) isCondaRuntimeEnv_CondaRuntimeEnv() {}

// / The container type runtime env.
type ContainerRuntimeEnv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / The container image.
	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// / The default worker path in the container.
	WorkerPath string `protobuf:"bytes,2,opt,name=worker_path,json=workerPath,proto3" json:"worker_path,omitempty"`
	// / A list of docker run options. Refer to
	// / https://docs.docker.com/engine/reference/run/.
	RunOptions []string `protobuf:"bytes,3,rep,name=run_options,json=runOptions,proto3" json:"run_options,omitempty"`
}

func (x *ContainerRuntimeEnv) Reset() {
	*x = ContainerRuntimeEnv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_runtime_env_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerRuntimeEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerRuntimeEnv) ProtoMessage() {}

func (x *ContainerRuntimeEnv) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_runtime_env_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerRuntimeEnv.ProtoReflect.Descriptor instead.
func (*ContainerRuntimeEnv) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_runtime_env_common_proto_rawDescGZIP(), []int{2}
}

func (x *ContainerRuntimeEnv) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ContainerRuntimeEnv) GetWorkerPath() string {
	if x != nil {
		return x.WorkerPath
	}
	return ""
}

func (x *ContainerRuntimeEnv) GetRunOptions() []string {
	if x != nil {
		return x.RunOptions
	}
	return nil
}

// / A set of plugin runtime envs.
type PluginRuntimeEnv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plugins []*PluginRuntimeEnv_Plugin `protobuf:"bytes,1,rep,name=plugins,proto3" json:"plugins,omitempty"`
}

func (x *PluginRuntimeEnv) Reset() {
	*x = PluginRuntimeEnv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_runtime_env_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginRuntimeEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginRuntimeEnv) ProtoMessage() {}

func (x *PluginRuntimeEnv) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_runtime_env_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginRuntimeEnv.ProtoReflect.Descriptor instead.
func (*PluginRuntimeEnv) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_runtime_env_common_proto_rawDescGZIP(), []int{3}
}

func (x *PluginRuntimeEnv) GetPlugins() []*PluginRuntimeEnv_Plugin {
	if x != nil {
		return x.Plugins
	}
	return nil
}

type PythonRuntimeEnv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / List of URIs that contain the dependent python modules.
	// / Valid URIs include:
	// / - A local directory: it will be added to to the PYTHONPATH;
	// /   - Example: `file:///path/to/my_module`.
	// / - A zip file in an external storage: it will be unpacked and added to the
	// / PYTHONPATH.
	// /   - Example: `http://example.com/my_module.zip`.
	PyModules []string `protobuf:"bytes,1,rep,name=py_modules,json=pyModules,proto3" json:"py_modules,omitempty"`
	// / The concrete Runtime Env for Python workers. Use only one of them, or none at all.
	//
	// Types that are assignable to PythonRuntimeEnv:
	//
	//	*PythonRuntimeEnv_PipRuntimeEnv
	//	*PythonRuntimeEnv_CondaRuntimeEnv
	//	*PythonRuntimeEnv_ContainerRuntimeEnv
	//	*PythonRuntimeEnv_PluginRuntimeEnv
	PythonRuntimeEnv isPythonRuntimeEnv_PythonRuntimeEnv `protobuf_oneof:"python_runtime_env"`
}

func (x *PythonRuntimeEnv) Reset() {
	*x = PythonRuntimeEnv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_runtime_env_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PythonRuntimeEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PythonRuntimeEnv) ProtoMessage() {}

func (x *PythonRuntimeEnv) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_runtime_env_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PythonRuntimeEnv.ProtoReflect.Descriptor instead.
func (*PythonRuntimeEnv) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_runtime_env_common_proto_rawDescGZIP(), []int{4}
}

func (x *PythonRuntimeEnv) GetPyModules() []string {
	if x != nil {
		return x.PyModules
	}
	return nil
}

func (m *PythonRuntimeEnv) GetPythonRuntimeEnv() isPythonRuntimeEnv_PythonRuntimeEnv {
	if m != nil {
		return m.PythonRuntimeEnv
	}
	return nil
}

func (x *PythonRuntimeEnv) GetPipRuntimeEnv() *PipRuntimeEnv {
	if x, ok := x.GetPythonRuntimeEnv().(*PythonRuntimeEnv_PipRuntimeEnv); ok {
		return x.PipRuntimeEnv
	}
	return nil
}

func (x *PythonRuntimeEnv) GetCondaRuntimeEnv() *CondaRuntimeEnv {
	if x, ok := x.GetPythonRuntimeEnv().(*PythonRuntimeEnv_CondaRuntimeEnv); ok {
		return x.CondaRuntimeEnv
	}
	return nil
}

func (x *PythonRuntimeEnv) GetContainerRuntimeEnv() *ContainerRuntimeEnv {
	if x, ok := x.GetPythonRuntimeEnv().(*PythonRuntimeEnv_ContainerRuntimeEnv); ok {
		return x.ContainerRuntimeEnv
	}
	return nil
}

func (x *PythonRuntimeEnv) GetPluginRuntimeEnv() *PluginRuntimeEnv {
	if x, ok := x.GetPythonRuntimeEnv().(*PythonRuntimeEnv_PluginRuntimeEnv); ok {
		return x.PluginRuntimeEnv
	}
	return nil
}

type isPythonRuntimeEnv_PythonRuntimeEnv interface {
	isPythonRuntimeEnv_PythonRuntimeEnv()
}

type PythonRuntimeEnv_PipRuntimeEnv struct {
	// / Only set when PipRuntimeEnv is used.
	PipRuntimeEnv *PipRuntimeEnv `protobuf:"bytes,2,opt,name=pip_runtime_env,json=pipRuntimeEnv,proto3,oneof"`
}

type PythonRuntimeEnv_CondaRuntimeEnv struct {
	// / Only set when CondaRuntimeEnv is used.
	CondaRuntimeEnv *CondaRuntimeEnv `protobuf:"bytes,3,opt,name=conda_runtime_env,json=condaRuntimeEnv,proto3,oneof"`
}

type PythonRuntimeEnv_ContainerRuntimeEnv struct {
	// / Only set when ContainerRuntimeEnv is used.
	ContainerRuntimeEnv *ContainerRuntimeEnv `protobuf:"bytes,4,opt,name=container_runtime_env,json=containerRuntimeEnv,proto3,oneof"`
}

type PythonRuntimeEnv_PluginRuntimeEnv struct {
	// / Only set when PluginRuntimeEnv is used.
	PluginRuntimeEnv *PluginRuntimeEnv `protobuf:"bytes,5,opt,name=plugin_runtime_env,json=pluginRuntimeEnv,proto3,oneof"`
}

func (*PythonRuntimeEnv_PipRuntimeEnv) isPythonRuntimeEnv_PythonRuntimeEnv() {}

func (*PythonRuntimeEnv_CondaRuntimeEnv) isPythonRuntimeEnv_PythonRuntimeEnv() {}

func (*PythonRuntimeEnv_ContainerRuntimeEnv) isPythonRuntimeEnv_PythonRuntimeEnv() {}

func (*PythonRuntimeEnv_PluginRuntimeEnv) isPythonRuntimeEnv_PythonRuntimeEnv() {}

// / The maven type runtime env.
type MavenRuntimeEnv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MavenRuntimeEnv) Reset() {
	*x = MavenRuntimeEnv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_runtime_env_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MavenRuntimeEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MavenRuntimeEnv) ProtoMessage() {}

func (x *MavenRuntimeEnv) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_runtime_env_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MavenRuntimeEnv.ProtoReflect.Descriptor instead.
func (*MavenRuntimeEnv) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_runtime_env_common_proto_rawDescGZIP(), []int{5}
}

type JavaRuntimeEnv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / List of URIs that contain the dependent jars.
	// / Valid URIs include:
	// / - A local file or directory: it will be added to to the CLASSPATH;
	// /   - Example: `file:///path/to/my_example.jar`.
	// /   - Example: `file:///path/to/my_jars`.
	// / - A jar file in an external storage: it will be added to the CLASSPATH;
	// /   - Example: `http://example.com/my_example.jar`.
	// / - A zip file in an external storage: it will be unpacked and added to the CLASSPATH.
	// /   - Example: `http://example.com/my_jars.zip`.
	DependentJars []string `protobuf:"bytes,1,rep,name=dependent_jars,json=dependentJars,proto3" json:"dependent_jars,omitempty"`
	// / The JVM options, which will be appended to java command line.
	JvmOptions []string `protobuf:"bytes,2,rep,name=jvm_options,json=jvmOptions,proto3" json:"jvm_options,omitempty"`
	// / If empty, the default "java" command will be used.
	// / If set, `${java_home}/bin/java` will be used.
	JavaHome string `protobuf:"bytes,3,opt,name=java_home,json=javaHome,proto3" json:"java_home,omitempty"`
	// / The concrete Runtime Env for Java workers. Use only one of them, or none at all.
	//
	// Types that are assignable to JavaRuntimeEnv:
	//
	//	*JavaRuntimeEnv_MavenRuntimeEnv
	//	*JavaRuntimeEnv_ContainerRuntimeEnv
	//	*JavaRuntimeEnv_PluginRuntimeEnv
	JavaRuntimeEnv isJavaRuntimeEnv_JavaRuntimeEnv `protobuf_oneof:"java_runtime_env"`
}

func (x *JavaRuntimeEnv) Reset() {
	*x = JavaRuntimeEnv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_runtime_env_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JavaRuntimeEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JavaRuntimeEnv) ProtoMessage() {}

func (x *JavaRuntimeEnv) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_runtime_env_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JavaRuntimeEnv.ProtoReflect.Descriptor instead.
func (*JavaRuntimeEnv) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_runtime_env_common_proto_rawDescGZIP(), []int{6}
}

func (x *JavaRuntimeEnv) GetDependentJars() []string {
	if x != nil {
		return x.DependentJars
	}
	return nil
}

func (x *JavaRuntimeEnv) GetJvmOptions() []string {
	if x != nil {
		return x.JvmOptions
	}
	return nil
}

func (x *JavaRuntimeEnv) GetJavaHome() string {
	if x != nil {
		return x.JavaHome
	}
	return ""
}

func (m *JavaRuntimeEnv) GetJavaRuntimeEnv() isJavaRuntimeEnv_JavaRuntimeEnv {
	if m != nil {
		return m.JavaRuntimeEnv
	}
	return nil
}

func (x *JavaRuntimeEnv) GetMavenRuntimeEnv() *MavenRuntimeEnv {
	if x, ok := x.GetJavaRuntimeEnv().(*JavaRuntimeEnv_MavenRuntimeEnv); ok {
		return x.MavenRuntimeEnv
	}
	return nil
}

func (x *JavaRuntimeEnv) GetContainerRuntimeEnv() *ContainerRuntimeEnv {
	if x, ok := x.GetJavaRuntimeEnv().(*JavaRuntimeEnv_ContainerRuntimeEnv); ok {
		return x.ContainerRuntimeEnv
	}
	return nil
}

func (x *JavaRuntimeEnv) GetPluginRuntimeEnv() *PluginRuntimeEnv {
	if x, ok := x.GetJavaRuntimeEnv().(*JavaRuntimeEnv_PluginRuntimeEnv); ok {
		return x.PluginRuntimeEnv
	}
	return nil
}

type isJavaRuntimeEnv_JavaRuntimeEnv interface {
	isJavaRuntimeEnv_JavaRuntimeEnv()
}

type JavaRuntimeEnv_MavenRuntimeEnv struct {
	// / Only set when MavenRuntimeEnv is used.
	MavenRuntimeEnv *MavenRuntimeEnv `protobuf:"bytes,4,opt,name=maven_runtime_env,json=mavenRuntimeEnv,proto3,oneof"`
}

type JavaRuntimeEnv_ContainerRuntimeEnv struct {
	// / Only set when ContainerRuntimeEnv is used.
	ContainerRuntimeEnv *ContainerRuntimeEnv `protobuf:"bytes,5,opt,name=container_runtime_env,json=containerRuntimeEnv,proto3,oneof"`
}

type JavaRuntimeEnv_PluginRuntimeEnv struct {
	// / Only set when PluginRuntimeEnv is used.
	PluginRuntimeEnv *PluginRuntimeEnv `protobuf:"bytes,6,opt,name=plugin_runtime_env,json=pluginRuntimeEnv,proto3,oneof"`
}

func (*JavaRuntimeEnv_MavenRuntimeEnv) isJavaRuntimeEnv_JavaRuntimeEnv() {}

func (*JavaRuntimeEnv_ContainerRuntimeEnv) isJavaRuntimeEnv_JavaRuntimeEnv() {}

func (*JavaRuntimeEnv_PluginRuntimeEnv) isJavaRuntimeEnv_JavaRuntimeEnv() {}

type CppRuntimeEnv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / List of dynamic libraries, each of which can specify either
	// / local path or remote URI.
	// / A local path must be a directory path. And A remote URI
	// / must be a link directly to a zip file. All the libraries will
	// / be inserted into the LD_LIBRARY_PATH of python workers.
	// / List of URIs that contain the dependent libraries.
	// / Valid URIs include:
	// / - A local file or directory: it will be added to to the LD_LIBRARY_PATH;
	// /   - Example: `file:///path/to/my_example.so`.
	// /   - Example: `file:///path/to/my_libraries`.
	// / - A zip file in an external storage: it will be unpacked and added to the
	// / LD_LIBRARY_PATH.
	// /   - Example: `http://example.com/my_libraries.zip`.
	DependentLibraries []string `protobuf:"bytes,1,rep,name=dependent_libraries,json=dependentLibraries,proto3" json:"dependent_libraries,omitempty"`
	// / The concrete Runtime Env for C++ workers. Use only one of them, or none at all.
	//
	// Types that are assignable to CppRuntimeEnv:
	//
	//	*CppRuntimeEnv_ContainerRuntimeEnv
	//	*CppRuntimeEnv_PluginRuntimeEnv
	CppRuntimeEnv isCppRuntimeEnv_CppRuntimeEnv `protobuf_oneof:"cpp_runtime_env"`
}

func (x *CppRuntimeEnv) Reset() {
	*x = CppRuntimeEnv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_runtime_env_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppRuntimeEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppRuntimeEnv) ProtoMessage() {}

func (x *CppRuntimeEnv) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_runtime_env_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppRuntimeEnv.ProtoReflect.Descriptor instead.
func (*CppRuntimeEnv) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_runtime_env_common_proto_rawDescGZIP(), []int{7}
}

func (x *CppRuntimeEnv) GetDependentLibraries() []string {
	if x != nil {
		return x.DependentLibraries
	}
	return nil
}

func (m *CppRuntimeEnv) GetCppRuntimeEnv() isCppRuntimeEnv_CppRuntimeEnv {
	if m != nil {
		return m.CppRuntimeEnv
	}
	return nil
}

func (x *CppRuntimeEnv) GetContainerRuntimeEnv() *ContainerRuntimeEnv {
	if x, ok := x.GetCppRuntimeEnv().(*CppRuntimeEnv_ContainerRuntimeEnv); ok {
		return x.ContainerRuntimeEnv
	}
	return nil
}

func (x *CppRuntimeEnv) GetPluginRuntimeEnv() *PluginRuntimeEnv {
	if x, ok := x.GetCppRuntimeEnv().(*CppRuntimeEnv_PluginRuntimeEnv); ok {
		return x.PluginRuntimeEnv
	}
	return nil
}

type isCppRuntimeEnv_CppRuntimeEnv interface {
	isCppRuntimeEnv_CppRuntimeEnv()
}

type CppRuntimeEnv_ContainerRuntimeEnv struct {
	// / Only set when ContainerRuntimeEnv is used.
	ContainerRuntimeEnv *ContainerRuntimeEnv `protobuf:"bytes,2,opt,name=container_runtime_env,json=containerRuntimeEnv,proto3,oneof"`
}

type CppRuntimeEnv_PluginRuntimeEnv struct {
	// / Only set when PluginRuntimeEnv is used.
	PluginRuntimeEnv *PluginRuntimeEnv `protobuf:"bytes,3,opt,name=plugin_runtime_env,json=pluginRuntimeEnv,proto3,oneof"`
}

func (*CppRuntimeEnv_ContainerRuntimeEnv) isCppRuntimeEnv_CppRuntimeEnv() {}

func (*CppRuntimeEnv_PluginRuntimeEnv) isCppRuntimeEnv_CppRuntimeEnv() {}

type RuntimeEnvUris struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / working dir uri
	WorkingDirUri string `protobuf:"bytes,1,opt,name=working_dir_uri,json=workingDirUri,proto3" json:"working_dir_uri,omitempty"`
	// / python modules uris
	PyModulesUris []string `protobuf:"bytes,2,rep,name=py_modules_uris,json=pyModulesUris,proto3" json:"py_modules_uris,omitempty"`
	// / conda uri
	CondaUri string `protobuf:"bytes,3,opt,name=conda_uri,json=condaUri,proto3" json:"conda_uri,omitempty"`
	// / pip uri
	PipUri string `protobuf:"bytes,4,opt,name=pip_uri,json=pipUri,proto3" json:"pip_uri,omitempty"`
	// / plugin uris
	PluginUris []string `protobuf:"bytes,5,rep,name=plugin_uris,json=pluginUris,proto3" json:"plugin_uris,omitempty"`
}

func (x *RuntimeEnvUris) Reset() {
	*x = RuntimeEnvUris{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_runtime_env_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeEnvUris) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeEnvUris) ProtoMessage() {}

func (x *RuntimeEnvUris) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_runtime_env_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeEnvUris.ProtoReflect.Descriptor instead.
func (*RuntimeEnvUris) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_runtime_env_common_proto_rawDescGZIP(), []int{8}
}

func (x *RuntimeEnvUris) GetWorkingDirUri() string {
	if x != nil {
		return x.WorkingDirUri
	}
	return ""
}

func (x *RuntimeEnvUris) GetPyModulesUris() []string {
	if x != nil {
		return x.PyModulesUris
	}
	return nil
}

func (x *RuntimeEnvUris) GetCondaUri() string {
	if x != nil {
		return x.CondaUri
	}
	return ""
}

func (x *RuntimeEnvUris) GetPipUri() string {
	if x != nil {
		return x.PipUri
	}
	return ""
}

func (x *RuntimeEnvUris) GetPluginUris() []string {
	if x != nil {
		return x.PluginUris
	}
	return nil
}

// / The runtime environment describes all the runtime packages needed to
// / run some task or actor.
type RuntimeEnv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Specifies the working directory of the worker.
	WorkingDir string `protobuf:"bytes,1,opt,name=working_dir,json=workingDir,proto3" json:"working_dir,omitempty"`
	// / Environment variables to set.
	EnvVars map[string]string `protobuf:"bytes,2,rep,name=env_vars,json=envVars,proto3" json:"env_vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// / The extension fields.
	Extensions map[string]string `protobuf:"bytes,3,rep,name=extensions,proto3" json:"extensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// / python runtime env
	PythonRuntimeEnv *PythonRuntimeEnv `protobuf:"bytes,4,opt,name=python_runtime_env,json=pythonRuntimeEnv,proto3,oneof" json:"python_runtime_env,omitempty"`
	// / java runtime env
	JavaRuntimeEnv *JavaRuntimeEnv `protobuf:"bytes,5,opt,name=java_runtime_env,json=javaRuntimeEnv,proto3,oneof" json:"java_runtime_env,omitempty"`
	// / cpp runtime env
	CppRuntimeEnv *CppRuntimeEnv `protobuf:"bytes,6,opt,name=cpp_runtime_env,json=cppRuntimeEnv,proto3,oneof" json:"cpp_runtime_env,omitempty"`
	// / TODO(SongGuyang): Remove this field. Issue
	// / https://github.com/ray-project/ray/issues/21695.
	// / Runtime env uris of different types.
	Uris *RuntimeEnvUris `protobuf:"bytes,7,opt,name=uris,proto3" json:"uris,omitempty"`
}

func (x *RuntimeEnv) Reset() {
	*x = RuntimeEnv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_runtime_env_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeEnv) ProtoMessage() {}

func (x *RuntimeEnv) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_runtime_env_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeEnv.ProtoReflect.Descriptor instead.
func (*RuntimeEnv) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_runtime_env_common_proto_rawDescGZIP(), []int{9}
}

func (x *RuntimeEnv) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *RuntimeEnv) GetEnvVars() map[string]string {
	if x != nil {
		return x.EnvVars
	}
	return nil
}

func (x *RuntimeEnv) GetExtensions() map[string]string {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *RuntimeEnv) GetPythonRuntimeEnv() *PythonRuntimeEnv {
	if x != nil {
		return x.PythonRuntimeEnv
	}
	return nil
}

func (x *RuntimeEnv) GetJavaRuntimeEnv() *JavaRuntimeEnv {
	if x != nil {
		return x.JavaRuntimeEnv
	}
	return nil
}

func (x *RuntimeEnv) GetCppRuntimeEnv() *CppRuntimeEnv {
	if x != nil {
		return x.CppRuntimeEnv
	}
	return nil
}

func (x *RuntimeEnv) GetUris() *RuntimeEnvUris {
	if x != nil {
		return x.Uris
	}
	return nil
}

// / The runtime env config, include some fields that do not
// / participate in the calculation of the runtime_env hash.
type RuntimeEnvConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / The timeout of runtime env creation.
	SetupTimeoutSeconds int32 `protobuf:"varint,1,opt,name=setup_timeout_seconds,json=setupTimeoutSeconds,proto3" json:"setup_timeout_seconds,omitempty"`
}

func (x *RuntimeEnvConfig) Reset() {
	*x = RuntimeEnvConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_runtime_env_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeEnvConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeEnvConfig) ProtoMessage() {}

func (x *RuntimeEnvConfig) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_runtime_env_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeEnvConfig.ProtoReflect.Descriptor instead.
func (*RuntimeEnvConfig) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_runtime_env_common_proto_rawDescGZIP(), []int{10}
}

func (x *RuntimeEnvConfig) GetSetupTimeoutSeconds() int32 {
	if x != nil {
		return x.SetupTimeoutSeconds
	}
	return 0
}

// / The runtime env information which is transfered between ray core processes.
type RuntimeEnvInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / The serialized runtime env passed from the user.
	SerializedRuntimeEnv string `protobuf:"bytes,1,opt,name=serialized_runtime_env,json=serializedRuntimeEnv,proto3" json:"serialized_runtime_env,omitempty"`
	// / URIs used in this runtime env. These will be used for reference counting.
	Uris []string `protobuf:"bytes,2,rep,name=uris,proto3" json:"uris,omitempty"`
	// / Indicates whether to install runtime env eagerly before the workers are leased.
	RuntimeEnvEagerInstall bool `protobuf:"varint,3,opt,name=runtime_env_eager_install,json=runtimeEnvEagerInstall,proto3" json:"runtime_env_eager_install,omitempty"`
	// / The serialized runtime env config passed from the user.
	RuntimeEnvConfig *RuntimeEnvConfig `protobuf:"bytes,4,opt,name=runtime_env_config,json=runtimeEnvConfig,proto3" json:"runtime_env_config,omitempty"`
}

func (x *RuntimeEnvInfo) Reset() {
	*x = RuntimeEnvInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_runtime_env_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeEnvInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeEnvInfo) ProtoMessage() {}

func (x *RuntimeEnvInfo) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_runtime_env_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeEnvInfo.ProtoReflect.Descriptor instead.
func (*RuntimeEnvInfo) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_runtime_env_common_proto_rawDescGZIP(), []int{11}
}

func (x *RuntimeEnvInfo) GetSerializedRuntimeEnv() string {
	if x != nil {
		return x.SerializedRuntimeEnv
	}
	return ""
}

func (x *RuntimeEnvInfo) GetUris() []string {
	if x != nil {
		return x.Uris
	}
	return nil
}

func (x *RuntimeEnvInfo) GetRuntimeEnvEagerInstall() bool {
	if x != nil {
		return x.RuntimeEnvEagerInstall
	}
	return false
}

func (x *RuntimeEnvInfo) GetRuntimeEnvConfig() *RuntimeEnvConfig {
	if x != nil {
		return x.RuntimeEnvConfig
	}
	return nil
}

type PipRuntimeEnv_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / A list of pip packages, such as ["redis >= 3.5.0", "numpy"].
	Packages []string `protobuf:"bytes,1,rep,name=packages,proto3" json:"packages,omitempty"`
	// / Whether enable pip check after runtime env finish pip install packages
	PipCheck bool `protobuf:"varint,2,opt,name=pip_check,json=pipCheck,proto3" json:"pip_check,omitempty"`
	// / Pip version in virtualenv
	PipVersion string `protobuf:"bytes,3,opt,name=pip_version,json=pipVersion,proto3" json:"pip_version,omitempty"`
}

func (x *PipRuntimeEnv_Config) Reset() {
	*x = PipRuntimeEnv_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_runtime_env_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipRuntimeEnv_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipRuntimeEnv_Config) ProtoMessage() {}

func (x *PipRuntimeEnv_Config) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_runtime_env_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipRuntimeEnv_Config.ProtoReflect.Descriptor instead.
func (*PipRuntimeEnv_Config) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_runtime_env_common_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PipRuntimeEnv_Config) GetPackages() []string {
	if x != nil {
		return x.Packages
	}
	return nil
}

func (x *PipRuntimeEnv_Config) GetPipCheck() bool {
	if x != nil {
		return x.PipCheck
	}
	return false
}

func (x *PipRuntimeEnv_Config) GetPipVersion() string {
	if x != nil {
		return x.PipVersion
	}
	return ""
}

type PluginRuntimeEnv_Plugin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / The python class which implements the runtime env plugin.
	ClassPath string `protobuf:"bytes,1,opt,name=class_path,json=classPath,proto3" json:"class_path,omitempty"`
	// / The serialized config.
	Config string `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *PluginRuntimeEnv_Plugin) Reset() {
	*x = PluginRuntimeEnv_Plugin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_runtime_env_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginRuntimeEnv_Plugin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginRuntimeEnv_Plugin) ProtoMessage() {}

func (x *PluginRuntimeEnv_Plugin) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_runtime_env_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginRuntimeEnv_Plugin.ProtoReflect.Descriptor instead.
func (*PluginRuntimeEnv_Plugin) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_runtime_env_common_proto_rawDescGZIP(), []int{3, 0}
}

func (x *PluginRuntimeEnv_Plugin) GetClassPath() string {
	if x != nil {
		return x.ClassPath
	}
	return ""
}

func (x *PluginRuntimeEnv_Plugin) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

var File_src_ray_protobuf_runtime_env_common_proto protoreflect.FileDescriptor

var file_src_ray_protobuf_runtime_env_common_proto_rawDesc = []byte{
	0x0a, 0x29, 0x73, 0x72, 0x63, 0x2f, 0x72, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x22, 0xeb, 0x01, 0x0a, 0x0d, 0x50, 0x69, 0x70, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x69, 0x70, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2a, 0x0a, 0x10, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x45, 0x6e, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x62, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x69, 0x70, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x69, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x11, 0x0a, 0x0f, 0x70, 0x69, 0x70, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65,
	0x6e, 0x76, 0x22, 0x68, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x64, 0x61, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x45, 0x6e, 0x76, 0x12, 0x18, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x45, 0x6e, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x22, 0x6d, 0x0a, 0x13,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x45, 0x6e, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x75,
	0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x75, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x10,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76,
	0x12, 0x3a, 0x0a, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x52, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x1a, 0x3f, 0x0a, 0x06,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xf0, 0x02,
	0x0a, 0x10, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x76, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x40, 0x0a, 0x0f, 0x70, 0x69, 0x70, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x69, 0x70, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x76, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x69, 0x70, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x45, 0x6e, 0x76, 0x12, 0x46, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x5f, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x61, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x12, 0x52, 0x0a, 0x15, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x65, 0x6e, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x48, 0x00, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x12,
	0x49, 0x0a, 0x12, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x48, 0x00, 0x52, 0x10, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x42, 0x14, 0x0a, 0x12, 0x70, 0x79,
	0x74, 0x68, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x76,
	0x22, 0x11, 0x0a, 0x0f, 0x4d, 0x61, 0x76, 0x65, 0x6e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x45, 0x6e, 0x76, 0x22, 0xf0, 0x02, 0x0a, 0x0e, 0x4a, 0x61, 0x76, 0x61, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x74, 0x5f, 0x6a, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x4a, 0x61, 0x72, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x6a, 0x76, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x6a, 0x76, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x6a, 0x61, 0x76, 0x61, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6a, 0x61, 0x76, 0x61, 0x48, 0x6f, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x6d,
	0x61, 0x76, 0x65, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x76,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x61, 0x76, 0x65, 0x6e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76,
	0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x76, 0x65, 0x6e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x45, 0x6e, 0x76, 0x12, 0x52, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76,
	0x48, 0x00, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x12, 0x49, 0x0a, 0x12, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x48, 0x00,
	0x52, 0x10, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x76, 0x42, 0x12, 0x0a, 0x10, 0x6a, 0x61, 0x76, 0x61, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x22, 0xf2, 0x01, 0x0a, 0x0d, 0x43, 0x70, 0x70, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x15, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65,
	0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x48, 0x00, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x12, 0x49, 0x0a,
	0x12, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x65, 0x6e, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x45, 0x6e, 0x76, 0x48, 0x00, 0x52, 0x10, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x42, 0x11, 0x0a, 0x0f, 0x63, 0x70, 0x70, 0x5f,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x22, 0xb7, 0x01, 0x0a, 0x0e,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x55, 0x72, 0x69, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x44, 0x69, 0x72, 0x55, 0x72, 0x69, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x79, 0x5f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x55, 0x72, 0x69, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x55, 0x72, 0x69, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x69, 0x70, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x69,
	0x70, 0x55, 0x72, 0x69, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x75,
	0x72, 0x69, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x55, 0x72, 0x69, 0x73, 0x22, 0xf2, 0x04, 0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x45, 0x6e, 0x76, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x44, 0x69, 0x72, 0x12, 0x3b, 0x0a, 0x08, 0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x2e, 0x45, 0x6e, 0x76,
	0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x56, 0x61,
	0x72, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x12, 0x70, 0x79, 0x74, 0x68, 0x6f,
	0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x79,
	0x74, 0x68, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x48, 0x00,
	0x52, 0x10, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x76, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x10, 0x6a, 0x61, 0x76, 0x61, 0x5f, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4a, 0x61, 0x76, 0x61, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x48, 0x01, 0x52, 0x0e, 0x6a, 0x61, 0x76, 0x61,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a,
	0x0f, 0x63, 0x70, 0x70, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x76,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x70, 0x70, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x48, 0x02,
	0x52, 0x0d, 0x63, 0x70, 0x70, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x04, 0x75, 0x72, 0x69, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x45, 0x6e, 0x76, 0x55, 0x72, 0x69, 0x73, 0x52, 0x04, 0x75, 0x72, 0x69, 0x73, 0x1a,
	0x3a, 0x0a, 0x0c, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70,
	0x79, 0x74, 0x68, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e,
	0x76, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6a, 0x61, 0x76, 0x61, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x70, 0x70, 0x5f, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x22, 0x46, 0x0a, 0x10, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32,
	0x0a, 0x15, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x73,
	0x65, 0x74, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x0e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e,
	0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x72, 0x69, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x69, 0x73, 0x12,
	0x39, 0x0a, 0x19, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x65,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x45, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x47, 0x0a, 0x12, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x10, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x91, 0x01, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x42, 0x15, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x75, 0x65, 0x69, 0x61, 0x6e, 0x2f,
	0x72, 0x61, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x72, 0x61, 0x79,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0xf8, 0x01, 0x01, 0xa2, 0x02, 0x03, 0x52,
	0x52, 0x58, 0xaa, 0x02, 0x07, 0x52, 0x61, 0x79, 0x2e, 0x52, 0x70, 0x63, 0xca, 0x02, 0x07, 0x52,
	0x61, 0x79, 0x5c, 0x52, 0x70, 0x63, 0xe2, 0x02, 0x13, 0x52, 0x61, 0x79, 0x5c, 0x52, 0x70, 0x63,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x08, 0x52,
	0x61, 0x79, 0x3a, 0x3a, 0x52, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_src_ray_protobuf_runtime_env_common_proto_rawDescOnce sync.Once
	file_src_ray_protobuf_runtime_env_common_proto_rawDescData = file_src_ray_protobuf_runtime_env_common_proto_rawDesc
)

func file_src_ray_protobuf_runtime_env_common_proto_rawDescGZIP() []byte {
	file_src_ray_protobuf_runtime_env_common_proto_rawDescOnce.Do(func() {
		file_src_ray_protobuf_runtime_env_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_ray_protobuf_runtime_env_common_proto_rawDescData)
	})
	return file_src_ray_protobuf_runtime_env_common_proto_rawDescData
}

var file_src_ray_protobuf_runtime_env_common_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_src_ray_protobuf_runtime_env_common_proto_goTypes = []interface{}{
	(*PipRuntimeEnv)(nil),           // 0: ray.rpc.PipRuntimeEnv
	(*CondaRuntimeEnv)(nil),         // 1: ray.rpc.CondaRuntimeEnv
	(*ContainerRuntimeEnv)(nil),     // 2: ray.rpc.ContainerRuntimeEnv
	(*PluginRuntimeEnv)(nil),        // 3: ray.rpc.PluginRuntimeEnv
	(*PythonRuntimeEnv)(nil),        // 4: ray.rpc.PythonRuntimeEnv
	(*MavenRuntimeEnv)(nil),         // 5: ray.rpc.MavenRuntimeEnv
	(*JavaRuntimeEnv)(nil),          // 6: ray.rpc.JavaRuntimeEnv
	(*CppRuntimeEnv)(nil),           // 7: ray.rpc.CppRuntimeEnv
	(*RuntimeEnvUris)(nil),          // 8: ray.rpc.RuntimeEnvUris
	(*RuntimeEnv)(nil),              // 9: ray.rpc.RuntimeEnv
	(*RuntimeEnvConfig)(nil),        // 10: ray.rpc.RuntimeEnvConfig
	(*RuntimeEnvInfo)(nil),          // 11: ray.rpc.RuntimeEnvInfo
	(*PipRuntimeEnv_Config)(nil),    // 12: ray.rpc.PipRuntimeEnv.Config
	(*PluginRuntimeEnv_Plugin)(nil), // 13: ray.rpc.PluginRuntimeEnv.Plugin
	nil,                             // 14: ray.rpc.RuntimeEnv.EnvVarsEntry
	nil,                             // 15: ray.rpc.RuntimeEnv.ExtensionsEntry
}
var file_src_ray_protobuf_runtime_env_common_proto_depIdxs = []int32{
	12, // 0: ray.rpc.PipRuntimeEnv.config:type_name -> ray.rpc.PipRuntimeEnv.Config
	13, // 1: ray.rpc.PluginRuntimeEnv.plugins:type_name -> ray.rpc.PluginRuntimeEnv.Plugin
	0,  // 2: ray.rpc.PythonRuntimeEnv.pip_runtime_env:type_name -> ray.rpc.PipRuntimeEnv
	1,  // 3: ray.rpc.PythonRuntimeEnv.conda_runtime_env:type_name -> ray.rpc.CondaRuntimeEnv
	2,  // 4: ray.rpc.PythonRuntimeEnv.container_runtime_env:type_name -> ray.rpc.ContainerRuntimeEnv
	3,  // 5: ray.rpc.PythonRuntimeEnv.plugin_runtime_env:type_name -> ray.rpc.PluginRuntimeEnv
	5,  // 6: ray.rpc.JavaRuntimeEnv.maven_runtime_env:type_name -> ray.rpc.MavenRuntimeEnv
	2,  // 7: ray.rpc.JavaRuntimeEnv.container_runtime_env:type_name -> ray.rpc.ContainerRuntimeEnv
	3,  // 8: ray.rpc.JavaRuntimeEnv.plugin_runtime_env:type_name -> ray.rpc.PluginRuntimeEnv
	2,  // 9: ray.rpc.CppRuntimeEnv.container_runtime_env:type_name -> ray.rpc.ContainerRuntimeEnv
	3,  // 10: ray.rpc.CppRuntimeEnv.plugin_runtime_env:type_name -> ray.rpc.PluginRuntimeEnv
	14, // 11: ray.rpc.RuntimeEnv.env_vars:type_name -> ray.rpc.RuntimeEnv.EnvVarsEntry
	15, // 12: ray.rpc.RuntimeEnv.extensions:type_name -> ray.rpc.RuntimeEnv.ExtensionsEntry
	4,  // 13: ray.rpc.RuntimeEnv.python_runtime_env:type_name -> ray.rpc.PythonRuntimeEnv
	6,  // 14: ray.rpc.RuntimeEnv.java_runtime_env:type_name -> ray.rpc.JavaRuntimeEnv
	7,  // 15: ray.rpc.RuntimeEnv.cpp_runtime_env:type_name -> ray.rpc.CppRuntimeEnv
	8,  // 16: ray.rpc.RuntimeEnv.uris:type_name -> ray.rpc.RuntimeEnvUris
	10, // 17: ray.rpc.RuntimeEnvInfo.runtime_env_config:type_name -> ray.rpc.RuntimeEnvConfig
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_src_ray_protobuf_runtime_env_common_proto_init() }
func file_src_ray_protobuf_runtime_env_common_proto_init() {
	if File_src_ray_protobuf_runtime_env_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_src_ray_protobuf_runtime_env_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipRuntimeEnv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_runtime_env_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CondaRuntimeEnv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_runtime_env_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerRuntimeEnv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_runtime_env_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginRuntimeEnv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_runtime_env_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PythonRuntimeEnv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_runtime_env_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MavenRuntimeEnv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_runtime_env_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JavaRuntimeEnv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_runtime_env_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CppRuntimeEnv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_runtime_env_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeEnvUris); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_runtime_env_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeEnv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_runtime_env_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeEnvConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_runtime_env_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeEnvInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_runtime_env_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipRuntimeEnv_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_runtime_env_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginRuntimeEnv_Plugin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_src_ray_protobuf_runtime_env_common_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*PipRuntimeEnv_Config_)(nil),
		(*PipRuntimeEnv_VirtualEnvName)(nil),
	}
	file_src_ray_protobuf_runtime_env_common_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*CondaRuntimeEnv_Config)(nil),
		(*CondaRuntimeEnv_CondaEnvName)(nil),
	}
	file_src_ray_protobuf_runtime_env_common_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*PythonRuntimeEnv_PipRuntimeEnv)(nil),
		(*PythonRuntimeEnv_CondaRuntimeEnv)(nil),
		(*PythonRuntimeEnv_ContainerRuntimeEnv)(nil),
		(*PythonRuntimeEnv_PluginRuntimeEnv)(nil),
	}
	file_src_ray_protobuf_runtime_env_common_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*JavaRuntimeEnv_MavenRuntimeEnv)(nil),
		(*JavaRuntimeEnv_ContainerRuntimeEnv)(nil),
		(*JavaRuntimeEnv_PluginRuntimeEnv)(nil),
	}
	file_src_ray_protobuf_runtime_env_common_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*CppRuntimeEnv_ContainerRuntimeEnv)(nil),
		(*CppRuntimeEnv_PluginRuntimeEnv)(nil),
	}
	file_src_ray_protobuf_runtime_env_common_proto_msgTypes[9].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_ray_protobuf_runtime_env_common_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_src_ray_protobuf_runtime_env_common_proto_goTypes,
		DependencyIndexes: file_src_ray_protobuf_runtime_env_common_proto_depIdxs,
		MessageInfos:      file_src_ray_protobuf_runtime_env_common_proto_msgTypes,
	}.Build()
	File_src_ray_protobuf_runtime_env_common_proto = out.File
	file_src_ray_protobuf_runtime_env_common_proto_rawDesc = nil
	file_src_ray_protobuf_runtime_env_common_proto_goTypes = nil
	file_src_ray_protobuf_runtime_env_common_proto_depIdxs = nil
}
