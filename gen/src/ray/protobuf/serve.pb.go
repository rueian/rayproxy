// Copyright 2017 The Ray Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: src/ray/protobuf/serve.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Deployment language.
type DeploymentLanguage int32

const (
	DeploymentLanguage_PYTHON DeploymentLanguage = 0
	DeploymentLanguage_JAVA   DeploymentLanguage = 1
)

// Enum value maps for DeploymentLanguage.
var (
	DeploymentLanguage_name = map[int32]string{
		0: "PYTHON",
		1: "JAVA",
	}
	DeploymentLanguage_value = map[string]int32{
		"PYTHON": 0,
		"JAVA":   1,
	}
)

func (x DeploymentLanguage) Enum() *DeploymentLanguage {
	p := new(DeploymentLanguage)
	*p = x
	return p
}

func (x DeploymentLanguage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeploymentLanguage) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_serve_proto_enumTypes[0].Descriptor()
}

func (DeploymentLanguage) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_serve_proto_enumTypes[0]
}

func (x DeploymentLanguage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeploymentLanguage.Descriptor instead.
func (DeploymentLanguage) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_serve_proto_rawDescGZIP(), []int{0}
}

type DeploymentStatus int32

const (
	DeploymentStatus_UPDATING  DeploymentStatus = 0
	DeploymentStatus_HEALTHY   DeploymentStatus = 1
	DeploymentStatus_UNHEALTHY DeploymentStatus = 2
)

// Enum value maps for DeploymentStatus.
var (
	DeploymentStatus_name = map[int32]string{
		0: "UPDATING",
		1: "HEALTHY",
		2: "UNHEALTHY",
	}
	DeploymentStatus_value = map[string]int32{
		"UPDATING":  0,
		"HEALTHY":   1,
		"UNHEALTHY": 2,
	}
)

func (x DeploymentStatus) Enum() *DeploymentStatus {
	p := new(DeploymentStatus)
	*p = x
	return p
}

func (x DeploymentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeploymentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_serve_proto_enumTypes[1].Descriptor()
}

func (DeploymentStatus) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_serve_proto_enumTypes[1]
}

func (x DeploymentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeploymentStatus.Descriptor instead.
func (DeploymentStatus) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_serve_proto_rawDescGZIP(), []int{1}
}

// Configuration options for Serve's replica autoscaler.
type AutoscalingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimal number of replicas, must be a non-negative integer.
	MinReplicas uint32 `protobuf:"varint,1,opt,name=min_replicas,json=minReplicas,proto3" json:"min_replicas,omitempty"`
	// Maximal number of replicas, must be a non-negative integer and greater or equals
	// to min_replicas.
	MaxReplicas uint32 `protobuf:"varint,2,opt,name=max_replicas,json=maxReplicas,proto3" json:"max_replicas,omitempty"`
	// Target number of in flight requests per replicas. This is the primary configuration
	// knob for replica autoscaler. Lower the number, the more rapidly will the replicas
	// being scaled up. Must be a non-negative integer.
	TargetNumOngoingRequestsPerReplica uint32 `protobuf:"varint,3,opt,name=target_num_ongoing_requests_per_replica,json=targetNumOngoingRequestsPerReplica,proto3" json:"target_num_ongoing_requests_per_replica,omitempty"`
	// The frequency of how long does each replica sending metrics to autoscaler.
	MetricsIntervalS float64 `protobuf:"fixed64,4,opt,name=metrics_interval_s,json=metricsIntervalS,proto3" json:"metrics_interval_s,omitempty"`
	// The window (in seconds) for autoscaler to calculate rolling average of metrics on.
	LookBackPeriodS float64 `protobuf:"fixed64,5,opt,name=look_back_period_s,json=lookBackPeriodS,proto3" json:"look_back_period_s,omitempty"`
	// The multiplicative "gain" factor to limit scaling decisions.
	SmoothingFactor float64 `protobuf:"fixed64,6,opt,name=smoothing_factor,json=smoothingFactor,proto3" json:"smoothing_factor,omitempty"`
	// How long to wait before scaling down replicas.
	DownscaleDelayS float64 `protobuf:"fixed64,7,opt,name=downscale_delay_s,json=downscaleDelayS,proto3" json:"downscale_delay_s,omitempty"`
	// How long to wait before scaling up replicas.
	UpscaleDelayS float64 `protobuf:"fixed64,8,opt,name=upscale_delay_s,json=upscaleDelayS,proto3" json:"upscale_delay_s,omitempty"`
}

func (x *AutoscalingConfig) Reset() {
	*x = AutoscalingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_serve_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoscalingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoscalingConfig) ProtoMessage() {}

func (x *AutoscalingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_serve_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoscalingConfig.ProtoReflect.Descriptor instead.
func (*AutoscalingConfig) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_serve_proto_rawDescGZIP(), []int{0}
}

func (x *AutoscalingConfig) GetMinReplicas() uint32 {
	if x != nil {
		return x.MinReplicas
	}
	return 0
}

func (x *AutoscalingConfig) GetMaxReplicas() uint32 {
	if x != nil {
		return x.MaxReplicas
	}
	return 0
}

func (x *AutoscalingConfig) GetTargetNumOngoingRequestsPerReplica() uint32 {
	if x != nil {
		return x.TargetNumOngoingRequestsPerReplica
	}
	return 0
}

func (x *AutoscalingConfig) GetMetricsIntervalS() float64 {
	if x != nil {
		return x.MetricsIntervalS
	}
	return 0
}

func (x *AutoscalingConfig) GetLookBackPeriodS() float64 {
	if x != nil {
		return x.LookBackPeriodS
	}
	return 0
}

func (x *AutoscalingConfig) GetSmoothingFactor() float64 {
	if x != nil {
		return x.SmoothingFactor
	}
	return 0
}

func (x *AutoscalingConfig) GetDownscaleDelayS() float64 {
	if x != nil {
		return x.DownscaleDelayS
	}
	return 0
}

func (x *AutoscalingConfig) GetUpscaleDelayS() float64 {
	if x != nil {
		return x.UpscaleDelayS
	}
	return 0
}

// Configuration options for a deployment, to be set by the user.
type DeploymentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of processes to start up that will handle requests to this deployment.
	// Defaults to 1.
	NumReplicas int32 `protobuf:"varint,1,opt,name=num_replicas,json=numReplicas,proto3" json:"num_replicas,omitempty"`
	// The maximum number of queries that will be sent to a replica of this deployment
	// without receiving a response. Defaults to 100.
	MaxConcurrentQueries int32 `protobuf:"varint,2,opt,name=max_concurrent_queries,json=maxConcurrentQueries,proto3" json:"max_concurrent_queries,omitempty"`
	// Arguments to pass to the reconfigure method of the deployment. The reconfigure method
	// is called if user_config is not None.
	UserConfig []byte `protobuf:"bytes,3,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Duration that deployment replicas will wait until there is no more work to be done
	// before shutting down.
	GracefulShutdownWaitLoopS float64 `protobuf:"fixed64,4,opt,name=graceful_shutdown_wait_loop_s,json=gracefulShutdownWaitLoopS,proto3" json:"graceful_shutdown_wait_loop_s,omitempty"`
	// Controller waits for this duration to forcefully kill the replica for shutdown.
	GracefulShutdownTimeoutS float64 `protobuf:"fixed64,5,opt,name=graceful_shutdown_timeout_s,json=gracefulShutdownTimeoutS,proto3" json:"graceful_shutdown_timeout_s,omitempty"`
	// Frequency at which the controller health checks replicas.
	HealthCheckPeriodS float64 `protobuf:"fixed64,6,opt,name=health_check_period_s,json=healthCheckPeriodS,proto3" json:"health_check_period_s,omitempty"`
	// Timeout after which a replica is marked unhealthy without a response.
	HealthCheckTimeoutS float64 `protobuf:"fixed64,7,opt,name=health_check_timeout_s,json=healthCheckTimeoutS,proto3" json:"health_check_timeout_s,omitempty"`
	// Is the construction of deployment is cross language?
	IsCrossLanguage bool `protobuf:"varint,8,opt,name=is_cross_language,json=isCrossLanguage,proto3" json:"is_cross_language,omitempty"`
	// The deployment's programming language.
	DeploymentLanguage DeploymentLanguage `protobuf:"varint,9,opt,name=deployment_language,json=deploymentLanguage,proto3,enum=ray.serve.DeploymentLanguage" json:"deployment_language,omitempty"`
	// The deployment's autoscaling configuration.
	AutoscalingConfig *AutoscalingConfig `protobuf:"bytes,10,opt,name=autoscaling_config,json=autoscalingConfig,proto3" json:"autoscaling_config,omitempty"`
	Version           string             `protobuf:"bytes,11,opt,name=version,proto3" json:"version,omitempty"`
	PrevVersion       string             `protobuf:"bytes,12,opt,name=prev_version,json=prevVersion,proto3" json:"prev_version,omitempty"`
}

func (x *DeploymentConfig) Reset() {
	*x = DeploymentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_serve_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentConfig) ProtoMessage() {}

func (x *DeploymentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_serve_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentConfig.ProtoReflect.Descriptor instead.
func (*DeploymentConfig) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_serve_proto_rawDescGZIP(), []int{1}
}

func (x *DeploymentConfig) GetNumReplicas() int32 {
	if x != nil {
		return x.NumReplicas
	}
	return 0
}

func (x *DeploymentConfig) GetMaxConcurrentQueries() int32 {
	if x != nil {
		return x.MaxConcurrentQueries
	}
	return 0
}

func (x *DeploymentConfig) GetUserConfig() []byte {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *DeploymentConfig) GetGracefulShutdownWaitLoopS() float64 {
	if x != nil {
		return x.GracefulShutdownWaitLoopS
	}
	return 0
}

func (x *DeploymentConfig) GetGracefulShutdownTimeoutS() float64 {
	if x != nil {
		return x.GracefulShutdownTimeoutS
	}
	return 0
}

func (x *DeploymentConfig) GetHealthCheckPeriodS() float64 {
	if x != nil {
		return x.HealthCheckPeriodS
	}
	return 0
}

func (x *DeploymentConfig) GetHealthCheckTimeoutS() float64 {
	if x != nil {
		return x.HealthCheckTimeoutS
	}
	return 0
}

func (x *DeploymentConfig) GetIsCrossLanguage() bool {
	if x != nil {
		return x.IsCrossLanguage
	}
	return false
}

func (x *DeploymentConfig) GetDeploymentLanguage() DeploymentLanguage {
	if x != nil {
		return x.DeploymentLanguage
	}
	return DeploymentLanguage_PYTHON
}

func (x *DeploymentConfig) GetAutoscalingConfig() *AutoscalingConfig {
	if x != nil {
		return x.AutoscalingConfig
	}
	return nil
}

func (x *DeploymentConfig) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DeploymentConfig) GetPrevVersion() string {
	if x != nil {
		return x.PrevVersion
	}
	return ""
}

type RequestMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  string            `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Endpoint   string            `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	CallMethod string            `protobuf:"bytes,3,opt,name=call_method,json=callMethod,proto3" json:"call_method,omitempty"`
	Context    map[string]string `protobuf:"bytes,4,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RequestMetadata) Reset() {
	*x = RequestMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_serve_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestMetadata) ProtoMessage() {}

func (x *RequestMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_serve_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestMetadata.ProtoReflect.Descriptor instead.
func (*RequestMetadata) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_serve_proto_rawDescGZIP(), []int{2}
}

func (x *RequestMetadata) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *RequestMetadata) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *RequestMetadata) GetCallMethod() string {
	if x != nil {
		return x.CallMethod
	}
	return ""
}

func (x *RequestMetadata) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

type RequestWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *RequestWrapper) Reset() {
	*x = RequestWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_serve_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestWrapper) ProtoMessage() {}

func (x *RequestWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_serve_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestWrapper.ProtoReflect.Descriptor instead.
func (*RequestWrapper) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_serve_proto_rawDescGZIP(), []int{3}
}

func (x *RequestWrapper) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type UpdatedObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectSnapshot []byte `protobuf:"bytes,1,opt,name=object_snapshot,json=objectSnapshot,proto3" json:"object_snapshot,omitempty"`
	SnapshotId     int32  `protobuf:"varint,2,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
}

func (x *UpdatedObject) Reset() {
	*x = UpdatedObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_serve_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatedObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatedObject) ProtoMessage() {}

func (x *UpdatedObject) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_serve_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatedObject.ProtoReflect.Descriptor instead.
func (*UpdatedObject) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_serve_proto_rawDescGZIP(), []int{4}
}

func (x *UpdatedObject) GetObjectSnapshot() []byte {
	if x != nil {
		return x.ObjectSnapshot
	}
	return nil
}

func (x *UpdatedObject) GetSnapshotId() int32 {
	if x != nil {
		return x.SnapshotId
	}
	return 0
}

type LongPollRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeysToSnapshotIds map[string]int32 `protobuf:"bytes,1,rep,name=keys_to_snapshot_ids,json=keysToSnapshotIds,proto3" json:"keys_to_snapshot_ids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *LongPollRequest) Reset() {
	*x = LongPollRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_serve_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LongPollRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LongPollRequest) ProtoMessage() {}

func (x *LongPollRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_serve_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LongPollRequest.ProtoReflect.Descriptor instead.
func (*LongPollRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_serve_proto_rawDescGZIP(), []int{5}
}

func (x *LongPollRequest) GetKeysToSnapshotIds() map[string]int32 {
	if x != nil {
		return x.KeysToSnapshotIds
	}
	return nil
}

type LongPollResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedObjects map[string]*UpdatedObject `protobuf:"bytes,1,rep,name=updated_objects,json=updatedObjects,proto3" json:"updated_objects,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LongPollResult) Reset() {
	*x = LongPollResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_serve_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LongPollResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LongPollResult) ProtoMessage() {}

func (x *LongPollResult) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_serve_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LongPollResult.ProtoReflect.Descriptor instead.
func (*LongPollResult) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_serve_proto_rawDescGZIP(), []int{6}
}

func (x *LongPollResult) GetUpdatedObjects() map[string]*UpdatedObject {
	if x != nil {
		return x.UpdatedObjects
	}
	return nil
}

type EndpointInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndpointName string            `protobuf:"bytes,1,opt,name=endpoint_name,json=endpointName,proto3" json:"endpoint_name,omitempty"`
	Route        string            `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
	Config       map[string]string `protobuf:"bytes,3,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EndpointInfo) Reset() {
	*x = EndpointInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_serve_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointInfo) ProtoMessage() {}

func (x *EndpointInfo) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_serve_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointInfo.ProtoReflect.Descriptor instead.
func (*EndpointInfo) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_serve_proto_rawDescGZIP(), []int{7}
}

func (x *EndpointInfo) GetEndpointName() string {
	if x != nil {
		return x.EndpointName
	}
	return ""
}

func (x *EndpointInfo) GetRoute() string {
	if x != nil {
		return x.Route
	}
	return ""
}

func (x *EndpointInfo) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

type EndpointSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoints map[string]*EndpointInfo `protobuf:"bytes,1,rep,name=endpoints,proto3" json:"endpoints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EndpointSet) Reset() {
	*x = EndpointSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_serve_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointSet) ProtoMessage() {}

func (x *EndpointSet) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_serve_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointSet.ProtoReflect.Descriptor instead.
func (*EndpointSet) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_serve_proto_rawDescGZIP(), []int{8}
}

func (x *EndpointSet) GetEndpoints() map[string]*EndpointInfo {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

// Now Actor handle can be transfered across language through ray call, but the list of
// Actor handles can't. So we use this message wrapped a Actor name list to pass actor
// list across language. When Actor handle list supports across language, this message can
// be replaced.
type ActorNameList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *ActorNameList) Reset() {
	*x = ActorNameList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_serve_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorNameList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorNameList) ProtoMessage() {}

func (x *ActorNameList) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_serve_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorNameList.ProtoReflect.Descriptor instead.
func (*ActorNameList) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_serve_proto_rawDescGZIP(), []int{9}
}

func (x *ActorNameList) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

// It is deprecated. Use ActorNameList instead.
type ActorSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *ActorSet) Reset() {
	*x = ActorSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_serve_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorSet) ProtoMessage() {}

func (x *ActorSet) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_serve_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorSet.ProtoReflect.Descriptor instead.
func (*ActorSet) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_serve_proto_rawDescGZIP(), []int{10}
}

func (x *ActorSet) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type DeploymentVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeVersion string `protobuf:"bytes,1,opt,name=code_version,json=codeVersion,proto3" json:"code_version,omitempty"`
	UserConfig  []byte `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
}

func (x *DeploymentVersion) Reset() {
	*x = DeploymentVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_serve_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentVersion) ProtoMessage() {}

func (x *DeploymentVersion) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_serve_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentVersion.ProtoReflect.Descriptor instead.
func (*DeploymentVersion) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_serve_proto_rawDescGZIP(), []int{11}
}

func (x *DeploymentVersion) GetCodeVersion() string {
	if x != nil {
		return x.CodeVersion
	}
	return ""
}

func (x *DeploymentVersion) GetUserConfig() []byte {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

type ReplicaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerializedDeploymentDef []byte `protobuf:"bytes,1,opt,name=serialized_deployment_def,json=serializedDeploymentDef,proto3" json:"serialized_deployment_def,omitempty"`
	InitArgs                []byte `protobuf:"bytes,2,opt,name=init_args,json=initArgs,proto3" json:"init_args,omitempty"`
	InitKwargs              []byte `protobuf:"bytes,3,opt,name=init_kwargs,json=initKwargs,proto3" json:"init_kwargs,omitempty"`
	RayActorOptions         string `protobuf:"bytes,4,opt,name=ray_actor_options,json=rayActorOptions,proto3" json:"ray_actor_options,omitempty"`
}

func (x *ReplicaConfig) Reset() {
	*x = ReplicaConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_serve_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaConfig) ProtoMessage() {}

func (x *ReplicaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_serve_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaConfig.ProtoReflect.Descriptor instead.
func (*ReplicaConfig) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_serve_proto_rawDescGZIP(), []int{12}
}

func (x *ReplicaConfig) GetSerializedDeploymentDef() []byte {
	if x != nil {
		return x.SerializedDeploymentDef
	}
	return nil
}

func (x *ReplicaConfig) GetInitArgs() []byte {
	if x != nil {
		return x.InitArgs
	}
	return nil
}

func (x *ReplicaConfig) GetInitKwargs() []byte {
	if x != nil {
		return x.InitKwargs
	}
	return nil
}

func (x *ReplicaConfig) GetRayActorOptions() string {
	if x != nil {
		return x.RayActorOptions
	}
	return ""
}

type DeploymentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                    string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DeploymentConfig        *DeploymentConfig `protobuf:"bytes,2,opt,name=deployment_config,json=deploymentConfig,proto3" json:"deployment_config,omitempty"`
	ReplicaConfig           *ReplicaConfig    `protobuf:"bytes,3,opt,name=replica_config,json=replicaConfig,proto3" json:"replica_config,omitempty"`
	StartTimeMs             int64             `protobuf:"varint,4,opt,name=start_time_ms,json=startTimeMs,proto3" json:"start_time_ms,omitempty"`
	ActorName               string            `protobuf:"bytes,5,opt,name=actor_name,json=actorName,proto3" json:"actor_name,omitempty"`
	SerializedDeploymentDef []byte            `protobuf:"bytes,6,opt,name=serialized_deployment_def,json=serializedDeploymentDef,proto3" json:"serialized_deployment_def,omitempty"`
	Version                 string            `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
	EndTimeMs               int64             `protobuf:"varint,8,opt,name=end_time_ms,json=endTimeMs,proto3" json:"end_time_ms,omitempty"`
}

func (x *DeploymentInfo) Reset() {
	*x = DeploymentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_serve_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentInfo) ProtoMessage() {}

func (x *DeploymentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_serve_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentInfo.ProtoReflect.Descriptor instead.
func (*DeploymentInfo) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_serve_proto_rawDescGZIP(), []int{13}
}

func (x *DeploymentInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeploymentInfo) GetDeploymentConfig() *DeploymentConfig {
	if x != nil {
		return x.DeploymentConfig
	}
	return nil
}

func (x *DeploymentInfo) GetReplicaConfig() *ReplicaConfig {
	if x != nil {
		return x.ReplicaConfig
	}
	return nil
}

func (x *DeploymentInfo) GetStartTimeMs() int64 {
	if x != nil {
		return x.StartTimeMs
	}
	return 0
}

func (x *DeploymentInfo) GetActorName() string {
	if x != nil {
		return x.ActorName
	}
	return ""
}

func (x *DeploymentInfo) GetSerializedDeploymentDef() []byte {
	if x != nil {
		return x.SerializedDeploymentDef
	}
	return nil
}

func (x *DeploymentInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DeploymentInfo) GetEndTimeMs() int64 {
	if x != nil {
		return x.EndTimeMs
	}
	return 0
}

// Wrap DeploymentInfo and route. The "" route value need to be convert to None/null.
type DeploymentRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentInfo *DeploymentInfo `protobuf:"bytes,1,opt,name=deployment_info,json=deploymentInfo,proto3" json:"deployment_info,omitempty"`
	Route          string          `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *DeploymentRoute) Reset() {
	*x = DeploymentRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_serve_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentRoute) ProtoMessage() {}

func (x *DeploymentRoute) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_serve_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentRoute.ProtoReflect.Descriptor instead.
func (*DeploymentRoute) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_serve_proto_rawDescGZIP(), []int{14}
}

func (x *DeploymentRoute) GetDeploymentInfo() *DeploymentInfo {
	if x != nil {
		return x.DeploymentInfo
	}
	return nil
}

func (x *DeploymentRoute) GetRoute() string {
	if x != nil {
		return x.Route
	}
	return ""
}

// Wrap a list for DeploymentRoute.
type DeploymentRouteList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentRoutes []*DeploymentRoute `protobuf:"bytes,1,rep,name=deployment_routes,json=deploymentRoutes,proto3" json:"deployment_routes,omitempty"`
}

func (x *DeploymentRouteList) Reset() {
	*x = DeploymentRouteList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_serve_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentRouteList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentRouteList) ProtoMessage() {}

func (x *DeploymentRouteList) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_serve_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentRouteList.ProtoReflect.Descriptor instead.
func (*DeploymentRouteList) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_serve_proto_rawDescGZIP(), []int{15}
}

func (x *DeploymentRouteList) GetDeploymentRoutes() []*DeploymentRoute {
	if x != nil {
		return x.DeploymentRoutes
	}
	return nil
}

type DeploymentStatusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status  DeploymentStatus `protobuf:"varint,2,opt,name=status,proto3,enum=ray.serve.DeploymentStatus" json:"status,omitempty"`
	Message string           `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeploymentStatusInfo) Reset() {
	*x = DeploymentStatusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_serve_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentStatusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentStatusInfo) ProtoMessage() {}

func (x *DeploymentStatusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_serve_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentStatusInfo.ProtoReflect.Descriptor instead.
func (*DeploymentStatusInfo) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_serve_proto_rawDescGZIP(), []int{16}
}

func (x *DeploymentStatusInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeploymentStatusInfo) GetStatus() DeploymentStatus {
	if x != nil {
		return x.Status
	}
	return DeploymentStatus_UPDATING
}

func (x *DeploymentStatusInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Wrap a list for DeploymentStatusInfo.
type DeploymentStatusInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentStatusInfos []*DeploymentStatusInfo `protobuf:"bytes,1,rep,name=deployment_status_infos,json=deploymentStatusInfos,proto3" json:"deployment_status_infos,omitempty"`
}

func (x *DeploymentStatusInfoList) Reset() {
	*x = DeploymentStatusInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_serve_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentStatusInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentStatusInfoList) ProtoMessage() {}

func (x *DeploymentStatusInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_serve_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentStatusInfoList.ProtoReflect.Descriptor instead.
func (*DeploymentStatusInfoList) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_serve_proto_rawDescGZIP(), []int{17}
}

func (x *DeploymentStatusInfoList) GetDeploymentStatusInfos() []*DeploymentStatusInfo {
	if x != nil {
		return x.DeploymentStatusInfos
	}
	return nil
}

var File_src_ray_protobuf_serve_proto protoreflect.FileDescriptor

var file_src_ray_protobuf_serve_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x72, 0x63, 0x2f, 0x72, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x72, 0x61, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x22, 0x88, 0x03, 0x0a, 0x11, 0x41, 0x75,
	0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x53, 0x0a, 0x27, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x22, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x75,
	0x6d, 0x4f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x50, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x6f, 0x6f, 0x6b,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6c, 0x6f, 0x6f, 0x6b, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x53, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x2a, 0x0a, 0x11, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x6f, 0x77,
	0x6e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x12, 0x26, 0x0a, 0x0f,
	0x75, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x75, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x53, 0x22, 0xfb, 0x04, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x34, 0x0a, 0x16,
	0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6d, 0x61,
	0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x1d, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f,
	0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x6c, 0x6f,
	0x6f, 0x70, 0x5f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x67, 0x72, 0x61, 0x63,
	0x65, 0x66, 0x75, 0x6c, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x57, 0x61, 0x69, 0x74,
	0x4c, 0x6f, 0x6f, 0x70, 0x53, 0x12, 0x3d, 0x0a, 0x1b, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75,
	0x6c, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x5f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x67, 0x72, 0x61, 0x63,
	0x65, 0x66, 0x75, 0x6c, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x53, 0x12, 0x31, 0x0a, 0x15, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x12, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x12, 0x33, 0x0a, 0x16, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x12, 0x2a, 0x0a, 0x11,
	0x69, 0x73, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x72, 0x6f, 0x73, 0x73,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x13, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x6f,
	0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xec, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x24, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x59, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x49, 0x64, 0x22, 0xbb, 0x01, 0x0a, 0x0f, 0x4c, 0x6f, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x14, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4b, 0x65, 0x79, 0x73, 0x54, 0x6f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6b, 0x65, 0x79, 0x73, 0x54, 0x6f, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x73, 0x1a, 0x44, 0x0a, 0x16, 0x4b, 0x65,
	0x79, 0x73, 0x54, 0x6f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xc5, 0x01, 0x0a, 0x0e, 0x4c, 0x6f, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x56, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x1a, 0x5b, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc1, 0x01, 0x0a, 0x0c, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9, 0x01, 0x0a,
	0x0b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x12, 0x43, 0x0a, 0x09,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x1a, 0x55, 0x0a, 0x0e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x25, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22,
	0x20, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x22, 0x57, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xb5, 0x01, 0x0a, 0x0d, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x19,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x17, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74,
	0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x69, 0x6e, 0x69,
	0x74, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6b, 0x77,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74,
	0x4b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x61, 0x79, 0x5f, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x72, 0x61, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xe8, 0x02, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x65, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x22, 0x6b, 0x0a,
	0x0f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x12, 0x42, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x22, 0x5e, 0x0a, 0x13, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x47, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0x79, 0x0a, 0x14, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x73, 0x0a, 0x18, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x57, 0x0a, 0x17, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x15, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x2a, 0x2a, 0x0a, 0x12, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x50, 0x59, 0x54, 0x48, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x4a, 0x41, 0x56, 0x41, 0x10, 0x01, 0x2a, 0x3c, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x45, 0x41, 0x4c,
	0x54, 0x48, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54,
	0x48, 0x59, 0x10, 0x02, 0x42, 0x90, 0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x42, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x72, 0x75, 0x65, 0x69, 0x61, 0x6e, 0x2f, 0x72, 0x61, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2f, 0x73, 0x72, 0x63, 0x2f, 0x72, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0xf8, 0x01, 0x01, 0xa2, 0x02, 0x03, 0x52, 0x53, 0x58, 0xaa, 0x02, 0x09, 0x52, 0x61, 0x79,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0xca, 0x02, 0x09, 0x52, 0x61, 0x79, 0x5c, 0x53, 0x65, 0x72,
	0x76, 0x65, 0xe2, 0x02, 0x15, 0x52, 0x61, 0x79, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0a, 0x52, 0x61, 0x79,
	0x3a, 0x3a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_src_ray_protobuf_serve_proto_rawDescOnce sync.Once
	file_src_ray_protobuf_serve_proto_rawDescData = file_src_ray_protobuf_serve_proto_rawDesc
)

func file_src_ray_protobuf_serve_proto_rawDescGZIP() []byte {
	file_src_ray_protobuf_serve_proto_rawDescOnce.Do(func() {
		file_src_ray_protobuf_serve_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_ray_protobuf_serve_proto_rawDescData)
	})
	return file_src_ray_protobuf_serve_proto_rawDescData
}

var file_src_ray_protobuf_serve_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_src_ray_protobuf_serve_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_src_ray_protobuf_serve_proto_goTypes = []interface{}{
	(DeploymentLanguage)(0),          // 0: ray.serve.DeploymentLanguage
	(DeploymentStatus)(0),            // 1: ray.serve.DeploymentStatus
	(*AutoscalingConfig)(nil),        // 2: ray.serve.AutoscalingConfig
	(*DeploymentConfig)(nil),         // 3: ray.serve.DeploymentConfig
	(*RequestMetadata)(nil),          // 4: ray.serve.RequestMetadata
	(*RequestWrapper)(nil),           // 5: ray.serve.RequestWrapper
	(*UpdatedObject)(nil),            // 6: ray.serve.UpdatedObject
	(*LongPollRequest)(nil),          // 7: ray.serve.LongPollRequest
	(*LongPollResult)(nil),           // 8: ray.serve.LongPollResult
	(*EndpointInfo)(nil),             // 9: ray.serve.EndpointInfo
	(*EndpointSet)(nil),              // 10: ray.serve.EndpointSet
	(*ActorNameList)(nil),            // 11: ray.serve.ActorNameList
	(*ActorSet)(nil),                 // 12: ray.serve.ActorSet
	(*DeploymentVersion)(nil),        // 13: ray.serve.DeploymentVersion
	(*ReplicaConfig)(nil),            // 14: ray.serve.ReplicaConfig
	(*DeploymentInfo)(nil),           // 15: ray.serve.DeploymentInfo
	(*DeploymentRoute)(nil),          // 16: ray.serve.DeploymentRoute
	(*DeploymentRouteList)(nil),      // 17: ray.serve.DeploymentRouteList
	(*DeploymentStatusInfo)(nil),     // 18: ray.serve.DeploymentStatusInfo
	(*DeploymentStatusInfoList)(nil), // 19: ray.serve.DeploymentStatusInfoList
	nil,                              // 20: ray.serve.RequestMetadata.ContextEntry
	nil,                              // 21: ray.serve.LongPollRequest.KeysToSnapshotIdsEntry
	nil,                              // 22: ray.serve.LongPollResult.UpdatedObjectsEntry
	nil,                              // 23: ray.serve.EndpointInfo.ConfigEntry
	nil,                              // 24: ray.serve.EndpointSet.EndpointsEntry
}
var file_src_ray_protobuf_serve_proto_depIdxs = []int32{
	0,  // 0: ray.serve.DeploymentConfig.deployment_language:type_name -> ray.serve.DeploymentLanguage
	2,  // 1: ray.serve.DeploymentConfig.autoscaling_config:type_name -> ray.serve.AutoscalingConfig
	20, // 2: ray.serve.RequestMetadata.context:type_name -> ray.serve.RequestMetadata.ContextEntry
	21, // 3: ray.serve.LongPollRequest.keys_to_snapshot_ids:type_name -> ray.serve.LongPollRequest.KeysToSnapshotIdsEntry
	22, // 4: ray.serve.LongPollResult.updated_objects:type_name -> ray.serve.LongPollResult.UpdatedObjectsEntry
	23, // 5: ray.serve.EndpointInfo.config:type_name -> ray.serve.EndpointInfo.ConfigEntry
	24, // 6: ray.serve.EndpointSet.endpoints:type_name -> ray.serve.EndpointSet.EndpointsEntry
	3,  // 7: ray.serve.DeploymentInfo.deployment_config:type_name -> ray.serve.DeploymentConfig
	14, // 8: ray.serve.DeploymentInfo.replica_config:type_name -> ray.serve.ReplicaConfig
	15, // 9: ray.serve.DeploymentRoute.deployment_info:type_name -> ray.serve.DeploymentInfo
	16, // 10: ray.serve.DeploymentRouteList.deployment_routes:type_name -> ray.serve.DeploymentRoute
	1,  // 11: ray.serve.DeploymentStatusInfo.status:type_name -> ray.serve.DeploymentStatus
	18, // 12: ray.serve.DeploymentStatusInfoList.deployment_status_infos:type_name -> ray.serve.DeploymentStatusInfo
	6,  // 13: ray.serve.LongPollResult.UpdatedObjectsEntry.value:type_name -> ray.serve.UpdatedObject
	9,  // 14: ray.serve.EndpointSet.EndpointsEntry.value:type_name -> ray.serve.EndpointInfo
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_src_ray_protobuf_serve_proto_init() }
func file_src_ray_protobuf_serve_proto_init() {
	if File_src_ray_protobuf_serve_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_src_ray_protobuf_serve_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoscalingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_serve_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_serve_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_serve_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_serve_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatedObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_serve_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LongPollRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_serve_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LongPollResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_serve_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_serve_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_serve_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActorNameList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_serve_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActorSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_serve_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_serve_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_serve_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_serve_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_serve_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentRouteList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_serve_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentStatusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_serve_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentStatusInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_ray_protobuf_serve_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_src_ray_protobuf_serve_proto_goTypes,
		DependencyIndexes: file_src_ray_protobuf_serve_proto_depIdxs,
		EnumInfos:         file_src_ray_protobuf_serve_proto_enumTypes,
		MessageInfos:      file_src_ray_protobuf_serve_proto_msgTypes,
	}.Build()
	File_src_ray_protobuf_serve_proto = out.File
	file_src_ray_protobuf_serve_proto_rawDesc = nil
	file_src_ray_protobuf_serve_proto_goTypes = nil
	file_src_ray_protobuf_serve_proto_depIdxs = nil
}
