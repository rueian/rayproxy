// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: src/ray/protobuf/node_manager.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeManagerServiceClient is the client API for NodeManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeManagerServiceClient interface {
	// Update the node's view of the cluster resource usage.
	UpdateResourceUsage(ctx context.Context, in *UpdateResourceUsageRequest, opts ...grpc.CallOption) (*UpdateResourceUsageReply, error)
	// Get the resource load of the raylet.
	GetResourceLoad(ctx context.Context, in *GetResourceLoadRequest, opts ...grpc.CallOption) (*GetResourceLoadReply, error)
	// Request the current resource usage from this raylet
	RequestResourceReport(ctx context.Context, in *RequestResourceReportRequest, opts ...grpc.CallOption) (*RequestResourceReportReply, error)
	// Request a worker from the raylet.
	RequestWorkerLease(ctx context.Context, in *RequestWorkerLeaseRequest, opts ...grpc.CallOption) (*RequestWorkerLeaseReply, error)
	// Report task backlog information from a worker to the raylet
	ReportWorkerBacklog(ctx context.Context, in *ReportWorkerBacklogRequest, opts ...grpc.CallOption) (*ReportWorkerBacklogReply, error)
	// Release a worker back to its raylet.
	ReturnWorker(ctx context.Context, in *ReturnWorkerRequest, opts ...grpc.CallOption) (*ReturnWorkerReply, error)
	// This method is only used by GCS, and the purpose is to release leased workers
	// that may be leaked. When GCS restarts, it doesn't know which workers it has leased
	// in the previous lifecycle. In this case, GCS will send a list of worker ids that
	// are still needed. And Raylet will release other leased workers.
	ReleaseUnusedWorkers(ctx context.Context, in *ReleaseUnusedWorkersRequest, opts ...grpc.CallOption) (*ReleaseUnusedWorkersReply, error)
	// / Shutdown the raylet (node manager) gracefully.
	ShutdownRaylet(ctx context.Context, in *ShutdownRayletRequest, opts ...grpc.CallOption) (*ShutdownRayletReply, error)
	// Request a raylet to lock resources for a bundle.
	// This is the first phase of 2PC protocol for atomic placement group creation.
	PrepareBundleResources(ctx context.Context, in *PrepareBundleResourcesRequest, opts ...grpc.CallOption) (*PrepareBundleResourcesReply, error)
	// Commit bundle resources to a raylet.
	// This is the second phase of 2PC protocol for atomic placement group creation.
	CommitBundleResources(ctx context.Context, in *CommitBundleResourcesRequest, opts ...grpc.CallOption) (*CommitBundleResourcesReply, error)
	// Return resource for the raylet.
	CancelResourceReserve(ctx context.Context, in *CancelResourceReserveRequest, opts ...grpc.CallOption) (*CancelResourceReserveReply, error)
	// Cancel a pending lease request. This only returns success if the
	// lease request was not yet granted.
	CancelWorkerLease(ctx context.Context, in *CancelWorkerLeaseRequest, opts ...grpc.CallOption) (*CancelWorkerLeaseReply, error)
	// Pin the provided object IDs.
	PinObjectIDs(ctx context.Context, in *PinObjectIDsRequest, opts ...grpc.CallOption) (*PinObjectIDsReply, error)
	// Get the current node stats.
	GetNodeStats(ctx context.Context, in *GetNodeStatsRequest, opts ...grpc.CallOption) (*GetNodeStatsReply, error)
	// Trigger garbage collection in all workers across the cluster.
	GlobalGC(ctx context.Context, in *GlobalGCRequest, opts ...grpc.CallOption) (*GlobalGCReply, error)
	// Get global object reference stats in formatted form.
	FormatGlobalMemoryInfo(ctx context.Context, in *FormatGlobalMemoryInfoRequest, opts ...grpc.CallOption) (*FormatGlobalMemoryInfoReply, error)
	// Ask the raylet to spill an object to external storage.
	RequestObjectSpillage(ctx context.Context, in *RequestObjectSpillageRequest, opts ...grpc.CallOption) (*RequestObjectSpillageReply, error)
	// This method is only used by GCS, and the purpose is to release bundles
	// that may be leaked. When GCS restarts, it doesn't know which bundles it has leased
	// in the previous lifecycle. In this case, GCS will send a list of bundles that
	// are still needed. And Raylet will release other bundles.
	ReleaseUnusedBundles(ctx context.Context, in *ReleaseUnusedBundlesRequest, opts ...grpc.CallOption) (*ReleaseUnusedBundlesReply, error)
	// Get the system config.
	GetSystemConfig(ctx context.Context, in *GetSystemConfigRequest, opts ...grpc.CallOption) (*GetSystemConfigReply, error)
	// Get gcs server address.
	GetGcsServerAddress(ctx context.Context, in *GetGcsServerAddressRequest, opts ...grpc.CallOption) (*GetGcsServerAddressReply, error)
	// [State API] Get the all task information of the node.
	GetTasksInfo(ctx context.Context, in *GetTasksInfoRequest, opts ...grpc.CallOption) (*GetTasksInfoReply, error)
	// [State API] Get the all object information of the node.
	GetObjectsInfo(ctx context.Context, in *GetObjectsInfoRequest, opts ...grpc.CallOption) (*GetObjectsInfoReply, error)
}

type nodeManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeManagerServiceClient(cc grpc.ClientConnInterface) NodeManagerServiceClient {
	return &nodeManagerServiceClient{cc}
}

func (c *nodeManagerServiceClient) UpdateResourceUsage(ctx context.Context, in *UpdateResourceUsageRequest, opts ...grpc.CallOption) (*UpdateResourceUsageReply, error) {
	out := new(UpdateResourceUsageReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.NodeManagerService/UpdateResourceUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) GetResourceLoad(ctx context.Context, in *GetResourceLoadRequest, opts ...grpc.CallOption) (*GetResourceLoadReply, error) {
	out := new(GetResourceLoadReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.NodeManagerService/GetResourceLoad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) RequestResourceReport(ctx context.Context, in *RequestResourceReportRequest, opts ...grpc.CallOption) (*RequestResourceReportReply, error) {
	out := new(RequestResourceReportReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.NodeManagerService/RequestResourceReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) RequestWorkerLease(ctx context.Context, in *RequestWorkerLeaseRequest, opts ...grpc.CallOption) (*RequestWorkerLeaseReply, error) {
	out := new(RequestWorkerLeaseReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.NodeManagerService/RequestWorkerLease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) ReportWorkerBacklog(ctx context.Context, in *ReportWorkerBacklogRequest, opts ...grpc.CallOption) (*ReportWorkerBacklogReply, error) {
	out := new(ReportWorkerBacklogReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.NodeManagerService/ReportWorkerBacklog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) ReturnWorker(ctx context.Context, in *ReturnWorkerRequest, opts ...grpc.CallOption) (*ReturnWorkerReply, error) {
	out := new(ReturnWorkerReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.NodeManagerService/ReturnWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) ReleaseUnusedWorkers(ctx context.Context, in *ReleaseUnusedWorkersRequest, opts ...grpc.CallOption) (*ReleaseUnusedWorkersReply, error) {
	out := new(ReleaseUnusedWorkersReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.NodeManagerService/ReleaseUnusedWorkers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) ShutdownRaylet(ctx context.Context, in *ShutdownRayletRequest, opts ...grpc.CallOption) (*ShutdownRayletReply, error) {
	out := new(ShutdownRayletReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.NodeManagerService/ShutdownRaylet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) PrepareBundleResources(ctx context.Context, in *PrepareBundleResourcesRequest, opts ...grpc.CallOption) (*PrepareBundleResourcesReply, error) {
	out := new(PrepareBundleResourcesReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.NodeManagerService/PrepareBundleResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) CommitBundleResources(ctx context.Context, in *CommitBundleResourcesRequest, opts ...grpc.CallOption) (*CommitBundleResourcesReply, error) {
	out := new(CommitBundleResourcesReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.NodeManagerService/CommitBundleResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) CancelResourceReserve(ctx context.Context, in *CancelResourceReserveRequest, opts ...grpc.CallOption) (*CancelResourceReserveReply, error) {
	out := new(CancelResourceReserveReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.NodeManagerService/CancelResourceReserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) CancelWorkerLease(ctx context.Context, in *CancelWorkerLeaseRequest, opts ...grpc.CallOption) (*CancelWorkerLeaseReply, error) {
	out := new(CancelWorkerLeaseReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.NodeManagerService/CancelWorkerLease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) PinObjectIDs(ctx context.Context, in *PinObjectIDsRequest, opts ...grpc.CallOption) (*PinObjectIDsReply, error) {
	out := new(PinObjectIDsReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.NodeManagerService/PinObjectIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) GetNodeStats(ctx context.Context, in *GetNodeStatsRequest, opts ...grpc.CallOption) (*GetNodeStatsReply, error) {
	out := new(GetNodeStatsReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.NodeManagerService/GetNodeStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) GlobalGC(ctx context.Context, in *GlobalGCRequest, opts ...grpc.CallOption) (*GlobalGCReply, error) {
	out := new(GlobalGCReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.NodeManagerService/GlobalGC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) FormatGlobalMemoryInfo(ctx context.Context, in *FormatGlobalMemoryInfoRequest, opts ...grpc.CallOption) (*FormatGlobalMemoryInfoReply, error) {
	out := new(FormatGlobalMemoryInfoReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.NodeManagerService/FormatGlobalMemoryInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) RequestObjectSpillage(ctx context.Context, in *RequestObjectSpillageRequest, opts ...grpc.CallOption) (*RequestObjectSpillageReply, error) {
	out := new(RequestObjectSpillageReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.NodeManagerService/RequestObjectSpillage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) ReleaseUnusedBundles(ctx context.Context, in *ReleaseUnusedBundlesRequest, opts ...grpc.CallOption) (*ReleaseUnusedBundlesReply, error) {
	out := new(ReleaseUnusedBundlesReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.NodeManagerService/ReleaseUnusedBundles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) GetSystemConfig(ctx context.Context, in *GetSystemConfigRequest, opts ...grpc.CallOption) (*GetSystemConfigReply, error) {
	out := new(GetSystemConfigReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.NodeManagerService/GetSystemConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) GetGcsServerAddress(ctx context.Context, in *GetGcsServerAddressRequest, opts ...grpc.CallOption) (*GetGcsServerAddressReply, error) {
	out := new(GetGcsServerAddressReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.NodeManagerService/GetGcsServerAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) GetTasksInfo(ctx context.Context, in *GetTasksInfoRequest, opts ...grpc.CallOption) (*GetTasksInfoReply, error) {
	out := new(GetTasksInfoReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.NodeManagerService/GetTasksInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) GetObjectsInfo(ctx context.Context, in *GetObjectsInfoRequest, opts ...grpc.CallOption) (*GetObjectsInfoReply, error) {
	out := new(GetObjectsInfoReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.NodeManagerService/GetObjectsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeManagerServiceServer is the server API for NodeManagerService service.
// All implementations should embed UnimplementedNodeManagerServiceServer
// for forward compatibility
type NodeManagerServiceServer interface {
	// Update the node's view of the cluster resource usage.
	UpdateResourceUsage(context.Context, *UpdateResourceUsageRequest) (*UpdateResourceUsageReply, error)
	// Get the resource load of the raylet.
	GetResourceLoad(context.Context, *GetResourceLoadRequest) (*GetResourceLoadReply, error)
	// Request the current resource usage from this raylet
	RequestResourceReport(context.Context, *RequestResourceReportRequest) (*RequestResourceReportReply, error)
	// Request a worker from the raylet.
	RequestWorkerLease(context.Context, *RequestWorkerLeaseRequest) (*RequestWorkerLeaseReply, error)
	// Report task backlog information from a worker to the raylet
	ReportWorkerBacklog(context.Context, *ReportWorkerBacklogRequest) (*ReportWorkerBacklogReply, error)
	// Release a worker back to its raylet.
	ReturnWorker(context.Context, *ReturnWorkerRequest) (*ReturnWorkerReply, error)
	// This method is only used by GCS, and the purpose is to release leased workers
	// that may be leaked. When GCS restarts, it doesn't know which workers it has leased
	// in the previous lifecycle. In this case, GCS will send a list of worker ids that
	// are still needed. And Raylet will release other leased workers.
	ReleaseUnusedWorkers(context.Context, *ReleaseUnusedWorkersRequest) (*ReleaseUnusedWorkersReply, error)
	// / Shutdown the raylet (node manager) gracefully.
	ShutdownRaylet(context.Context, *ShutdownRayletRequest) (*ShutdownRayletReply, error)
	// Request a raylet to lock resources for a bundle.
	// This is the first phase of 2PC protocol for atomic placement group creation.
	PrepareBundleResources(context.Context, *PrepareBundleResourcesRequest) (*PrepareBundleResourcesReply, error)
	// Commit bundle resources to a raylet.
	// This is the second phase of 2PC protocol for atomic placement group creation.
	CommitBundleResources(context.Context, *CommitBundleResourcesRequest) (*CommitBundleResourcesReply, error)
	// Return resource for the raylet.
	CancelResourceReserve(context.Context, *CancelResourceReserveRequest) (*CancelResourceReserveReply, error)
	// Cancel a pending lease request. This only returns success if the
	// lease request was not yet granted.
	CancelWorkerLease(context.Context, *CancelWorkerLeaseRequest) (*CancelWorkerLeaseReply, error)
	// Pin the provided object IDs.
	PinObjectIDs(context.Context, *PinObjectIDsRequest) (*PinObjectIDsReply, error)
	// Get the current node stats.
	GetNodeStats(context.Context, *GetNodeStatsRequest) (*GetNodeStatsReply, error)
	// Trigger garbage collection in all workers across the cluster.
	GlobalGC(context.Context, *GlobalGCRequest) (*GlobalGCReply, error)
	// Get global object reference stats in formatted form.
	FormatGlobalMemoryInfo(context.Context, *FormatGlobalMemoryInfoRequest) (*FormatGlobalMemoryInfoReply, error)
	// Ask the raylet to spill an object to external storage.
	RequestObjectSpillage(context.Context, *RequestObjectSpillageRequest) (*RequestObjectSpillageReply, error)
	// This method is only used by GCS, and the purpose is to release bundles
	// that may be leaked. When GCS restarts, it doesn't know which bundles it has leased
	// in the previous lifecycle. In this case, GCS will send a list of bundles that
	// are still needed. And Raylet will release other bundles.
	ReleaseUnusedBundles(context.Context, *ReleaseUnusedBundlesRequest) (*ReleaseUnusedBundlesReply, error)
	// Get the system config.
	GetSystemConfig(context.Context, *GetSystemConfigRequest) (*GetSystemConfigReply, error)
	// Get gcs server address.
	GetGcsServerAddress(context.Context, *GetGcsServerAddressRequest) (*GetGcsServerAddressReply, error)
	// [State API] Get the all task information of the node.
	GetTasksInfo(context.Context, *GetTasksInfoRequest) (*GetTasksInfoReply, error)
	// [State API] Get the all object information of the node.
	GetObjectsInfo(context.Context, *GetObjectsInfoRequest) (*GetObjectsInfoReply, error)
}

// UnimplementedNodeManagerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNodeManagerServiceServer struct {
}

func (UnimplementedNodeManagerServiceServer) UpdateResourceUsage(context.Context, *UpdateResourceUsageRequest) (*UpdateResourceUsageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResourceUsage not implemented")
}
func (UnimplementedNodeManagerServiceServer) GetResourceLoad(context.Context, *GetResourceLoadRequest) (*GetResourceLoadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceLoad not implemented")
}
func (UnimplementedNodeManagerServiceServer) RequestResourceReport(context.Context, *RequestResourceReportRequest) (*RequestResourceReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestResourceReport not implemented")
}
func (UnimplementedNodeManagerServiceServer) RequestWorkerLease(context.Context, *RequestWorkerLeaseRequest) (*RequestWorkerLeaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestWorkerLease not implemented")
}
func (UnimplementedNodeManagerServiceServer) ReportWorkerBacklog(context.Context, *ReportWorkerBacklogRequest) (*ReportWorkerBacklogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportWorkerBacklog not implemented")
}
func (UnimplementedNodeManagerServiceServer) ReturnWorker(context.Context, *ReturnWorkerRequest) (*ReturnWorkerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnWorker not implemented")
}
func (UnimplementedNodeManagerServiceServer) ReleaseUnusedWorkers(context.Context, *ReleaseUnusedWorkersRequest) (*ReleaseUnusedWorkersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseUnusedWorkers not implemented")
}
func (UnimplementedNodeManagerServiceServer) ShutdownRaylet(context.Context, *ShutdownRayletRequest) (*ShutdownRayletReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownRaylet not implemented")
}
func (UnimplementedNodeManagerServiceServer) PrepareBundleResources(context.Context, *PrepareBundleResourcesRequest) (*PrepareBundleResourcesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareBundleResources not implemented")
}
func (UnimplementedNodeManagerServiceServer) CommitBundleResources(context.Context, *CommitBundleResourcesRequest) (*CommitBundleResourcesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitBundleResources not implemented")
}
func (UnimplementedNodeManagerServiceServer) CancelResourceReserve(context.Context, *CancelResourceReserveRequest) (*CancelResourceReserveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelResourceReserve not implemented")
}
func (UnimplementedNodeManagerServiceServer) CancelWorkerLease(context.Context, *CancelWorkerLeaseRequest) (*CancelWorkerLeaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelWorkerLease not implemented")
}
func (UnimplementedNodeManagerServiceServer) PinObjectIDs(context.Context, *PinObjectIDsRequest) (*PinObjectIDsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinObjectIDs not implemented")
}
func (UnimplementedNodeManagerServiceServer) GetNodeStats(context.Context, *GetNodeStatsRequest) (*GetNodeStatsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeStats not implemented")
}
func (UnimplementedNodeManagerServiceServer) GlobalGC(context.Context, *GlobalGCRequest) (*GlobalGCReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalGC not implemented")
}
func (UnimplementedNodeManagerServiceServer) FormatGlobalMemoryInfo(context.Context, *FormatGlobalMemoryInfoRequest) (*FormatGlobalMemoryInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormatGlobalMemoryInfo not implemented")
}
func (UnimplementedNodeManagerServiceServer) RequestObjectSpillage(context.Context, *RequestObjectSpillageRequest) (*RequestObjectSpillageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestObjectSpillage not implemented")
}
func (UnimplementedNodeManagerServiceServer) ReleaseUnusedBundles(context.Context, *ReleaseUnusedBundlesRequest) (*ReleaseUnusedBundlesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseUnusedBundles not implemented")
}
func (UnimplementedNodeManagerServiceServer) GetSystemConfig(context.Context, *GetSystemConfigRequest) (*GetSystemConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemConfig not implemented")
}
func (UnimplementedNodeManagerServiceServer) GetGcsServerAddress(context.Context, *GetGcsServerAddressRequest) (*GetGcsServerAddressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGcsServerAddress not implemented")
}
func (UnimplementedNodeManagerServiceServer) GetTasksInfo(context.Context, *GetTasksInfoRequest) (*GetTasksInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasksInfo not implemented")
}
func (UnimplementedNodeManagerServiceServer) GetObjectsInfo(context.Context, *GetObjectsInfoRequest) (*GetObjectsInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectsInfo not implemented")
}

// UnsafeNodeManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeManagerServiceServer will
// result in compilation errors.
type UnsafeNodeManagerServiceServer interface {
	mustEmbedUnimplementedNodeManagerServiceServer()
}

func RegisterNodeManagerServiceServer(s grpc.ServiceRegistrar, srv NodeManagerServiceServer) {
	s.RegisterService(&NodeManagerService_ServiceDesc, srv)
}

func _NodeManagerService_UpdateResourceUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).UpdateResourceUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.NodeManagerService/UpdateResourceUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).UpdateResourceUsage(ctx, req.(*UpdateResourceUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_GetResourceLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceLoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).GetResourceLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.NodeManagerService/GetResourceLoad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).GetResourceLoad(ctx, req.(*GetResourceLoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_RequestResourceReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestResourceReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).RequestResourceReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.NodeManagerService/RequestResourceReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).RequestResourceReport(ctx, req.(*RequestResourceReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_RequestWorkerLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWorkerLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).RequestWorkerLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.NodeManagerService/RequestWorkerLease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).RequestWorkerLease(ctx, req.(*RequestWorkerLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_ReportWorkerBacklog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportWorkerBacklogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).ReportWorkerBacklog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.NodeManagerService/ReportWorkerBacklog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).ReportWorkerBacklog(ctx, req.(*ReportWorkerBacklogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_ReturnWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).ReturnWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.NodeManagerService/ReturnWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).ReturnWorker(ctx, req.(*ReturnWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_ReleaseUnusedWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseUnusedWorkersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).ReleaseUnusedWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.NodeManagerService/ReleaseUnusedWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).ReleaseUnusedWorkers(ctx, req.(*ReleaseUnusedWorkersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_ShutdownRaylet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRayletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).ShutdownRaylet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.NodeManagerService/ShutdownRaylet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).ShutdownRaylet(ctx, req.(*ShutdownRayletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_PrepareBundleResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareBundleResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).PrepareBundleResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.NodeManagerService/PrepareBundleResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).PrepareBundleResources(ctx, req.(*PrepareBundleResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_CommitBundleResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitBundleResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).CommitBundleResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.NodeManagerService/CommitBundleResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).CommitBundleResources(ctx, req.(*CommitBundleResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_CancelResourceReserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelResourceReserveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).CancelResourceReserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.NodeManagerService/CancelResourceReserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).CancelResourceReserve(ctx, req.(*CancelResourceReserveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_CancelWorkerLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelWorkerLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).CancelWorkerLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.NodeManagerService/CancelWorkerLease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).CancelWorkerLease(ctx, req.(*CancelWorkerLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_PinObjectIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinObjectIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).PinObjectIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.NodeManagerService/PinObjectIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).PinObjectIDs(ctx, req.(*PinObjectIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_GetNodeStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).GetNodeStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.NodeManagerService/GetNodeStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).GetNodeStats(ctx, req.(*GetNodeStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_GlobalGC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalGCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).GlobalGC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.NodeManagerService/GlobalGC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).GlobalGC(ctx, req.(*GlobalGCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_FormatGlobalMemoryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormatGlobalMemoryInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).FormatGlobalMemoryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.NodeManagerService/FormatGlobalMemoryInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).FormatGlobalMemoryInfo(ctx, req.(*FormatGlobalMemoryInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_RequestObjectSpillage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestObjectSpillageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).RequestObjectSpillage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.NodeManagerService/RequestObjectSpillage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).RequestObjectSpillage(ctx, req.(*RequestObjectSpillageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_ReleaseUnusedBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseUnusedBundlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).ReleaseUnusedBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.NodeManagerService/ReleaseUnusedBundles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).ReleaseUnusedBundles(ctx, req.(*ReleaseUnusedBundlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_GetSystemConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).GetSystemConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.NodeManagerService/GetSystemConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).GetSystemConfig(ctx, req.(*GetSystemConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_GetGcsServerAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGcsServerAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).GetGcsServerAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.NodeManagerService/GetGcsServerAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).GetGcsServerAddress(ctx, req.(*GetGcsServerAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_GetTasksInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTasksInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).GetTasksInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.NodeManagerService/GetTasksInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).GetTasksInfo(ctx, req.(*GetTasksInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_GetObjectsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).GetObjectsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.NodeManagerService/GetObjectsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).GetObjectsInfo(ctx, req.(*GetObjectsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeManagerService_ServiceDesc is the grpc.ServiceDesc for NodeManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ray.rpc.NodeManagerService",
	HandlerType: (*NodeManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateResourceUsage",
			Handler:    _NodeManagerService_UpdateResourceUsage_Handler,
		},
		{
			MethodName: "GetResourceLoad",
			Handler:    _NodeManagerService_GetResourceLoad_Handler,
		},
		{
			MethodName: "RequestResourceReport",
			Handler:    _NodeManagerService_RequestResourceReport_Handler,
		},
		{
			MethodName: "RequestWorkerLease",
			Handler:    _NodeManagerService_RequestWorkerLease_Handler,
		},
		{
			MethodName: "ReportWorkerBacklog",
			Handler:    _NodeManagerService_ReportWorkerBacklog_Handler,
		},
		{
			MethodName: "ReturnWorker",
			Handler:    _NodeManagerService_ReturnWorker_Handler,
		},
		{
			MethodName: "ReleaseUnusedWorkers",
			Handler:    _NodeManagerService_ReleaseUnusedWorkers_Handler,
		},
		{
			MethodName: "ShutdownRaylet",
			Handler:    _NodeManagerService_ShutdownRaylet_Handler,
		},
		{
			MethodName: "PrepareBundleResources",
			Handler:    _NodeManagerService_PrepareBundleResources_Handler,
		},
		{
			MethodName: "CommitBundleResources",
			Handler:    _NodeManagerService_CommitBundleResources_Handler,
		},
		{
			MethodName: "CancelResourceReserve",
			Handler:    _NodeManagerService_CancelResourceReserve_Handler,
		},
		{
			MethodName: "CancelWorkerLease",
			Handler:    _NodeManagerService_CancelWorkerLease_Handler,
		},
		{
			MethodName: "PinObjectIDs",
			Handler:    _NodeManagerService_PinObjectIDs_Handler,
		},
		{
			MethodName: "GetNodeStats",
			Handler:    _NodeManagerService_GetNodeStats_Handler,
		},
		{
			MethodName: "GlobalGC",
			Handler:    _NodeManagerService_GlobalGC_Handler,
		},
		{
			MethodName: "FormatGlobalMemoryInfo",
			Handler:    _NodeManagerService_FormatGlobalMemoryInfo_Handler,
		},
		{
			MethodName: "RequestObjectSpillage",
			Handler:    _NodeManagerService_RequestObjectSpillage_Handler,
		},
		{
			MethodName: "ReleaseUnusedBundles",
			Handler:    _NodeManagerService_ReleaseUnusedBundles_Handler,
		},
		{
			MethodName: "GetSystemConfig",
			Handler:    _NodeManagerService_GetSystemConfig_Handler,
		},
		{
			MethodName: "GetGcsServerAddress",
			Handler:    _NodeManagerService_GetGcsServerAddress_Handler,
		},
		{
			MethodName: "GetTasksInfo",
			Handler:    _NodeManagerService_GetTasksInfo_Handler,
		},
		{
			MethodName: "GetObjectsInfo",
			Handler:    _NodeManagerService_GetObjectsInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/ray/protobuf/node_manager.proto",
}
