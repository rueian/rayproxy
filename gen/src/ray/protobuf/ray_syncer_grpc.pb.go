// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: src/ray/protobuf/ray_syncer.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RaySyncerClient is the client API for RaySyncer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaySyncerClient interface {
	// This is the first message that should be sent. It will initialize
	// some structure between nodes.
	StartSync(ctx context.Context, in *StartSyncRequest, opts ...grpc.CallOption) (*StartSyncResponse, error)
	// These two RPCs are for messages reporting and broadcasting.
	// Update is used by the client to send update request to the server.
	Update(ctx context.Context, in *RaySyncMessages, opts ...grpc.CallOption) (*DummyResponse, error)
	// LongPolling is used by the server to send request to the client.
	LongPolling(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*RaySyncMessages, error)
}

type raySyncerClient struct {
	cc grpc.ClientConnInterface
}

func NewRaySyncerClient(cc grpc.ClientConnInterface) RaySyncerClient {
	return &raySyncerClient{cc}
}

func (c *raySyncerClient) StartSync(ctx context.Context, in *StartSyncRequest, opts ...grpc.CallOption) (*StartSyncResponse, error) {
	out := new(StartSyncResponse)
	err := c.cc.Invoke(ctx, "/ray.rpc.syncer.RaySyncer/StartSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raySyncerClient) Update(ctx context.Context, in *RaySyncMessages, opts ...grpc.CallOption) (*DummyResponse, error) {
	out := new(DummyResponse)
	err := c.cc.Invoke(ctx, "/ray.rpc.syncer.RaySyncer/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raySyncerClient) LongPolling(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*RaySyncMessages, error) {
	out := new(RaySyncMessages)
	err := c.cc.Invoke(ctx, "/ray.rpc.syncer.RaySyncer/LongPolling", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaySyncerServer is the server API for RaySyncer service.
// All implementations should embed UnimplementedRaySyncerServer
// for forward compatibility
type RaySyncerServer interface {
	// This is the first message that should be sent. It will initialize
	// some structure between nodes.
	StartSync(context.Context, *StartSyncRequest) (*StartSyncResponse, error)
	// These two RPCs are for messages reporting and broadcasting.
	// Update is used by the client to send update request to the server.
	Update(context.Context, *RaySyncMessages) (*DummyResponse, error)
	// LongPolling is used by the server to send request to the client.
	LongPolling(context.Context, *DummyRequest) (*RaySyncMessages, error)
}

// UnimplementedRaySyncerServer should be embedded to have forward compatible implementations.
type UnimplementedRaySyncerServer struct {
}

func (UnimplementedRaySyncerServer) StartSync(context.Context, *StartSyncRequest) (*StartSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSync not implemented")
}
func (UnimplementedRaySyncerServer) Update(context.Context, *RaySyncMessages) (*DummyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRaySyncerServer) LongPolling(context.Context, *DummyRequest) (*RaySyncMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LongPolling not implemented")
}

// UnsafeRaySyncerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaySyncerServer will
// result in compilation errors.
type UnsafeRaySyncerServer interface {
	mustEmbedUnimplementedRaySyncerServer()
}

func RegisterRaySyncerServer(s grpc.ServiceRegistrar, srv RaySyncerServer) {
	s.RegisterService(&RaySyncer_ServiceDesc, srv)
}

func _RaySyncer_StartSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaySyncerServer).StartSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.syncer.RaySyncer/StartSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaySyncerServer).StartSync(ctx, req.(*StartSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaySyncer_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaySyncMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaySyncerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.syncer.RaySyncer/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaySyncerServer).Update(ctx, req.(*RaySyncMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaySyncer_LongPolling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaySyncerServer).LongPolling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.syncer.RaySyncer/LongPolling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaySyncerServer).LongPolling(ctx, req.(*DummyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RaySyncer_ServiceDesc is the grpc.ServiceDesc for RaySyncer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaySyncer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ray.rpc.syncer.RaySyncer",
	HandlerType: (*RaySyncerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartSync",
			Handler:    _RaySyncer_StartSync_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RaySyncer_Update_Handler,
		},
		{
			MethodName: "LongPolling",
			Handler:    _RaySyncer_LongPolling_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/ray/protobuf/ray_syncer.proto",
}
