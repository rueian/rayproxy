// Copyright 2017 The Ray Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: src/ray/protobuf/core_worker.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ObjectPlasmaLocationUpdate int32

const (
	// Object is added to plasma store.
	ObjectPlasmaLocationUpdate_ADDED ObjectPlasmaLocationUpdate = 0
	// Object is removed from plasma store.
	ObjectPlasmaLocationUpdate_REMOVED ObjectPlasmaLocationUpdate = 1
)

// Enum value maps for ObjectPlasmaLocationUpdate.
var (
	ObjectPlasmaLocationUpdate_name = map[int32]string{
		0: "ADDED",
		1: "REMOVED",
	}
	ObjectPlasmaLocationUpdate_value = map[string]int32{
		"ADDED":   0,
		"REMOVED": 1,
	}
)

func (x ObjectPlasmaLocationUpdate) Enum() *ObjectPlasmaLocationUpdate {
	p := new(ObjectPlasmaLocationUpdate)
	*p = x
	return p
}

func (x ObjectPlasmaLocationUpdate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectPlasmaLocationUpdate) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_core_worker_proto_enumTypes[0].Descriptor()
}

func (ObjectPlasmaLocationUpdate) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_core_worker_proto_enumTypes[0]
}

func (x ObjectPlasmaLocationUpdate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectPlasmaLocationUpdate.Descriptor instead.
func (ObjectPlasmaLocationUpdate) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{0}
}

type GetObjectStatusReply_ObjectStatus int32

const (
	GetObjectStatusReply_CREATED      GetObjectStatusReply_ObjectStatus = 0
	GetObjectStatusReply_OUT_OF_SCOPE GetObjectStatusReply_ObjectStatus = 1
	GetObjectStatusReply_FREED        GetObjectStatusReply_ObjectStatus = 2
)

// Enum value maps for GetObjectStatusReply_ObjectStatus.
var (
	GetObjectStatusReply_ObjectStatus_name = map[int32]string{
		0: "CREATED",
		1: "OUT_OF_SCOPE",
		2: "FREED",
	}
	GetObjectStatusReply_ObjectStatus_value = map[string]int32{
		"CREATED":      0,
		"OUT_OF_SCOPE": 1,
		"FREED":        2,
	}
)

func (x GetObjectStatusReply_ObjectStatus) Enum() *GetObjectStatusReply_ObjectStatus {
	p := new(GetObjectStatusReply_ObjectStatus)
	*p = x
	return p
}

func (x GetObjectStatusReply_ObjectStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetObjectStatusReply_ObjectStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_core_worker_proto_enumTypes[1].Descriptor()
}

func (GetObjectStatusReply_ObjectStatus) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_core_worker_proto_enumTypes[1]
}

func (x GetObjectStatusReply_ObjectStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetObjectStatusReply_ObjectStatus.Descriptor instead.
func (GetObjectStatusReply_ObjectStatus) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{9, 0}
}

type ActiveObjectIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectIds [][]byte `protobuf:"bytes,1,rep,name=object_ids,json=objectIds,proto3" json:"object_ids,omitempty"`
}

func (x *ActiveObjectIDs) Reset() {
	*x = ActiveObjectIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveObjectIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveObjectIDs) ProtoMessage() {}

func (x *ActiveObjectIDs) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveObjectIDs.ProtoReflect.Descriptor instead.
func (*ActiveObjectIDs) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{0}
}

func (x *ActiveObjectIDs) GetObjectIds() [][]byte {
	if x != nil {
		return x.ObjectIds
	}
	return nil
}

// Persistent state of an ActorHandle.
type ActorHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the actor.
	ActorId []byte `protobuf:"bytes,1,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	// The task or actor ID of the actor's owner.
	OwnerId []byte `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	// The address of the actor's owner.
	OwnerAddress *Address `protobuf:"bytes,3,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	// ID of the job that created the actor (it is possible that the handle
	// exists on a job with a different job ID).
	CreationJobId []byte `protobuf:"bytes,4,opt,name=creation_job_id,json=creationJobId,proto3" json:"creation_job_id,omitempty"`
	// Language of the actor.
	ActorLanguage Language `protobuf:"varint,5,opt,name=actor_language,json=actorLanguage,proto3,enum=ray.rpc.Language" json:"actor_language,omitempty"`
	// Function descriptor of actor creation task.
	ActorCreationTaskFunctionDescriptor *FunctionDescriptor `protobuf:"bytes,6,opt,name=actor_creation_task_function_descriptor,json=actorCreationTaskFunctionDescriptor,proto3" json:"actor_creation_task_function_descriptor,omitempty"`
	// The unique id of the dummy object returned by the actor creation task.
	// It's used as a dependency for the first task.
	// TODO: Remove this once scheduling is done by task counter only.
	ActorCursor []byte `protobuf:"bytes,7,opt,name=actor_cursor,json=actorCursor,proto3" json:"actor_cursor,omitempty"`
	// An extension field that is used for storing app-language-specific data.
	ExtensionData []byte `protobuf:"bytes,8,opt,name=extension_data,json=extensionData,proto3" json:"extension_data,omitempty"`
	// How many times tasks may be retried on this actor if the actor fails.
	MaxTaskRetries int64 `protobuf:"varint,9,opt,name=max_task_retries,json=maxTaskRetries,proto3" json:"max_task_retries,omitempty"`
	// The name of the actor.
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// The namespace that this actor belongs to.
	RayNamespace string `protobuf:"bytes,11,opt,name=ray_namespace,json=rayNamespace,proto3" json:"ray_namespace,omitempty"`
	// Whether the actor supports out of order execution.
	ExecuteOutOfOrder bool `protobuf:"varint,12,opt,name=execute_out_of_order,json=executeOutOfOrder,proto3" json:"execute_out_of_order,omitempty"`
	// The max number of pending actor calls.
	MaxPendingCalls int32 `protobuf:"varint,13,opt,name=max_pending_calls,json=maxPendingCalls,proto3" json:"max_pending_calls,omitempty"`
}

func (x *ActorHandle) Reset() {
	*x = ActorHandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorHandle) ProtoMessage() {}

func (x *ActorHandle) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorHandle.ProtoReflect.Descriptor instead.
func (*ActorHandle) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{1}
}

func (x *ActorHandle) GetActorId() []byte {
	if x != nil {
		return x.ActorId
	}
	return nil
}

func (x *ActorHandle) GetOwnerId() []byte {
	if x != nil {
		return x.OwnerId
	}
	return nil
}

func (x *ActorHandle) GetOwnerAddress() *Address {
	if x != nil {
		return x.OwnerAddress
	}
	return nil
}

func (x *ActorHandle) GetCreationJobId() []byte {
	if x != nil {
		return x.CreationJobId
	}
	return nil
}

func (x *ActorHandle) GetActorLanguage() Language {
	if x != nil {
		return x.ActorLanguage
	}
	return Language_PYTHON
}

func (x *ActorHandle) GetActorCreationTaskFunctionDescriptor() *FunctionDescriptor {
	if x != nil {
		return x.ActorCreationTaskFunctionDescriptor
	}
	return nil
}

func (x *ActorHandle) GetActorCursor() []byte {
	if x != nil {
		return x.ActorCursor
	}
	return nil
}

func (x *ActorHandle) GetExtensionData() []byte {
	if x != nil {
		return x.ExtensionData
	}
	return nil
}

func (x *ActorHandle) GetMaxTaskRetries() int64 {
	if x != nil {
		return x.MaxTaskRetries
	}
	return 0
}

func (x *ActorHandle) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActorHandle) GetRayNamespace() string {
	if x != nil {
		return x.RayNamespace
	}
	return ""
}

func (x *ActorHandle) GetExecuteOutOfOrder() bool {
	if x != nil {
		return x.ExecuteOutOfOrder
	}
	return false
}

func (x *ActorHandle) GetMaxPendingCalls() int32 {
	if x != nil {
		return x.MaxPendingCalls
	}
	return 0
}

type ReturnObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Object ID.
	ObjectId []byte `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// If set, indicates the data is in plasma instead of inline. This
	// means that data and metadata will be empty.
	InPlasma bool `protobuf:"varint,2,opt,name=in_plasma,json=inPlasma,proto3" json:"in_plasma,omitempty"`
	// Data of the object.
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// Metadata of the object.
	Metadata []byte `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// ObjectIDs that were nested in data. This is only set for inlined objects.
	NestedInlinedRefs []*ObjectReference `protobuf:"bytes,5,rep,name=nested_inlined_refs,json=nestedInlinedRefs,proto3" json:"nested_inlined_refs,omitempty"`
	// Size of this object.
	Size int64 `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ReturnObject) Reset() {
	*x = ReturnObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnObject) ProtoMessage() {}

func (x *ReturnObject) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnObject.ProtoReflect.Descriptor instead.
func (*ReturnObject) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{2}
}

func (x *ReturnObject) GetObjectId() []byte {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *ReturnObject) GetInPlasma() bool {
	if x != nil {
		return x.InPlasma
	}
	return false
}

func (x *ReturnObject) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReturnObject) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ReturnObject) GetNestedInlinedRefs() []*ObjectReference {
	if x != nil {
		return x.NestedInlinedRefs
	}
	return nil
}

func (x *ReturnObject) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type PushTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the worker this message is intended for.
	IntendedWorkerId []byte `protobuf:"bytes,1,opt,name=intended_worker_id,json=intendedWorkerId,proto3" json:"intended_worker_id,omitempty"`
	// The task to be pushed.
	TaskSpec *TaskSpec `protobuf:"bytes,2,opt,name=task_spec,json=taskSpec,proto3" json:"task_spec,omitempty"`
	// The sequence number of the task for this client. This must increase
	// sequentially starting from zero for each actor handle. The server
	// will guarantee tasks execute in this sequence, waiting for any
	// out-of-order request messages to arrive as necessary.
	// If set to -1, ordering is disabled and the task executes immediately.
	SequenceNumber int64 `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// The max sequence number the client has processed responses for. This
	// is a performance optimization that allows the client to tell the server
	// to cancel any PushTaskRequests with seqno <= this value, rather than
	// waiting for the server to time out waiting for missing messages.
	ClientProcessedUpTo int64 `protobuf:"varint,4,opt,name=client_processed_up_to,json=clientProcessedUpTo,proto3" json:"client_processed_up_to,omitempty"`
	// Resource mapping ids assigned to the worker executing the task.
	ResourceMapping []*ResourceMapEntry `protobuf:"bytes,5,rep,name=resource_mapping,json=resourceMapping,proto3" json:"resource_mapping,omitempty"`
}

func (x *PushTaskRequest) Reset() {
	*x = PushTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushTaskRequest) ProtoMessage() {}

func (x *PushTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushTaskRequest.ProtoReflect.Descriptor instead.
func (*PushTaskRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{3}
}

func (x *PushTaskRequest) GetIntendedWorkerId() []byte {
	if x != nil {
		return x.IntendedWorkerId
	}
	return nil
}

func (x *PushTaskRequest) GetTaskSpec() *TaskSpec {
	if x != nil {
		return x.TaskSpec
	}
	return nil
}

func (x *PushTaskRequest) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *PushTaskRequest) GetClientProcessedUpTo() int64 {
	if x != nil {
		return x.ClientProcessedUpTo
	}
	return 0
}

func (x *PushTaskRequest) GetResourceMapping() []*ResourceMapEntry {
	if x != nil {
		return x.ResourceMapping
	}
	return nil
}

type PushTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The returned objects.
	ReturnObjects []*ReturnObject `protobuf:"bytes,1,rep,name=return_objects,json=returnObjects,proto3" json:"return_objects,omitempty"`
	// Set to true if the worker will be exiting.
	WorkerExiting bool `protobuf:"varint,3,opt,name=worker_exiting,json=workerExiting,proto3" json:"worker_exiting,omitempty"`
	// The references that the worker borrowed during the task execution. A
	// borrower is a process that is currently using the object ID, in one of 3
	// ways:
	// 1. Has an ObjectID copy in Python.
	// 2. Has submitted a task that depends on the object and that is still
	// pending.
	// 3. Owns another object that is in scope and whose value contains the
	// ObjectID.
	// This list includes the reference counts for any IDs that were passed to
	// the worker in the task spec as an argument by reference, or an ObjectID
	// that was serialized in an inlined argument. It also includes reference
	// counts for any IDs that were nested inside these objects that the worker
	// may now be borrowing. The reference counts also include any new borrowers
	// that the worker created by passing a borrowed ID into a nested task.
	BorrowedRefs []*ObjectReferenceCount `protobuf:"bytes,4,rep,name=borrowed_refs,json=borrowedRefs,proto3" json:"borrowed_refs,omitempty"`
	// Whether the result contains an application-level error (exception).
	IsApplicationLevelError bool `protobuf:"varint,5,opt,name=is_application_level_error,json=isApplicationLevelError,proto3" json:"is_application_level_error,omitempty"`
}

func (x *PushTaskReply) Reset() {
	*x = PushTaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushTaskReply) ProtoMessage() {}

func (x *PushTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushTaskReply.ProtoReflect.Descriptor instead.
func (*PushTaskReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{4}
}

func (x *PushTaskReply) GetReturnObjects() []*ReturnObject {
	if x != nil {
		return x.ReturnObjects
	}
	return nil
}

func (x *PushTaskReply) GetWorkerExiting() bool {
	if x != nil {
		return x.WorkerExiting
	}
	return false
}

func (x *PushTaskReply) GetBorrowedRefs() []*ObjectReferenceCount {
	if x != nil {
		return x.BorrowedRefs
	}
	return nil
}

func (x *PushTaskReply) GetIsApplicationLevelError() bool {
	if x != nil {
		return x.IsApplicationLevelError
	}
	return false
}

type DirectActorCallArgWaitCompleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the worker this message is intended for.
	IntendedWorkerId []byte `protobuf:"bytes,1,opt,name=intended_worker_id,json=intendedWorkerId,proto3" json:"intended_worker_id,omitempty"`
	// Id used to uniquely identify this request. This is sent back to the core
	// worker to notify the wait has completed.
	Tag int64 `protobuf:"varint,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *DirectActorCallArgWaitCompleteRequest) Reset() {
	*x = DirectActorCallArgWaitCompleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectActorCallArgWaitCompleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectActorCallArgWaitCompleteRequest) ProtoMessage() {}

func (x *DirectActorCallArgWaitCompleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectActorCallArgWaitCompleteRequest.ProtoReflect.Descriptor instead.
func (*DirectActorCallArgWaitCompleteRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{5}
}

func (x *DirectActorCallArgWaitCompleteRequest) GetIntendedWorkerId() []byte {
	if x != nil {
		return x.IntendedWorkerId
	}
	return nil
}

func (x *DirectActorCallArgWaitCompleteRequest) GetTag() int64 {
	if x != nil {
		return x.Tag
	}
	return 0
}

type DirectActorCallArgWaitCompleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DirectActorCallArgWaitCompleteReply) Reset() {
	*x = DirectActorCallArgWaitCompleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectActorCallArgWaitCompleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectActorCallArgWaitCompleteReply) ProtoMessage() {}

func (x *DirectActorCallArgWaitCompleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectActorCallArgWaitCompleteReply.ProtoReflect.Descriptor instead.
func (*DirectActorCallArgWaitCompleteReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{6}
}

type GetObjectStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the worker that owns this object. This is also
	// the ID of the worker that this message is intended for.
	OwnerWorkerId []byte `protobuf:"bytes,1,opt,name=owner_worker_id,json=ownerWorkerId,proto3" json:"owner_worker_id,omitempty"`
	// Wait for this object's status.
	ObjectId []byte `protobuf:"bytes,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (x *GetObjectStatusRequest) Reset() {
	*x = GetObjectStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObjectStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectStatusRequest) ProtoMessage() {}

func (x *GetObjectStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectStatusRequest.ProtoReflect.Descriptor instead.
func (*GetObjectStatusRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{7}
}

func (x *GetObjectStatusRequest) GetOwnerWorkerId() []byte {
	if x != nil {
		return x.OwnerWorkerId
	}
	return nil
}

func (x *GetObjectStatusRequest) GetObjectId() []byte {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

type RayObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data of the object.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Metadata of the object.
	Metadata []byte `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// ObjectRefs that were nested in this object.
	NestedInlinedRefs []*ObjectReference `protobuf:"bytes,3,rep,name=nested_inlined_refs,json=nestedInlinedRefs,proto3" json:"nested_inlined_refs,omitempty"`
}

func (x *RayObject) Reset() {
	*x = RayObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RayObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RayObject) ProtoMessage() {}

func (x *RayObject) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RayObject.ProtoReflect.Descriptor instead.
func (*RayObject) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{8}
}

func (x *RayObject) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RayObject) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RayObject) GetNestedInlinedRefs() []*ObjectReference {
	if x != nil {
		return x.NestedInlinedRefs
	}
	return nil
}

type GetObjectStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status GetObjectStatusReply_ObjectStatus `protobuf:"varint,1,opt,name=status,proto3,enum=ray.rpc.GetObjectStatusReply_ObjectStatus" json:"status,omitempty"`
	// The Ray object: either a concrete value, an in-Plasma indicator, or an
	// exception.
	Object *RayObject `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	// This object's locations.
	NodeIds [][]byte `protobuf:"bytes,3,rep,name=node_ids,json=nodeIds,proto3" json:"node_ids,omitempty"`
	// The size of the object in bytes.
	ObjectSize uint64 `protobuf:"varint,4,opt,name=object_size,json=objectSize,proto3" json:"object_size,omitempty"`
}

func (x *GetObjectStatusReply) Reset() {
	*x = GetObjectStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObjectStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectStatusReply) ProtoMessage() {}

func (x *GetObjectStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectStatusReply.ProtoReflect.Descriptor instead.
func (*GetObjectStatusReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{9}
}

func (x *GetObjectStatusReply) GetStatus() GetObjectStatusReply_ObjectStatus {
	if x != nil {
		return x.Status
	}
	return GetObjectStatusReply_CREATED
}

func (x *GetObjectStatusReply) GetObject() *RayObject {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *GetObjectStatusReply) GetNodeIds() [][]byte {
	if x != nil {
		return x.NodeIds
	}
	return nil
}

func (x *GetObjectStatusReply) GetObjectSize() uint64 {
	if x != nil {
		return x.ObjectSize
	}
	return 0
}

type WaitForActorOutOfScopeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the worker this message is intended for.
	IntendedWorkerId []byte `protobuf:"bytes,1,opt,name=intended_worker_id,json=intendedWorkerId,proto3" json:"intended_worker_id,omitempty"`
	// ActorID of the actor in scope.
	ActorId []byte `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
}

func (x *WaitForActorOutOfScopeRequest) Reset() {
	*x = WaitForActorOutOfScopeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForActorOutOfScopeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForActorOutOfScopeRequest) ProtoMessage() {}

func (x *WaitForActorOutOfScopeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForActorOutOfScopeRequest.ProtoReflect.Descriptor instead.
func (*WaitForActorOutOfScopeRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{10}
}

func (x *WaitForActorOutOfScopeRequest) GetIntendedWorkerId() []byte {
	if x != nil {
		return x.IntendedWorkerId
	}
	return nil
}

func (x *WaitForActorOutOfScopeRequest) GetActorId() []byte {
	if x != nil {
		return x.ActorId
	}
	return nil
}

type WaitForActorOutOfScopeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WaitForActorOutOfScopeReply) Reset() {
	*x = WaitForActorOutOfScopeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForActorOutOfScopeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForActorOutOfScopeReply) ProtoMessage() {}

func (x *WaitForActorOutOfScopeReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForActorOutOfScopeReply.ProtoReflect.Descriptor instead.
func (*WaitForActorOutOfScopeReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{11}
}

type UpdateObjectLocationBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntendedWorkerId      []byte                  `protobuf:"bytes,1,opt,name=intended_worker_id,json=intendedWorkerId,proto3" json:"intended_worker_id,omitempty"`
	NodeId                []byte                  `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	ObjectLocationUpdates []*ObjectLocationUpdate `protobuf:"bytes,3,rep,name=object_location_updates,json=objectLocationUpdates,proto3" json:"object_location_updates,omitempty"`
}

func (x *UpdateObjectLocationBatchRequest) Reset() {
	*x = UpdateObjectLocationBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateObjectLocationBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateObjectLocationBatchRequest) ProtoMessage() {}

func (x *UpdateObjectLocationBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateObjectLocationBatchRequest.ProtoReflect.Descriptor instead.
func (*UpdateObjectLocationBatchRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateObjectLocationBatchRequest) GetIntendedWorkerId() []byte {
	if x != nil {
		return x.IntendedWorkerId
	}
	return nil
}

func (x *UpdateObjectLocationBatchRequest) GetNodeId() []byte {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *UpdateObjectLocationBatchRequest) GetObjectLocationUpdates() []*ObjectLocationUpdate {
	if x != nil {
		return x.ObjectLocationUpdates
	}
	return nil
}

type UpdateObjectLocationBatchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateObjectLocationBatchReply) Reset() {
	*x = UpdateObjectLocationBatchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateObjectLocationBatchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateObjectLocationBatchReply) ProtoMessage() {}

func (x *UpdateObjectLocationBatchReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateObjectLocationBatchReply.ProtoReflect.Descriptor instead.
func (*UpdateObjectLocationBatchReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{13}
}

type ObjectSpilledLocationUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For objects that have been spilled to external storage, the URL from which
	// they can be retrieved.
	SpilledUrl string `protobuf:"bytes,3,opt,name=spilled_url,json=spilledUrl,proto3" json:"spilled_url,omitempty"`
	// Whether the object is spilled to local storage or cloud storage.
	SpilledToLocalStorage bool `protobuf:"varint,4,opt,name=spilled_to_local_storage,json=spilledToLocalStorage,proto3" json:"spilled_to_local_storage,omitempty"`
}

func (x *ObjectSpilledLocationUpdate) Reset() {
	*x = ObjectSpilledLocationUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectSpilledLocationUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectSpilledLocationUpdate) ProtoMessage() {}

func (x *ObjectSpilledLocationUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectSpilledLocationUpdate.ProtoReflect.Descriptor instead.
func (*ObjectSpilledLocationUpdate) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{14}
}

func (x *ObjectSpilledLocationUpdate) GetSpilledUrl() string {
	if x != nil {
		return x.SpilledUrl
	}
	return ""
}

func (x *ObjectSpilledLocationUpdate) GetSpilledToLocalStorage() bool {
	if x != nil {
		return x.SpilledToLocalStorage
	}
	return false
}

type ObjectLocationUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId []byte `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// When it's set, it indicates whether the object is added or removed from plasma store.
	PlasmaLocationUpdate *ObjectPlasmaLocationUpdate `protobuf:"varint,2,opt,name=plasma_location_update,json=plasmaLocationUpdate,proto3,enum=ray.rpc.ObjectPlasmaLocationUpdate,oneof" json:"plasma_location_update,omitempty"`
	// When it's set, it contains where the object is spilled to.
	SpilledLocationUpdate *ObjectSpilledLocationUpdate `protobuf:"bytes,3,opt,name=spilled_location_update,json=spilledLocationUpdate,proto3,oneof" json:"spilled_location_update,omitempty"`
}

func (x *ObjectLocationUpdate) Reset() {
	*x = ObjectLocationUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectLocationUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectLocationUpdate) ProtoMessage() {}

func (x *ObjectLocationUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectLocationUpdate.ProtoReflect.Descriptor instead.
func (*ObjectLocationUpdate) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{15}
}

func (x *ObjectLocationUpdate) GetObjectId() []byte {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *ObjectLocationUpdate) GetPlasmaLocationUpdate() ObjectPlasmaLocationUpdate {
	if x != nil && x.PlasmaLocationUpdate != nil {
		return *x.PlasmaLocationUpdate
	}
	return ObjectPlasmaLocationUpdate_ADDED
}

func (x *ObjectLocationUpdate) GetSpilledLocationUpdate() *ObjectSpilledLocationUpdate {
	if x != nil {
		return x.SpilledLocationUpdate
	}
	return nil
}

type GetObjectLocationsOwnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectLocationRequest *WorkerObjectLocationsSubMessage `protobuf:"bytes,1,opt,name=object_location_request,json=objectLocationRequest,proto3" json:"object_location_request,omitempty"`
}

func (x *GetObjectLocationsOwnerRequest) Reset() {
	*x = GetObjectLocationsOwnerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObjectLocationsOwnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectLocationsOwnerRequest) ProtoMessage() {}

func (x *GetObjectLocationsOwnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectLocationsOwnerRequest.ProtoReflect.Descriptor instead.
func (*GetObjectLocationsOwnerRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{16}
}

func (x *GetObjectLocationsOwnerRequest) GetObjectLocationRequest() *WorkerObjectLocationsSubMessage {
	if x != nil {
		return x.ObjectLocationRequest
	}
	return nil
}

type GetObjectLocationsOwnerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectLocationInfo *WorkerObjectLocationsPubMessage `protobuf:"bytes,1,opt,name=object_location_info,json=objectLocationInfo,proto3" json:"object_location_info,omitempty"`
}

func (x *GetObjectLocationsOwnerReply) Reset() {
	*x = GetObjectLocationsOwnerReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObjectLocationsOwnerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectLocationsOwnerReply) ProtoMessage() {}

func (x *GetObjectLocationsOwnerReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectLocationsOwnerReply.ProtoReflect.Descriptor instead.
func (*GetObjectLocationsOwnerReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{17}
}

func (x *GetObjectLocationsOwnerReply) GetObjectLocationInfo() *WorkerObjectLocationsPubMessage {
	if x != nil {
		return x.ObjectLocationInfo
	}
	return nil
}

type KillActorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the actor that is intended to be killed.
	IntendedActorId []byte `protobuf:"bytes,1,opt,name=intended_actor_id,json=intendedActorId,proto3" json:"intended_actor_id,omitempty"`
	// Whether to force kill the actor.
	ForceKill bool `protobuf:"varint,2,opt,name=force_kill,json=forceKill,proto3" json:"force_kill,omitempty"`
	// If set to true, the killed actor will not be restarted anymore.
	NoRestart bool `protobuf:"varint,3,opt,name=no_restart,json=noRestart,proto3" json:"no_restart,omitempty"`
}

func (x *KillActorRequest) Reset() {
	*x = KillActorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KillActorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillActorRequest) ProtoMessage() {}

func (x *KillActorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillActorRequest.ProtoReflect.Descriptor instead.
func (*KillActorRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{18}
}

func (x *KillActorRequest) GetIntendedActorId() []byte {
	if x != nil {
		return x.IntendedActorId
	}
	return nil
}

func (x *KillActorRequest) GetForceKill() bool {
	if x != nil {
		return x.ForceKill
	}
	return false
}

func (x *KillActorRequest) GetNoRestart() bool {
	if x != nil {
		return x.NoRestart
	}
	return false
}

type KillActorReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KillActorReply) Reset() {
	*x = KillActorReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KillActorReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillActorReply) ProtoMessage() {}

func (x *KillActorReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillActorReply.ProtoReflect.Descriptor instead.
func (*KillActorReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{19}
}

type CancelTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of task that should be killed.
	IntendedTaskId []byte `protobuf:"bytes,1,opt,name=intended_task_id,json=intendedTaskId,proto3" json:"intended_task_id,omitempty"`
	// Whether to kill the worker.
	ForceKill bool `protobuf:"varint,2,opt,name=force_kill,json=forceKill,proto3" json:"force_kill,omitempty"`
	// Whether to recursively cancel tasks.
	Recursive bool `protobuf:"varint,3,opt,name=recursive,proto3" json:"recursive,omitempty"`
}

func (x *CancelTaskRequest) Reset() {
	*x = CancelTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTaskRequest) ProtoMessage() {}

func (x *CancelTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTaskRequest.ProtoReflect.Descriptor instead.
func (*CancelTaskRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{20}
}

func (x *CancelTaskRequest) GetIntendedTaskId() []byte {
	if x != nil {
		return x.IntendedTaskId
	}
	return nil
}

func (x *CancelTaskRequest) GetForceKill() bool {
	if x != nil {
		return x.ForceKill
	}
	return false
}

func (x *CancelTaskRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

type CancelTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the requested task is the currently running task.
	AttemptSucceeded bool `protobuf:"varint,1,opt,name=attempt_succeeded,json=attemptSucceeded,proto3" json:"attempt_succeeded,omitempty"`
}

func (x *CancelTaskReply) Reset() {
	*x = CancelTaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTaskReply) ProtoMessage() {}

func (x *CancelTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTaskReply.ProtoReflect.Descriptor instead.
func (*CancelTaskReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{21}
}

func (x *CancelTaskReply) GetAttemptSucceeded() bool {
	if x != nil {
		return x.AttemptSucceeded
	}
	return false
}

type RemoteCancelTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Object ID of the remote task that should be killed.
	RemoteObjectId []byte `protobuf:"bytes,1,opt,name=remote_object_id,json=remoteObjectId,proto3" json:"remote_object_id,omitempty"`
	// Whether to kill the worker.
	ForceKill bool `protobuf:"varint,2,opt,name=force_kill,json=forceKill,proto3" json:"force_kill,omitempty"`
	// Whether to recursively cancel tasks.
	Recursive bool `protobuf:"varint,3,opt,name=recursive,proto3" json:"recursive,omitempty"`
}

func (x *RemoteCancelTaskRequest) Reset() {
	*x = RemoteCancelTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteCancelTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteCancelTaskRequest) ProtoMessage() {}

func (x *RemoteCancelTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteCancelTaskRequest.ProtoReflect.Descriptor instead.
func (*RemoteCancelTaskRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{22}
}

func (x *RemoteCancelTaskRequest) GetRemoteObjectId() []byte {
	if x != nil {
		return x.RemoteObjectId
	}
	return nil
}

func (x *RemoteCancelTaskRequest) GetForceKill() bool {
	if x != nil {
		return x.ForceKill
	}
	return false
}

func (x *RemoteCancelTaskRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

type RemoteCancelTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoteCancelTaskReply) Reset() {
	*x = RemoteCancelTaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteCancelTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteCancelTaskReply) ProtoMessage() {}

func (x *RemoteCancelTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteCancelTaskReply.ProtoReflect.Descriptor instead.
func (*RemoteCancelTaskReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{23}
}

type GetCoreWorkerStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the worker this message is intended for.
	IntendedWorkerId []byte `protobuf:"bytes,1,opt,name=intended_worker_id,json=intendedWorkerId,proto3" json:"intended_worker_id,omitempty"`
	// Whether to include memory stats. This could be large since it includes
	// metadata for all live object references.
	IncludeMemoryInfo bool `protobuf:"varint,2,opt,name=include_memory_info,json=includeMemoryInfo,proto3" json:"include_memory_info,omitempty"`
	// Whether to include task information. This could be large since it
	// includes metadata for all live tasks.
	IncludeTaskInfo bool `protobuf:"varint,3,opt,name=include_task_info,json=includeTaskInfo,proto3" json:"include_task_info,omitempty"`
}

func (x *GetCoreWorkerStatsRequest) Reset() {
	*x = GetCoreWorkerStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoreWorkerStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoreWorkerStatsRequest) ProtoMessage() {}

func (x *GetCoreWorkerStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoreWorkerStatsRequest.ProtoReflect.Descriptor instead.
func (*GetCoreWorkerStatsRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{24}
}

func (x *GetCoreWorkerStatsRequest) GetIntendedWorkerId() []byte {
	if x != nil {
		return x.IntendedWorkerId
	}
	return nil
}

func (x *GetCoreWorkerStatsRequest) GetIncludeMemoryInfo() bool {
	if x != nil {
		return x.IncludeMemoryInfo
	}
	return false
}

func (x *GetCoreWorkerStatsRequest) GetIncludeTaskInfo() bool {
	if x != nil {
		return x.IncludeTaskInfo
	}
	return false
}

type GetCoreWorkerStatsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Debug information returned from the core worker.
	CoreWorkerStats *CoreWorkerStats `protobuf:"bytes,1,opt,name=core_worker_stats,json=coreWorkerStats,proto3" json:"core_worker_stats,omitempty"`
	// A list of task information of the current worker.
	TaskInfoEntries []*TaskInfoEntry `protobuf:"bytes,2,rep,name=task_info_entries,json=taskInfoEntries,proto3" json:"task_info_entries,omitempty"`
}

func (x *GetCoreWorkerStatsReply) Reset() {
	*x = GetCoreWorkerStatsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoreWorkerStatsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoreWorkerStatsReply) ProtoMessage() {}

func (x *GetCoreWorkerStatsReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoreWorkerStatsReply.ProtoReflect.Descriptor instead.
func (*GetCoreWorkerStatsReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{25}
}

func (x *GetCoreWorkerStatsReply) GetCoreWorkerStats() *CoreWorkerStats {
	if x != nil {
		return x.CoreWorkerStats
	}
	return nil
}

func (x *GetCoreWorkerStatsReply) GetTaskInfoEntries() []*TaskInfoEntry {
	if x != nil {
		return x.TaskInfoEntries
	}
	return nil
}

type LocalGCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether this is triggered by a global gc.
	TriggeredByGlobalGc bool `protobuf:"varint,1,opt,name=triggered_by_global_gc,json=triggeredByGlobalGc,proto3" json:"triggered_by_global_gc,omitempty"`
}

func (x *LocalGCRequest) Reset() {
	*x = LocalGCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalGCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalGCRequest) ProtoMessage() {}

func (x *LocalGCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalGCRequest.ProtoReflect.Descriptor instead.
func (*LocalGCRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{26}
}

func (x *LocalGCRequest) GetTriggeredByGlobalGc() bool {
	if x != nil {
		return x.TriggeredByGlobalGc
	}
	return false
}

type LocalGCReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LocalGCReply) Reset() {
	*x = LocalGCReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalGCReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalGCReply) ProtoMessage() {}

func (x *LocalGCReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalGCReply.ProtoReflect.Descriptor instead.
func (*LocalGCReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{27}
}

type PlasmaObjectReadyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId []byte `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (x *PlasmaObjectReadyRequest) Reset() {
	*x = PlasmaObjectReadyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlasmaObjectReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlasmaObjectReadyRequest) ProtoMessage() {}

func (x *PlasmaObjectReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlasmaObjectReadyRequest.ProtoReflect.Descriptor instead.
func (*PlasmaObjectReadyRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{28}
}

func (x *PlasmaObjectReadyRequest) GetObjectId() []byte {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

type PlasmaObjectReadyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlasmaObjectReadyReply) Reset() {
	*x = PlasmaObjectReadyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlasmaObjectReadyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlasmaObjectReadyReply) ProtoMessage() {}

func (x *PlasmaObjectReadyReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlasmaObjectReadyReply.ProtoReflect.Descriptor instead.
func (*PlasmaObjectReadyReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{29}
}

type SpillObjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectRefsToSpill []*ObjectReference `protobuf:"bytes,1,rep,name=object_refs_to_spill,json=objectRefsToSpill,proto3" json:"object_refs_to_spill,omitempty"`
}

func (x *SpillObjectsRequest) Reset() {
	*x = SpillObjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpillObjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpillObjectsRequest) ProtoMessage() {}

func (x *SpillObjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpillObjectsRequest.ProtoReflect.Descriptor instead.
func (*SpillObjectsRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{30}
}

func (x *SpillObjectsRequest) GetObjectRefsToSpill() []*ObjectReference {
	if x != nil {
		return x.ObjectRefsToSpill
	}
	return nil
}

type SpillObjectsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URLs of spilled objects.
	SpilledObjectsUrl []string `protobuf:"bytes,1,rep,name=spilled_objects_url,json=spilledObjectsUrl,proto3" json:"spilled_objects_url,omitempty"`
}

func (x *SpillObjectsReply) Reset() {
	*x = SpillObjectsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpillObjectsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpillObjectsReply) ProtoMessage() {}

func (x *SpillObjectsReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpillObjectsReply.ProtoReflect.Descriptor instead.
func (*SpillObjectsReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{31}
}

func (x *SpillObjectsReply) GetSpilledObjectsUrl() []string {
	if x != nil {
		return x.SpilledObjectsUrl
	}
	return nil
}

type RestoreSpilledObjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URLs of spilled objects.
	SpilledObjectsUrl []string `protobuf:"bytes,1,rep,name=spilled_objects_url,json=spilledObjectsUrl,proto3" json:"spilled_objects_url,omitempty"`
	// Object ids to restore. The order of object ids
	// must be the same as spilled_objects_url.
	ObjectIdsToRestore [][]byte `protobuf:"bytes,2,rep,name=object_ids_to_restore,json=objectIdsToRestore,proto3" json:"object_ids_to_restore,omitempty"`
}

func (x *RestoreSpilledObjectsRequest) Reset() {
	*x = RestoreSpilledObjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreSpilledObjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreSpilledObjectsRequest) ProtoMessage() {}

func (x *RestoreSpilledObjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreSpilledObjectsRequest.ProtoReflect.Descriptor instead.
func (*RestoreSpilledObjectsRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{32}
}

func (x *RestoreSpilledObjectsRequest) GetSpilledObjectsUrl() []string {
	if x != nil {
		return x.SpilledObjectsUrl
	}
	return nil
}

func (x *RestoreSpilledObjectsRequest) GetObjectIdsToRestore() [][]byte {
	if x != nil {
		return x.ObjectIdsToRestore
	}
	return nil
}

type RestoreSpilledObjectsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesRestoredTotal int64 `protobuf:"varint,1,opt,name=bytes_restored_total,json=bytesRestoredTotal,proto3" json:"bytes_restored_total,omitempty"`
}

func (x *RestoreSpilledObjectsReply) Reset() {
	*x = RestoreSpilledObjectsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreSpilledObjectsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreSpilledObjectsReply) ProtoMessage() {}

func (x *RestoreSpilledObjectsReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreSpilledObjectsReply.ProtoReflect.Descriptor instead.
func (*RestoreSpilledObjectsReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{33}
}

func (x *RestoreSpilledObjectsReply) GetBytesRestoredTotal() int64 {
	if x != nil {
		return x.BytesRestoredTotal
	}
	return 0
}

type DeleteSpilledObjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URLs of spilled objects.
	SpilledObjectsUrl []string `protobuf:"bytes,1,rep,name=spilled_objects_url,json=spilledObjectsUrl,proto3" json:"spilled_objects_url,omitempty"`
}

func (x *DeleteSpilledObjectsRequest) Reset() {
	*x = DeleteSpilledObjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSpilledObjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSpilledObjectsRequest) ProtoMessage() {}

func (x *DeleteSpilledObjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSpilledObjectsRequest.ProtoReflect.Descriptor instead.
func (*DeleteSpilledObjectsRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteSpilledObjectsRequest) GetSpilledObjectsUrl() []string {
	if x != nil {
		return x.SpilledObjectsUrl
	}
	return nil
}

type DeleteSpilledObjectsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSpilledObjectsReply) Reset() {
	*x = DeleteSpilledObjectsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSpilledObjectsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSpilledObjectsReply) ProtoMessage() {}

func (x *DeleteSpilledObjectsReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSpilledObjectsReply.ProtoReflect.Descriptor instead.
func (*DeleteSpilledObjectsReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{35}
}

type ExitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExitRequest) Reset() {
	*x = ExitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitRequest) ProtoMessage() {}

func (x *ExitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitRequest.ProtoReflect.Descriptor instead.
func (*ExitRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{36}
}

type ExitReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Whether or not exit succeeds. If the core worker owns any object, the request fails.
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ExitReply) Reset() {
	*x = ExitReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExitReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitReply) ProtoMessage() {}

func (x *ExitReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitReply.ProtoReflect.Descriptor instead.
func (*ExitReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{37}
}

func (x *ExitReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type AssignObjectOwnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of added object.
	ObjectId []byte `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// The size of the object in bytes.
	ObjectSize uint64 `protobuf:"varint,2,opt,name=object_size,json=objectSize,proto3" json:"object_size,omitempty"`
	// The IDs of contained objects.
	ContainedObjectIds [][]byte `protobuf:"bytes,3,rep,name=contained_object_ids,json=containedObjectIds,proto3" json:"contained_object_ids,omitempty"`
	// The borrower address.
	BorrowerAddress *Address `protobuf:"bytes,4,opt,name=borrower_address,json=borrowerAddress,proto3" json:"borrower_address,omitempty"`
	// Description of the call site where the reference was created.
	CallSite string `protobuf:"bytes,5,opt,name=call_site,json=callSite,proto3" json:"call_site,omitempty"`
}

func (x *AssignObjectOwnerRequest) Reset() {
	*x = AssignObjectOwnerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignObjectOwnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignObjectOwnerRequest) ProtoMessage() {}

func (x *AssignObjectOwnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignObjectOwnerRequest.ProtoReflect.Descriptor instead.
func (*AssignObjectOwnerRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{38}
}

func (x *AssignObjectOwnerRequest) GetObjectId() []byte {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *AssignObjectOwnerRequest) GetObjectSize() uint64 {
	if x != nil {
		return x.ObjectSize
	}
	return 0
}

func (x *AssignObjectOwnerRequest) GetContainedObjectIds() [][]byte {
	if x != nil {
		return x.ContainedObjectIds
	}
	return nil
}

func (x *AssignObjectOwnerRequest) GetBorrowerAddress() *Address {
	if x != nil {
		return x.BorrowerAddress
	}
	return nil
}

func (x *AssignObjectOwnerRequest) GetCallSite() string {
	if x != nil {
		return x.CallSite
	}
	return ""
}

type AssignObjectOwnerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AssignObjectOwnerReply) Reset() {
	*x = AssignObjectOwnerReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignObjectOwnerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignObjectOwnerReply) ProtoMessage() {}

func (x *AssignObjectOwnerReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_core_worker_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignObjectOwnerReply.ProtoReflect.Descriptor instead.
func (*AssignObjectOwnerReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_core_worker_proto_rawDescGZIP(), []int{39}
}

var File_src_ray_protobuf_core_worker_proto protoreflect.FileDescriptor

var file_src_ray_protobuf_core_worker_proto_rawDesc = []byte{
	0x0a, 0x22, 0x73, 0x72, 0x63, 0x2f, 0x72, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x1a, 0x1d, 0x73,
	0x72, 0x63, 0x2f, 0x72, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x73, 0x72,
	0x63, 0x2f, 0x72, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70,
	0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x30, 0x0a, 0x0f, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x22, 0xd9, 0x04,
	0x0a, 0x0b, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x71, 0x0a, 0x27,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x23, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x14,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a,
	0x11, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x0c, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x70, 0x6c,
	0x61, 0x73, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x50, 0x6c,
	0x61, 0x73, 0x6d, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x13, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x66, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x22, 0x93, 0x02, 0x0a, 0x0f, 0x50, 0x75, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x33, 0x0a,
	0x16, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x55, 0x70,
	0x54, 0x6f, 0x12, 0x44, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0xf5, 0x01, 0x0a, 0x0d, 0x50, 0x75, 0x73,
	0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3c, 0x0a, 0x0e, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x45, 0x78, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x42, 0x0a, 0x0d, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x64, 0x52,
	0x65, 0x66, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x67, 0x0a, 0x25, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x43,
	0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x57, 0x61, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x25, 0x0a, 0x23, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x57,
	0x61, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x5d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22,
	0x85, 0x01, 0x0a, 0x09, 0x52, 0x61, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a,
	0x13, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x66, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x64, 0x52, 0x65, 0x66, 0x73, 0x22, 0xfc, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x61, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x38, 0x0a, 0x0c,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x55, 0x54,
	0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46,
	0x52, 0x45, 0x45, 0x44, 0x10, 0x02, 0x22, 0x68, 0x0a, 0x1d, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f,
	0x72, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x22, 0x1d, 0x0a, 0x1b, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x4f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0xc0, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x17, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x15, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x22, 0x20, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x77, 0x0a, 0x1b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x70,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x55, 0x72, 0x6c, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f,
	0x74, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x54,
	0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0xad, 0x02,
	0x0a, 0x14, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x5e, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x73, 0x6d, 0x61, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x73, 0x6d, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x14, 0x70, 0x6c, 0x61, 0x73,
	0x6d, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x61, 0x0a, 0x17, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x01, 0x52, 0x15, 0x73, 0x70,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x70, 0x6c, 0x61, 0x73, 0x6d,
	0x61, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x82, 0x01,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x60, 0x0a, 0x17, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x15, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x7a, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x5a, 0x0a, 0x14, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x50, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x12, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x7c,
	0x0a, 0x10, 0x4b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x6e, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x22, 0x10, 0x0a, 0x0e,
	0x4b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x7a,
	0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x22, 0x3e, 0x0a, 0x0f, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a,
	0x11, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x17, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x22, 0x17, 0x0a,
	0x15, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xa5, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x72, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa3,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x44, 0x0a, 0x11, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x6f, 0x72, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x0f, 0x63, 0x6f, 0x72, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x42, 0x0a, 0x11, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x22, 0x45, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x43, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x67, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65,
	0x64, 0x42, 0x79, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x47, 0x63, 0x22, 0x0e, 0x0a, 0x0c, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x47, 0x43, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x37, 0x0a, 0x18, 0x50,
	0x6c, 0x61, 0x73, 0x6d, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x73, 0x6d, 0x61, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x60,
	0x0a, 0x13, 0x53, 0x70, 0x69, 0x6c, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x14, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x72, 0x65, 0x66, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x73, 0x54, 0x6f, 0x53, 0x70, 0x69, 0x6c, 0x6c,
	0x22, 0x43, 0x0a, 0x11, 0x53, 0x70, 0x69, 0x6c, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x11, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x55, 0x72, 0x6c, 0x22, 0x81, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x53, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x11, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x31, 0x0a, 0x15, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73,
	0x54, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x4e, 0x0a, 0x1a, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x53, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4d, 0x0a, 0x1b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x70, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x55, 0x72, 0x6c, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x0d, 0x0a, 0x0b, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x25, 0x0a, 0x09, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xe4, 0x01, 0x0a, 0x18,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x10, 0x62, 0x6f, 0x72, 0x72,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69,
	0x74, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2a, 0x34, 0x0a, 0x1a,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x73, 0x6d, 0x61, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x44,
	0x44, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44,
	0x10, 0x01, 0x32, 0x84, 0x0d, 0x0a, 0x11, 0x43, 0x6f, 0x72, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x50, 0x75, 0x73, 0x68,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x75, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x7e, 0x0a, 0x1e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x57, 0x61, 0x69, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x61,
	0x6c, 0x6c, 0x41, 0x72, 0x67, 0x57, 0x61, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x61,
	0x6c, 0x6c, 0x41, 0x72, 0x67, 0x57, 0x61, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x51, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x66, 0x0a, 0x16, 0x57, 0x61, 0x69,
	0x74, 0x46, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x26, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x61,
	0x69, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x57, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x4c, 0x6f, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x4c, 0x6f, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x4c, 0x6f, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5a, 0x0a, 0x12, 0x50, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x22, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x62, 0x73, 0x75,
	0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x75, 0x62, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6f, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x29, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x69, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x27, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x09, 0x4b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x19, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x1a, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x54, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x20, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5a, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x72, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x39, 0x0a, 0x07, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x47, 0x43, 0x12, 0x17, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x43, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x0c, 0x53, 0x70, 0x69, 0x6c, 0x6c, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x70, 0x69, 0x6c, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x70, 0x69,
	0x6c, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x63,
	0x0a, 0x15, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x60, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x70, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x70, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x57, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x73, 0x6d, 0x61, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x21, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x73, 0x6d, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x73, 0x6d, 0x61, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x30,
	0x0a, 0x04, 0x45, 0x78, 0x69, 0x74, 0x12, 0x14, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x57, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x8b, 0x01, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x42, 0x0f, 0x43, 0x6f, 0x72, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x75, 0x65, 0x69, 0x61, 0x6e, 0x2f,
	0x72, 0x61, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x72, 0x61, 0x79,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0xf8, 0x01, 0x01, 0xa2, 0x02, 0x03, 0x52,
	0x52, 0x58, 0xaa, 0x02, 0x07, 0x52, 0x61, 0x79, 0x2e, 0x52, 0x70, 0x63, 0xca, 0x02, 0x07, 0x52,
	0x61, 0x79, 0x5c, 0x52, 0x70, 0x63, 0xe2, 0x02, 0x13, 0x52, 0x61, 0x79, 0x5c, 0x52, 0x70, 0x63,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x08, 0x52,
	0x61, 0x79, 0x3a, 0x3a, 0x52, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_src_ray_protobuf_core_worker_proto_rawDescOnce sync.Once
	file_src_ray_protobuf_core_worker_proto_rawDescData = file_src_ray_protobuf_core_worker_proto_rawDesc
)

func file_src_ray_protobuf_core_worker_proto_rawDescGZIP() []byte {
	file_src_ray_protobuf_core_worker_proto_rawDescOnce.Do(func() {
		file_src_ray_protobuf_core_worker_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_ray_protobuf_core_worker_proto_rawDescData)
	})
	return file_src_ray_protobuf_core_worker_proto_rawDescData
}

var file_src_ray_protobuf_core_worker_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_src_ray_protobuf_core_worker_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_src_ray_protobuf_core_worker_proto_goTypes = []interface{}{
	(ObjectPlasmaLocationUpdate)(0),               // 0: ray.rpc.ObjectPlasmaLocationUpdate
	(GetObjectStatusReply_ObjectStatus)(0),        // 1: ray.rpc.GetObjectStatusReply.ObjectStatus
	(*ActiveObjectIDs)(nil),                       // 2: ray.rpc.ActiveObjectIDs
	(*ActorHandle)(nil),                           // 3: ray.rpc.ActorHandle
	(*ReturnObject)(nil),                          // 4: ray.rpc.ReturnObject
	(*PushTaskRequest)(nil),                       // 5: ray.rpc.PushTaskRequest
	(*PushTaskReply)(nil),                         // 6: ray.rpc.PushTaskReply
	(*DirectActorCallArgWaitCompleteRequest)(nil), // 7: ray.rpc.DirectActorCallArgWaitCompleteRequest
	(*DirectActorCallArgWaitCompleteReply)(nil),   // 8: ray.rpc.DirectActorCallArgWaitCompleteReply
	(*GetObjectStatusRequest)(nil),                // 9: ray.rpc.GetObjectStatusRequest
	(*RayObject)(nil),                             // 10: ray.rpc.RayObject
	(*GetObjectStatusReply)(nil),                  // 11: ray.rpc.GetObjectStatusReply
	(*WaitForActorOutOfScopeRequest)(nil),         // 12: ray.rpc.WaitForActorOutOfScopeRequest
	(*WaitForActorOutOfScopeReply)(nil),           // 13: ray.rpc.WaitForActorOutOfScopeReply
	(*UpdateObjectLocationBatchRequest)(nil),      // 14: ray.rpc.UpdateObjectLocationBatchRequest
	(*UpdateObjectLocationBatchReply)(nil),        // 15: ray.rpc.UpdateObjectLocationBatchReply
	(*ObjectSpilledLocationUpdate)(nil),           // 16: ray.rpc.ObjectSpilledLocationUpdate
	(*ObjectLocationUpdate)(nil),                  // 17: ray.rpc.ObjectLocationUpdate
	(*GetObjectLocationsOwnerRequest)(nil),        // 18: ray.rpc.GetObjectLocationsOwnerRequest
	(*GetObjectLocationsOwnerReply)(nil),          // 19: ray.rpc.GetObjectLocationsOwnerReply
	(*KillActorRequest)(nil),                      // 20: ray.rpc.KillActorRequest
	(*KillActorReply)(nil),                        // 21: ray.rpc.KillActorReply
	(*CancelTaskRequest)(nil),                     // 22: ray.rpc.CancelTaskRequest
	(*CancelTaskReply)(nil),                       // 23: ray.rpc.CancelTaskReply
	(*RemoteCancelTaskRequest)(nil),               // 24: ray.rpc.RemoteCancelTaskRequest
	(*RemoteCancelTaskReply)(nil),                 // 25: ray.rpc.RemoteCancelTaskReply
	(*GetCoreWorkerStatsRequest)(nil),             // 26: ray.rpc.GetCoreWorkerStatsRequest
	(*GetCoreWorkerStatsReply)(nil),               // 27: ray.rpc.GetCoreWorkerStatsReply
	(*LocalGCRequest)(nil),                        // 28: ray.rpc.LocalGCRequest
	(*LocalGCReply)(nil),                          // 29: ray.rpc.LocalGCReply
	(*PlasmaObjectReadyRequest)(nil),              // 30: ray.rpc.PlasmaObjectReadyRequest
	(*PlasmaObjectReadyReply)(nil),                // 31: ray.rpc.PlasmaObjectReadyReply
	(*SpillObjectsRequest)(nil),                   // 32: ray.rpc.SpillObjectsRequest
	(*SpillObjectsReply)(nil),                     // 33: ray.rpc.SpillObjectsReply
	(*RestoreSpilledObjectsRequest)(nil),          // 34: ray.rpc.RestoreSpilledObjectsRequest
	(*RestoreSpilledObjectsReply)(nil),            // 35: ray.rpc.RestoreSpilledObjectsReply
	(*DeleteSpilledObjectsRequest)(nil),           // 36: ray.rpc.DeleteSpilledObjectsRequest
	(*DeleteSpilledObjectsReply)(nil),             // 37: ray.rpc.DeleteSpilledObjectsReply
	(*ExitRequest)(nil),                           // 38: ray.rpc.ExitRequest
	(*ExitReply)(nil),                             // 39: ray.rpc.ExitReply
	(*AssignObjectOwnerRequest)(nil),              // 40: ray.rpc.AssignObjectOwnerRequest
	(*AssignObjectOwnerReply)(nil),                // 41: ray.rpc.AssignObjectOwnerReply
	(*Address)(nil),                               // 42: ray.rpc.Address
	(Language)(0),                                 // 43: ray.rpc.Language
	(*FunctionDescriptor)(nil),                    // 44: ray.rpc.FunctionDescriptor
	(*ObjectReference)(nil),                       // 45: ray.rpc.ObjectReference
	(*TaskSpec)(nil),                              // 46: ray.rpc.TaskSpec
	(*ResourceMapEntry)(nil),                      // 47: ray.rpc.ResourceMapEntry
	(*ObjectReferenceCount)(nil),                  // 48: ray.rpc.ObjectReferenceCount
	(*WorkerObjectLocationsSubMessage)(nil),       // 49: ray.rpc.WorkerObjectLocationsSubMessage
	(*WorkerObjectLocationsPubMessage)(nil),       // 50: ray.rpc.WorkerObjectLocationsPubMessage
	(*CoreWorkerStats)(nil),                       // 51: ray.rpc.CoreWorkerStats
	(*TaskInfoEntry)(nil),                         // 52: ray.rpc.TaskInfoEntry
	(*PubsubLongPollingRequest)(nil),              // 53: ray.rpc.PubsubLongPollingRequest
	(*PubsubCommandBatchRequest)(nil),             // 54: ray.rpc.PubsubCommandBatchRequest
	(*PubsubLongPollingReply)(nil),                // 55: ray.rpc.PubsubLongPollingReply
	(*PubsubCommandBatchReply)(nil),               // 56: ray.rpc.PubsubCommandBatchReply
}
var file_src_ray_protobuf_core_worker_proto_depIdxs = []int32{
	42, // 0: ray.rpc.ActorHandle.owner_address:type_name -> ray.rpc.Address
	43, // 1: ray.rpc.ActorHandle.actor_language:type_name -> ray.rpc.Language
	44, // 2: ray.rpc.ActorHandle.actor_creation_task_function_descriptor:type_name -> ray.rpc.FunctionDescriptor
	45, // 3: ray.rpc.ReturnObject.nested_inlined_refs:type_name -> ray.rpc.ObjectReference
	46, // 4: ray.rpc.PushTaskRequest.task_spec:type_name -> ray.rpc.TaskSpec
	47, // 5: ray.rpc.PushTaskRequest.resource_mapping:type_name -> ray.rpc.ResourceMapEntry
	4,  // 6: ray.rpc.PushTaskReply.return_objects:type_name -> ray.rpc.ReturnObject
	48, // 7: ray.rpc.PushTaskReply.borrowed_refs:type_name -> ray.rpc.ObjectReferenceCount
	45, // 8: ray.rpc.RayObject.nested_inlined_refs:type_name -> ray.rpc.ObjectReference
	1,  // 9: ray.rpc.GetObjectStatusReply.status:type_name -> ray.rpc.GetObjectStatusReply.ObjectStatus
	10, // 10: ray.rpc.GetObjectStatusReply.object:type_name -> ray.rpc.RayObject
	17, // 11: ray.rpc.UpdateObjectLocationBatchRequest.object_location_updates:type_name -> ray.rpc.ObjectLocationUpdate
	0,  // 12: ray.rpc.ObjectLocationUpdate.plasma_location_update:type_name -> ray.rpc.ObjectPlasmaLocationUpdate
	16, // 13: ray.rpc.ObjectLocationUpdate.spilled_location_update:type_name -> ray.rpc.ObjectSpilledLocationUpdate
	49, // 14: ray.rpc.GetObjectLocationsOwnerRequest.object_location_request:type_name -> ray.rpc.WorkerObjectLocationsSubMessage
	50, // 15: ray.rpc.GetObjectLocationsOwnerReply.object_location_info:type_name -> ray.rpc.WorkerObjectLocationsPubMessage
	51, // 16: ray.rpc.GetCoreWorkerStatsReply.core_worker_stats:type_name -> ray.rpc.CoreWorkerStats
	52, // 17: ray.rpc.GetCoreWorkerStatsReply.task_info_entries:type_name -> ray.rpc.TaskInfoEntry
	45, // 18: ray.rpc.SpillObjectsRequest.object_refs_to_spill:type_name -> ray.rpc.ObjectReference
	42, // 19: ray.rpc.AssignObjectOwnerRequest.borrower_address:type_name -> ray.rpc.Address
	5,  // 20: ray.rpc.CoreWorkerService.PushTask:input_type -> ray.rpc.PushTaskRequest
	7,  // 21: ray.rpc.CoreWorkerService.DirectActorCallArgWaitComplete:input_type -> ray.rpc.DirectActorCallArgWaitCompleteRequest
	9,  // 22: ray.rpc.CoreWorkerService.GetObjectStatus:input_type -> ray.rpc.GetObjectStatusRequest
	12, // 23: ray.rpc.CoreWorkerService.WaitForActorOutOfScope:input_type -> ray.rpc.WaitForActorOutOfScopeRequest
	53, // 24: ray.rpc.CoreWorkerService.PubsubLongPolling:input_type -> ray.rpc.PubsubLongPollingRequest
	54, // 25: ray.rpc.CoreWorkerService.PubsubCommandBatch:input_type -> ray.rpc.PubsubCommandBatchRequest
	14, // 26: ray.rpc.CoreWorkerService.UpdateObjectLocationBatch:input_type -> ray.rpc.UpdateObjectLocationBatchRequest
	18, // 27: ray.rpc.CoreWorkerService.GetObjectLocationsOwner:input_type -> ray.rpc.GetObjectLocationsOwnerRequest
	20, // 28: ray.rpc.CoreWorkerService.KillActor:input_type -> ray.rpc.KillActorRequest
	22, // 29: ray.rpc.CoreWorkerService.CancelTask:input_type -> ray.rpc.CancelTaskRequest
	24, // 30: ray.rpc.CoreWorkerService.RemoteCancelTask:input_type -> ray.rpc.RemoteCancelTaskRequest
	26, // 31: ray.rpc.CoreWorkerService.GetCoreWorkerStats:input_type -> ray.rpc.GetCoreWorkerStatsRequest
	28, // 32: ray.rpc.CoreWorkerService.LocalGC:input_type -> ray.rpc.LocalGCRequest
	32, // 33: ray.rpc.CoreWorkerService.SpillObjects:input_type -> ray.rpc.SpillObjectsRequest
	34, // 34: ray.rpc.CoreWorkerService.RestoreSpilledObjects:input_type -> ray.rpc.RestoreSpilledObjectsRequest
	36, // 35: ray.rpc.CoreWorkerService.DeleteSpilledObjects:input_type -> ray.rpc.DeleteSpilledObjectsRequest
	30, // 36: ray.rpc.CoreWorkerService.PlasmaObjectReady:input_type -> ray.rpc.PlasmaObjectReadyRequest
	38, // 37: ray.rpc.CoreWorkerService.Exit:input_type -> ray.rpc.ExitRequest
	40, // 38: ray.rpc.CoreWorkerService.AssignObjectOwner:input_type -> ray.rpc.AssignObjectOwnerRequest
	6,  // 39: ray.rpc.CoreWorkerService.PushTask:output_type -> ray.rpc.PushTaskReply
	8,  // 40: ray.rpc.CoreWorkerService.DirectActorCallArgWaitComplete:output_type -> ray.rpc.DirectActorCallArgWaitCompleteReply
	11, // 41: ray.rpc.CoreWorkerService.GetObjectStatus:output_type -> ray.rpc.GetObjectStatusReply
	13, // 42: ray.rpc.CoreWorkerService.WaitForActorOutOfScope:output_type -> ray.rpc.WaitForActorOutOfScopeReply
	55, // 43: ray.rpc.CoreWorkerService.PubsubLongPolling:output_type -> ray.rpc.PubsubLongPollingReply
	56, // 44: ray.rpc.CoreWorkerService.PubsubCommandBatch:output_type -> ray.rpc.PubsubCommandBatchReply
	15, // 45: ray.rpc.CoreWorkerService.UpdateObjectLocationBatch:output_type -> ray.rpc.UpdateObjectLocationBatchReply
	19, // 46: ray.rpc.CoreWorkerService.GetObjectLocationsOwner:output_type -> ray.rpc.GetObjectLocationsOwnerReply
	21, // 47: ray.rpc.CoreWorkerService.KillActor:output_type -> ray.rpc.KillActorReply
	23, // 48: ray.rpc.CoreWorkerService.CancelTask:output_type -> ray.rpc.CancelTaskReply
	25, // 49: ray.rpc.CoreWorkerService.RemoteCancelTask:output_type -> ray.rpc.RemoteCancelTaskReply
	27, // 50: ray.rpc.CoreWorkerService.GetCoreWorkerStats:output_type -> ray.rpc.GetCoreWorkerStatsReply
	29, // 51: ray.rpc.CoreWorkerService.LocalGC:output_type -> ray.rpc.LocalGCReply
	33, // 52: ray.rpc.CoreWorkerService.SpillObjects:output_type -> ray.rpc.SpillObjectsReply
	35, // 53: ray.rpc.CoreWorkerService.RestoreSpilledObjects:output_type -> ray.rpc.RestoreSpilledObjectsReply
	37, // 54: ray.rpc.CoreWorkerService.DeleteSpilledObjects:output_type -> ray.rpc.DeleteSpilledObjectsReply
	31, // 55: ray.rpc.CoreWorkerService.PlasmaObjectReady:output_type -> ray.rpc.PlasmaObjectReadyReply
	39, // 56: ray.rpc.CoreWorkerService.Exit:output_type -> ray.rpc.ExitReply
	41, // 57: ray.rpc.CoreWorkerService.AssignObjectOwner:output_type -> ray.rpc.AssignObjectOwnerReply
	39, // [39:58] is the sub-list for method output_type
	20, // [20:39] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_src_ray_protobuf_core_worker_proto_init() }
func file_src_ray_protobuf_core_worker_proto_init() {
	if File_src_ray_protobuf_core_worker_proto != nil {
		return
	}
	file_src_ray_protobuf_common_proto_init()
	file_src_ray_protobuf_pubsub_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_src_ray_protobuf_core_worker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveObjectIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActorHandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushTaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectActorCallArgWaitCompleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectActorCallArgWaitCompleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetObjectStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RayObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetObjectStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForActorOutOfScopeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForActorOutOfScopeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateObjectLocationBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateObjectLocationBatchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectSpilledLocationUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectLocationUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetObjectLocationsOwnerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetObjectLocationsOwnerReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KillActorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KillActorReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelTaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteCancelTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteCancelTaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoreWorkerStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoreWorkerStatsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalGCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalGCReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlasmaObjectReadyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlasmaObjectReadyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpillObjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpillObjectsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreSpilledObjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreSpilledObjectsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSpilledObjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSpilledObjectsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExitReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignObjectOwnerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_core_worker_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignObjectOwnerReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_src_ray_protobuf_core_worker_proto_msgTypes[15].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_ray_protobuf_core_worker_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_src_ray_protobuf_core_worker_proto_goTypes,
		DependencyIndexes: file_src_ray_protobuf_core_worker_proto_depIdxs,
		EnumInfos:         file_src_ray_protobuf_core_worker_proto_enumTypes,
		MessageInfos:      file_src_ray_protobuf_core_worker_proto_msgTypes,
	}.Build()
	File_src_ray_protobuf_core_worker_proto = out.File
	file_src_ray_protobuf_core_worker_proto_rawDesc = nil
	file_src_ray_protobuf_core_worker_proto_goTypes = nil
	file_src_ray_protobuf_core_worker_proto_depIdxs = nil
}
