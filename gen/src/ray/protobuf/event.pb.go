// Copyright 2020-2021 The Ray Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: src/ray/protobuf/event.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Event_SourceType int32

const (
	// The COMMON type is designed for some process that does not init there own
	// source_type.
	// We suppose that there will be some roles in addition to GCS, RAYLET, CORE_WORKER.
	Event_COMMON      Event_SourceType = 0
	Event_CORE_WORKER Event_SourceType = 1
	Event_GCS         Event_SourceType = 2
	Event_RAYLET      Event_SourceType = 3
)

// Enum value maps for Event_SourceType.
var (
	Event_SourceType_name = map[int32]string{
		0: "COMMON",
		1: "CORE_WORKER",
		2: "GCS",
		3: "RAYLET",
	}
	Event_SourceType_value = map[string]int32{
		"COMMON":      0,
		"CORE_WORKER": 1,
		"GCS":         2,
		"RAYLET":      3,
	}
)

func (x Event_SourceType) Enum() *Event_SourceType {
	p := new(Event_SourceType)
	*p = x
	return p
}

func (x Event_SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event_SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_event_proto_enumTypes[0].Descriptor()
}

func (Event_SourceType) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_event_proto_enumTypes[0]
}

func (x Event_SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event_SourceType.Descriptor instead.
func (Event_SourceType) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_event_proto_rawDescGZIP(), []int{0, 0}
}

type Event_Severity int32

const (
	Event_INFO    Event_Severity = 0
	Event_WARNING Event_Severity = 1
	Event_ERROR   Event_Severity = 2
	Event_FATAL   Event_Severity = 3
)

// Enum value maps for Event_Severity.
var (
	Event_Severity_name = map[int32]string{
		0: "INFO",
		1: "WARNING",
		2: "ERROR",
		3: "FATAL",
	}
	Event_Severity_value = map[string]int32{
		"INFO":    0,
		"WARNING": 1,
		"ERROR":   2,
		"FATAL":   3,
	}
)

func (x Event_Severity) Enum() *Event_Severity {
	p := new(Event_Severity)
	*p = x
	return p
}

func (x Event_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_event_proto_enumTypes[1].Descriptor()
}

func (Event_Severity) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_event_proto_enumTypes[1]
}

func (x Event_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event_Severity.Descriptor instead.
func (Event_Severity) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_event_proto_rawDescGZIP(), []int{0, 1}
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// event_id is the unique ID of this event
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// source type is the type of the source
	SourceType Event_SourceType `protobuf:"varint,2,opt,name=source_type,json=sourceType,proto3,enum=ray.rpc.Event_SourceType" json:"source_type,omitempty"`
	// source_hostname is the hostname of the source
	SourceHostname string `protobuf:"bytes,3,opt,name=source_hostname,json=sourceHostname,proto3" json:"source_hostname,omitempty"`
	// source_pid is the process pid of the source
	SourcePid int32 `protobuf:"varint,4,opt,name=source_pid,json=sourcePid,proto3" json:"source_pid,omitempty"`
	// severity is the event severity level
	Severity Event_Severity `protobuf:"varint,5,opt,name=severity,proto3,enum=ray.rpc.Event_Severity" json:"severity,omitempty"`
	// label describes some important information about this event, always use for the
	// searching index and tag
	Label string `protobuf:"bytes,6,opt,name=label,proto3" json:"label,omitempty"`
	// message is main information of this event
	Message string `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
	// timestamp is the report millionseconds since 00:00, Jan 1 1970 UTC
	Timestamp int64 `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// store custom key such as node_id, job_id, task_id
	CustomFields map[string]string `protobuf:"bytes,9,rep,name=custom_fields,json=customFields,proto3" json:"custom_fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_event_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *Event) GetSourceType() Event_SourceType {
	if x != nil {
		return x.SourceType
	}
	return Event_COMMON
}

func (x *Event) GetSourceHostname() string {
	if x != nil {
		return x.SourceHostname
	}
	return ""
}

func (x *Event) GetSourcePid() int32 {
	if x != nil {
		return x.SourcePid
	}
	return 0
}

func (x *Event) GetSeverity() Event_Severity {
	if x != nil {
		return x.Severity
	}
	return Event_INFO
}

func (x *Event) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Event) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Event) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Event) GetCustomFields() map[string]string {
	if x != nil {
		return x.CustomFields
	}
	return nil
}

type ReportEventsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendSuccess bool `protobuf:"varint,1,opt,name=send_success,json=sendSuccess,proto3" json:"send_success,omitempty"`
}

func (x *ReportEventsReply) Reset() {
	*x = ReportEventsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportEventsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportEventsReply) ProtoMessage() {}

func (x *ReportEventsReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportEventsReply.ProtoReflect.Descriptor instead.
func (*ReportEventsReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_event_proto_rawDescGZIP(), []int{1}
}

func (x *ReportEventsReply) GetSendSuccess() bool {
	if x != nil {
		return x.SendSuccess
	}
	return false
}

type ReportEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventStrings []string `protobuf:"bytes,1,rep,name=event_strings,json=eventStrings,proto3" json:"event_strings,omitempty"`
}

func (x *ReportEventsRequest) Reset() {
	*x = ReportEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportEventsRequest) ProtoMessage() {}

func (x *ReportEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportEventsRequest.ProtoReflect.Descriptor instead.
func (*ReportEventsRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_event_proto_rawDescGZIP(), []int{2}
}

func (x *ReportEventsRequest) GetEventStrings() []string {
	if x != nil {
		return x.EventStrings
	}
	return nil
}

var File_src_ray_protobuf_event_proto protoreflect.FileDescriptor

var file_src_ray_protobuf_event_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x72, 0x63, 0x2f, 0x72, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x22, 0xaa, 0x04, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0b,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x69, 0x64,
	0x12, 0x33, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x45, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3e, 0x0a, 0x0a, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x4d,
	0x4d, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x57, 0x4f,
	0x52, 0x4b, 0x45, 0x52, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x43, 0x53, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x41, 0x59, 0x4c, 0x45, 0x54, 0x10, 0x03, 0x22, 0x37, 0x0a, 0x08, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x54,
	0x41, 0x4c, 0x10, 0x03, 0x22, 0x36, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x3a, 0x0a, 0x13,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x32, 0x5e, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48,
	0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x86, 0x01, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x42, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x72, 0x75, 0x65, 0x69, 0x61, 0x6e, 0x2f, 0x72, 0x61, 0x79, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x72, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0xf8, 0x01, 0x01, 0xa2, 0x02, 0x03, 0x52, 0x52, 0x58, 0xaa, 0x02, 0x07, 0x52,
	0x61, 0x79, 0x2e, 0x52, 0x70, 0x63, 0xca, 0x02, 0x07, 0x52, 0x61, 0x79, 0x5c, 0x52, 0x70, 0x63,
	0xe2, 0x02, 0x13, 0x52, 0x61, 0x79, 0x5c, 0x52, 0x70, 0x63, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x08, 0x52, 0x61, 0x79, 0x3a, 0x3a, 0x52, 0x70,
	0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_src_ray_protobuf_event_proto_rawDescOnce sync.Once
	file_src_ray_protobuf_event_proto_rawDescData = file_src_ray_protobuf_event_proto_rawDesc
)

func file_src_ray_protobuf_event_proto_rawDescGZIP() []byte {
	file_src_ray_protobuf_event_proto_rawDescOnce.Do(func() {
		file_src_ray_protobuf_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_ray_protobuf_event_proto_rawDescData)
	})
	return file_src_ray_protobuf_event_proto_rawDescData
}

var file_src_ray_protobuf_event_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_src_ray_protobuf_event_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_src_ray_protobuf_event_proto_goTypes = []interface{}{
	(Event_SourceType)(0),       // 0: ray.rpc.Event.SourceType
	(Event_Severity)(0),         // 1: ray.rpc.Event.Severity
	(*Event)(nil),               // 2: ray.rpc.Event
	(*ReportEventsReply)(nil),   // 3: ray.rpc.ReportEventsReply
	(*ReportEventsRequest)(nil), // 4: ray.rpc.ReportEventsRequest
	nil,                         // 5: ray.rpc.Event.CustomFieldsEntry
}
var file_src_ray_protobuf_event_proto_depIdxs = []int32{
	0, // 0: ray.rpc.Event.source_type:type_name -> ray.rpc.Event.SourceType
	1, // 1: ray.rpc.Event.severity:type_name -> ray.rpc.Event.Severity
	5, // 2: ray.rpc.Event.custom_fields:type_name -> ray.rpc.Event.CustomFieldsEntry
	4, // 3: ray.rpc.ReportEventService.ReportEvents:input_type -> ray.rpc.ReportEventsRequest
	3, // 4: ray.rpc.ReportEventService.ReportEvents:output_type -> ray.rpc.ReportEventsReply
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_src_ray_protobuf_event_proto_init() }
func file_src_ray_protobuf_event_proto_init() {
	if File_src_ray_protobuf_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_src_ray_protobuf_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportEventsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_ray_protobuf_event_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_src_ray_protobuf_event_proto_goTypes,
		DependencyIndexes: file_src_ray_protobuf_event_proto_depIdxs,
		EnumInfos:         file_src_ray_protobuf_event_proto_enumTypes,
		MessageInfos:      file_src_ray_protobuf_event_proto_msgTypes,
	}.Build()
	File_src_ray_protobuf_event_proto = out.File
	file_src_ray_protobuf_event_proto_rawDesc = nil
	file_src_ray_protobuf_event_proto_goTypes = nil
	file_src_ray_protobuf_event_proto_depIdxs = nil
}
