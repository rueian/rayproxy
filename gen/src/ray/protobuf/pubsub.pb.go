// Copyright 2017 The Ray Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: src/ray/protobuf/pubsub.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// / Each channel is prefixed by the name of its components.
// / For example, for pubsub channels that are used by core workers,
// / they have the prefix WORKER_.
type ChannelType int32

const (
	// / A channel for object eviction.
	ChannelType_WORKER_OBJECT_EVICTION ChannelType = 0
	// / A channel for ref removed.
	ChannelType_WORKER_REF_REMOVED_CHANNEL ChannelType = 1
	// / A channel for object locations.
	ChannelType_WORKER_OBJECT_LOCATIONS_CHANNEL ChannelType = 2
	// / A channel for actor info.
	ChannelType_GCS_ACTOR_CHANNEL ChannelType = 3
	// / A channel for job info.
	ChannelType_GCS_JOB_CHANNEL ChannelType = 4
	// / A channel for node info.
	ChannelType_GCS_NODE_INFO_CHANNEL ChannelType = 5
	// / A channel for node resources.
	ChannelType_GCS_NODE_RESOURCE_CHANNEL ChannelType = 6
	// / A channel for worker changes, currently only for worker failures.
	ChannelType_GCS_WORKER_DELTA_CHANNEL ChannelType = 7
	// / A channel for errors from various Ray components.
	ChannelType_RAY_ERROR_INFO_CHANNEL ChannelType = 8
	// / A channel for logs from various Ray components.
	ChannelType_RAY_LOG_CHANNEL ChannelType = 9
	// / A channel for keys to pickled python functions and actor classes.
	ChannelType_RAY_PYTHON_FUNCTION_CHANNEL ChannelType = 10
	// / A channel for reporting node resource usage stats.
	ChannelType_RAY_NODE_RESOURCE_USAGE_CHANNEL ChannelType = 11
)

// Enum value maps for ChannelType.
var (
	ChannelType_name = map[int32]string{
		0:  "WORKER_OBJECT_EVICTION",
		1:  "WORKER_REF_REMOVED_CHANNEL",
		2:  "WORKER_OBJECT_LOCATIONS_CHANNEL",
		3:  "GCS_ACTOR_CHANNEL",
		4:  "GCS_JOB_CHANNEL",
		5:  "GCS_NODE_INFO_CHANNEL",
		6:  "GCS_NODE_RESOURCE_CHANNEL",
		7:  "GCS_WORKER_DELTA_CHANNEL",
		8:  "RAY_ERROR_INFO_CHANNEL",
		9:  "RAY_LOG_CHANNEL",
		10: "RAY_PYTHON_FUNCTION_CHANNEL",
		11: "RAY_NODE_RESOURCE_USAGE_CHANNEL",
	}
	ChannelType_value = map[string]int32{
		"WORKER_OBJECT_EVICTION":          0,
		"WORKER_REF_REMOVED_CHANNEL":      1,
		"WORKER_OBJECT_LOCATIONS_CHANNEL": 2,
		"GCS_ACTOR_CHANNEL":               3,
		"GCS_JOB_CHANNEL":                 4,
		"GCS_NODE_INFO_CHANNEL":           5,
		"GCS_NODE_RESOURCE_CHANNEL":       6,
		"GCS_WORKER_DELTA_CHANNEL":        7,
		"RAY_ERROR_INFO_CHANNEL":          8,
		"RAY_LOG_CHANNEL":                 9,
		"RAY_PYTHON_FUNCTION_CHANNEL":     10,
		"RAY_NODE_RESOURCE_USAGE_CHANNEL": 11,
	}
)

func (x ChannelType) Enum() *ChannelType {
	p := new(ChannelType)
	*p = x
	return p
}

func (x ChannelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelType) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_pubsub_proto_enumTypes[0].Descriptor()
}

func (ChannelType) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_pubsub_proto_enumTypes[0]
}

func (x ChannelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelType.Descriptor instead.
func (ChannelType) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_pubsub_proto_rawDescGZIP(), []int{0}
}

type PubMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Channel type for this publish message.
	ChannelType ChannelType `protobuf:"varint,1,opt,name=channel_type,json=channelType,proto3,enum=ray.rpc.ChannelType" json:"channel_type,omitempty"`
	// / The key id (e.g., object id) in bytes.
	KeyId []byte `protobuf:"bytes,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// / At least one message must be set.
	//
	// Types that are assignable to InnerMessage:
	//
	//	*PubMessage_WorkerObjectEvictionMessage
	//	*PubMessage_WorkerRefRemovedMessage
	//	*PubMessage_WorkerObjectLocationsMessage
	//	*PubMessage_ActorMessage
	//	*PubMessage_JobMessage
	//	*PubMessage_NodeInfoMessage
	//	*PubMessage_NodeResourceMessage
	//	*PubMessage_WorkerDeltaMessage
	//	*PubMessage_ErrorInfoMessage
	//	*PubMessage_LogBatchMessage
	//	*PubMessage_PythonFunctionMessage
	//	*PubMessage_NodeResourceUsageMessage
	//	*PubMessage_FailureMessage
	InnerMessage isPubMessage_InnerMessage `protobuf_oneof:"inner_message"`
}

func (x *PubMessage) Reset() {
	*x = PubMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubMessage) ProtoMessage() {}

func (x *PubMessage) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubMessage.ProtoReflect.Descriptor instead.
func (*PubMessage) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_pubsub_proto_rawDescGZIP(), []int{0}
}

func (x *PubMessage) GetChannelType() ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return ChannelType_WORKER_OBJECT_EVICTION
}

func (x *PubMessage) GetKeyId() []byte {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (m *PubMessage) GetInnerMessage() isPubMessage_InnerMessage {
	if m != nil {
		return m.InnerMessage
	}
	return nil
}

func (x *PubMessage) GetWorkerObjectEvictionMessage() *WorkerObjectEvictionMessage {
	if x, ok := x.GetInnerMessage().(*PubMessage_WorkerObjectEvictionMessage); ok {
		return x.WorkerObjectEvictionMessage
	}
	return nil
}

func (x *PubMessage) GetWorkerRefRemovedMessage() *WorkerRefRemovedMessage {
	if x, ok := x.GetInnerMessage().(*PubMessage_WorkerRefRemovedMessage); ok {
		return x.WorkerRefRemovedMessage
	}
	return nil
}

func (x *PubMessage) GetWorkerObjectLocationsMessage() *WorkerObjectLocationsPubMessage {
	if x, ok := x.GetInnerMessage().(*PubMessage_WorkerObjectLocationsMessage); ok {
		return x.WorkerObjectLocationsMessage
	}
	return nil
}

func (x *PubMessage) GetActorMessage() *ActorTableData {
	if x, ok := x.GetInnerMessage().(*PubMessage_ActorMessage); ok {
		return x.ActorMessage
	}
	return nil
}

func (x *PubMessage) GetJobMessage() *JobTableData {
	if x, ok := x.GetInnerMessage().(*PubMessage_JobMessage); ok {
		return x.JobMessage
	}
	return nil
}

func (x *PubMessage) GetNodeInfoMessage() *GcsNodeInfo {
	if x, ok := x.GetInnerMessage().(*PubMessage_NodeInfoMessage); ok {
		return x.NodeInfoMessage
	}
	return nil
}

func (x *PubMessage) GetNodeResourceMessage() *NodeResourceChange {
	if x, ok := x.GetInnerMessage().(*PubMessage_NodeResourceMessage); ok {
		return x.NodeResourceMessage
	}
	return nil
}

func (x *PubMessage) GetWorkerDeltaMessage() *WorkerDeltaData {
	if x, ok := x.GetInnerMessage().(*PubMessage_WorkerDeltaMessage); ok {
		return x.WorkerDeltaMessage
	}
	return nil
}

func (x *PubMessage) GetErrorInfoMessage() *ErrorTableData {
	if x, ok := x.GetInnerMessage().(*PubMessage_ErrorInfoMessage); ok {
		return x.ErrorInfoMessage
	}
	return nil
}

func (x *PubMessage) GetLogBatchMessage() *LogBatch {
	if x, ok := x.GetInnerMessage().(*PubMessage_LogBatchMessage); ok {
		return x.LogBatchMessage
	}
	return nil
}

func (x *PubMessage) GetPythonFunctionMessage() *PythonFunction {
	if x, ok := x.GetInnerMessage().(*PubMessage_PythonFunctionMessage); ok {
		return x.PythonFunctionMessage
	}
	return nil
}

func (x *PubMessage) GetNodeResourceUsageMessage() *NodeResourceUsage {
	if x, ok := x.GetInnerMessage().(*PubMessage_NodeResourceUsageMessage); ok {
		return x.NodeResourceUsageMessage
	}
	return nil
}

func (x *PubMessage) GetFailureMessage() *FailureMessage {
	if x, ok := x.GetInnerMessage().(*PubMessage_FailureMessage); ok {
		return x.FailureMessage
	}
	return nil
}

type isPubMessage_InnerMessage interface {
	isPubMessage_InnerMessage()
}

type PubMessage_WorkerObjectEvictionMessage struct {
	WorkerObjectEvictionMessage *WorkerObjectEvictionMessage `protobuf:"bytes,3,opt,name=worker_object_eviction_message,json=workerObjectEvictionMessage,proto3,oneof"`
}

type PubMessage_WorkerRefRemovedMessage struct {
	WorkerRefRemovedMessage *WorkerRefRemovedMessage `protobuf:"bytes,4,opt,name=worker_ref_removed_message,json=workerRefRemovedMessage,proto3,oneof"`
}

type PubMessage_WorkerObjectLocationsMessage struct {
	WorkerObjectLocationsMessage *WorkerObjectLocationsPubMessage `protobuf:"bytes,5,opt,name=worker_object_locations_message,json=workerObjectLocationsMessage,proto3,oneof"`
}

type PubMessage_ActorMessage struct {
	ActorMessage *ActorTableData `protobuf:"bytes,7,opt,name=actor_message,json=actorMessage,proto3,oneof"`
}

type PubMessage_JobMessage struct {
	JobMessage *JobTableData `protobuf:"bytes,8,opt,name=job_message,json=jobMessage,proto3,oneof"`
}

type PubMessage_NodeInfoMessage struct {
	NodeInfoMessage *GcsNodeInfo `protobuf:"bytes,9,opt,name=node_info_message,json=nodeInfoMessage,proto3,oneof"`
}

type PubMessage_NodeResourceMessage struct {
	NodeResourceMessage *NodeResourceChange `protobuf:"bytes,10,opt,name=node_resource_message,json=nodeResourceMessage,proto3,oneof"`
}

type PubMessage_WorkerDeltaMessage struct {
	WorkerDeltaMessage *WorkerDeltaData `protobuf:"bytes,11,opt,name=worker_delta_message,json=workerDeltaMessage,proto3,oneof"`
}

type PubMessage_ErrorInfoMessage struct {
	ErrorInfoMessage *ErrorTableData `protobuf:"bytes,12,opt,name=error_info_message,json=errorInfoMessage,proto3,oneof"`
}

type PubMessage_LogBatchMessage struct {
	LogBatchMessage *LogBatch `protobuf:"bytes,13,opt,name=log_batch_message,json=logBatchMessage,proto3,oneof"`
}

type PubMessage_PythonFunctionMessage struct {
	PythonFunctionMessage *PythonFunction `protobuf:"bytes,14,opt,name=python_function_message,json=pythonFunctionMessage,proto3,oneof"`
}

type PubMessage_NodeResourceUsageMessage struct {
	NodeResourceUsageMessage *NodeResourceUsage `protobuf:"bytes,15,opt,name=node_resource_usage_message,json=nodeResourceUsageMessage,proto3,oneof"`
}

type PubMessage_FailureMessage struct {
	// The message that indicates the given key id is not available anymore.
	FailureMessage *FailureMessage `protobuf:"bytes,6,opt,name=failure_message,json=failureMessage,proto3,oneof"`
}

func (*PubMessage_WorkerObjectEvictionMessage) isPubMessage_InnerMessage() {}

func (*PubMessage_WorkerRefRemovedMessage) isPubMessage_InnerMessage() {}

func (*PubMessage_WorkerObjectLocationsMessage) isPubMessage_InnerMessage() {}

func (*PubMessage_ActorMessage) isPubMessage_InnerMessage() {}

func (*PubMessage_JobMessage) isPubMessage_InnerMessage() {}

func (*PubMessage_NodeInfoMessage) isPubMessage_InnerMessage() {}

func (*PubMessage_NodeResourceMessage) isPubMessage_InnerMessage() {}

func (*PubMessage_WorkerDeltaMessage) isPubMessage_InnerMessage() {}

func (*PubMessage_ErrorInfoMessage) isPubMessage_InnerMessage() {}

func (*PubMessage_LogBatchMessage) isPubMessage_InnerMessage() {}

func (*PubMessage_PythonFunctionMessage) isPubMessage_InnerMessage() {}

func (*PubMessage_NodeResourceUsageMessage) isPubMessage_InnerMessage() {}

func (*PubMessage_FailureMessage) isPubMessage_InnerMessage() {}

type WorkerObjectEvictionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId []byte `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (x *WorkerObjectEvictionMessage) Reset() {
	*x = WorkerObjectEvictionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerObjectEvictionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerObjectEvictionMessage) ProtoMessage() {}

func (x *WorkerObjectEvictionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerObjectEvictionMessage.ProtoReflect.Descriptor instead.
func (*WorkerObjectEvictionMessage) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_pubsub_proto_rawDescGZIP(), []int{1}
}

func (x *WorkerObjectEvictionMessage) GetObjectId() []byte {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

type WorkerRefRemovedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference counts for the object that the worker was borrowing and
	// any objects nested inside. The worker should no longer be using the object
	// ID by the time it replies, but may have accumulated other borrowers or may
	// still be borrowing an object ID that was nested inside.
	BorrowedRefs []*ObjectReferenceCount `protobuf:"bytes,1,rep,name=borrowed_refs,json=borrowedRefs,proto3" json:"borrowed_refs,omitempty"`
}

func (x *WorkerRefRemovedMessage) Reset() {
	*x = WorkerRefRemovedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerRefRemovedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerRefRemovedMessage) ProtoMessage() {}

func (x *WorkerRefRemovedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerRefRemovedMessage.ProtoReflect.Descriptor instead.
func (*WorkerRefRemovedMessage) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_pubsub_proto_rawDescGZIP(), []int{2}
}

func (x *WorkerRefRemovedMessage) GetBorrowedRefs() []*ObjectReferenceCount {
	if x != nil {
		return x.BorrowedRefs
	}
	return nil
}

type WorkerObjectLocationsPubMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The IDs of the nodes that this object appeared on or was evicted by.
	NodeIds [][]byte `protobuf:"bytes,1,rep,name=node_ids,json=nodeIds,proto3" json:"node_ids,omitempty"`
	// The size of the object in bytes.
	ObjectSize uint64 `protobuf:"varint,2,opt,name=object_size,json=objectSize,proto3" json:"object_size,omitempty"`
	// The object has been spilled to this URL. This should be set xor the above
	// fields are set.
	SpilledUrl string `protobuf:"bytes,3,opt,name=spilled_url,json=spilledUrl,proto3" json:"spilled_url,omitempty"`
	// The ID of the node that spilled the object.
	// This will be Nil if the object was spilled to distributed external storage.
	SpilledNodeId []byte `protobuf:"bytes,4,opt,name=spilled_node_id,json=spilledNodeId,proto3" json:"spilled_node_id,omitempty"`
	// The ID of the node that stores the primary copy in plasma.
	// This could be Nil if the object has been evicted or inlined.
	PrimaryNodeId []byte `protobuf:"bytes,6,opt,name=primary_node_id,json=primaryNodeId,proto3" json:"primary_node_id,omitempty"`
	// If this is set, then the owner is alive but no longer has an entry for
	// this reference. This can happen if there is a bug in the distributed ref
	// counting protocol that causes the object to be released while there are
	// still references.
	RefRemoved bool `protobuf:"varint,7,opt,name=ref_removed,json=refRemoved,proto3" json:"ref_removed,omitempty"`
	// If this is set, the task that creates the object is pending execution. If
	// there are no locations and this is set, the subscriber should wait for the
	// new location to appear.
	PendingCreation bool `protobuf:"varint,8,opt,name=pending_creation,json=pendingCreation,proto3" json:"pending_creation,omitempty"`
}

func (x *WorkerObjectLocationsPubMessage) Reset() {
	*x = WorkerObjectLocationsPubMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerObjectLocationsPubMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerObjectLocationsPubMessage) ProtoMessage() {}

func (x *WorkerObjectLocationsPubMessage) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerObjectLocationsPubMessage.ProtoReflect.Descriptor instead.
func (*WorkerObjectLocationsPubMessage) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_pubsub_proto_rawDescGZIP(), []int{3}
}

func (x *WorkerObjectLocationsPubMessage) GetNodeIds() [][]byte {
	if x != nil {
		return x.NodeIds
	}
	return nil
}

func (x *WorkerObjectLocationsPubMessage) GetObjectSize() uint64 {
	if x != nil {
		return x.ObjectSize
	}
	return 0
}

func (x *WorkerObjectLocationsPubMessage) GetSpilledUrl() string {
	if x != nil {
		return x.SpilledUrl
	}
	return ""
}

func (x *WorkerObjectLocationsPubMessage) GetSpilledNodeId() []byte {
	if x != nil {
		return x.SpilledNodeId
	}
	return nil
}

func (x *WorkerObjectLocationsPubMessage) GetPrimaryNodeId() []byte {
	if x != nil {
		return x.PrimaryNodeId
	}
	return nil
}

func (x *WorkerObjectLocationsPubMessage) GetRefRemoved() bool {
	if x != nil {
		return x.RefRemoved
	}
	return false
}

func (x *WorkerObjectLocationsPubMessage) GetPendingCreation() bool {
	if x != nil {
		return x.PendingCreation
	}
	return false
}

// / Indicating the subscriber needs to handle failure callback.
type FailureMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FailureMessage) Reset() {
	*x = FailureMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureMessage) ProtoMessage() {}

func (x *FailureMessage) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureMessage.ProtoReflect.Descriptor instead.
func (*FailureMessage) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_pubsub_proto_rawDescGZIP(), []int{4}
}

// / Command is a set of instructions that can be operated on a publisher.
// / NOTE(sang): In our pubsub module design, there's no broker,
// / and publisher is identical to the broker unlike the conventional pubsub systems.
// / This includes operations such as Subscribe or Unsubscribe. The terminology
// / has come from Redis' pubsub (e.g., SUB command, UNSUB command).
type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / The channel type for this command.
	ChannelType ChannelType `protobuf:"varint,1,opt,name=channel_type,json=channelType,proto3,enum=ray.rpc.ChannelType" json:"channel_type,omitempty"`
	// / The key id (e.g., object id) in bytes.
	KeyId []byte `protobuf:"bytes,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// / A message for a command.
	//
	// Types that are assignable to CommandMessageOneOf:
	//
	//	*Command_UnsubscribeMessage
	//	*Command_SubscribeMessage
	CommandMessageOneOf isCommand_CommandMessageOneOf `protobuf_oneof:"command_message_one_of"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_pubsub_proto_rawDescGZIP(), []int{5}
}

func (x *Command) GetChannelType() ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return ChannelType_WORKER_OBJECT_EVICTION
}

func (x *Command) GetKeyId() []byte {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (m *Command) GetCommandMessageOneOf() isCommand_CommandMessageOneOf {
	if m != nil {
		return m.CommandMessageOneOf
	}
	return nil
}

func (x *Command) GetUnsubscribeMessage() *UnsubscribeMessage {
	if x, ok := x.GetCommandMessageOneOf().(*Command_UnsubscribeMessage); ok {
		return x.UnsubscribeMessage
	}
	return nil
}

func (x *Command) GetSubscribeMessage() *SubMessage {
	if x, ok := x.GetCommandMessageOneOf().(*Command_SubscribeMessage); ok {
		return x.SubscribeMessage
	}
	return nil
}

type isCommand_CommandMessageOneOf interface {
	isCommand_CommandMessageOneOf()
}

type Command_UnsubscribeMessage struct {
	UnsubscribeMessage *UnsubscribeMessage `protobuf:"bytes,3,opt,name=unsubscribe_message,json=unsubscribeMessage,proto3,oneof"`
}

type Command_SubscribeMessage struct {
	SubscribeMessage *SubMessage `protobuf:"bytes,4,opt,name=subscribe_message,json=subscribeMessage,proto3,oneof"`
}

func (*Command_UnsubscribeMessage) isCommand_CommandMessageOneOf() {}

func (*Command_SubscribeMessage) isCommand_CommandMessageOneOf() {}

type UnsubscribeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnsubscribeMessage) Reset() {
	*x = UnsubscribeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsubscribeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeMessage) ProtoMessage() {}

func (x *UnsubscribeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeMessage.ProtoReflect.Descriptor instead.
func (*UnsubscribeMessage) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_pubsub_proto_rawDescGZIP(), []int{6}
}

// / Each of subscribe command needs to include request body because in Ray's pubsub
// / module, it doesn't subscribe the same data structure (like for Redis,
// / it is a table, but Ray has multiple data structures that can be subscribed).
// / So, the publisher needs to have some business logic depending on subscribe
// / messages' request body. For example, WaitForRefRemoved subscription
// / needs to include some of ref count related request body.
type SubMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Subscribe message is one of other protobuf messages.
	// / It needs messages with different payloads because the publisher
	// / need more metadata than key id & channel type for subscription.
	//
	// Types that are assignable to SubMessageOneOf:
	//
	//	*SubMessage_WorkerObjectEvictionMessage
	//	*SubMessage_WorkerRefRemovedMessage
	//	*SubMessage_WorkerObjectLocationsMessage
	SubMessageOneOf isSubMessage_SubMessageOneOf `protobuf_oneof:"sub_message_one_of"`
}

func (x *SubMessage) Reset() {
	*x = SubMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubMessage) ProtoMessage() {}

func (x *SubMessage) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubMessage.ProtoReflect.Descriptor instead.
func (*SubMessage) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_pubsub_proto_rawDescGZIP(), []int{7}
}

func (m *SubMessage) GetSubMessageOneOf() isSubMessage_SubMessageOneOf {
	if m != nil {
		return m.SubMessageOneOf
	}
	return nil
}

func (x *SubMessage) GetWorkerObjectEvictionMessage() *WorkerObjectEvictionSubMessage {
	if x, ok := x.GetSubMessageOneOf().(*SubMessage_WorkerObjectEvictionMessage); ok {
		return x.WorkerObjectEvictionMessage
	}
	return nil
}

func (x *SubMessage) GetWorkerRefRemovedMessage() *WorkerRefRemovedSubMessage {
	if x, ok := x.GetSubMessageOneOf().(*SubMessage_WorkerRefRemovedMessage); ok {
		return x.WorkerRefRemovedMessage
	}
	return nil
}

func (x *SubMessage) GetWorkerObjectLocationsMessage() *WorkerObjectLocationsSubMessage {
	if x, ok := x.GetSubMessageOneOf().(*SubMessage_WorkerObjectLocationsMessage); ok {
		return x.WorkerObjectLocationsMessage
	}
	return nil
}

type isSubMessage_SubMessageOneOf interface {
	isSubMessage_SubMessageOneOf()
}

type SubMessage_WorkerObjectEvictionMessage struct {
	WorkerObjectEvictionMessage *WorkerObjectEvictionSubMessage `protobuf:"bytes,1,opt,name=worker_object_eviction_message,json=workerObjectEvictionMessage,proto3,oneof"`
}

type SubMessage_WorkerRefRemovedMessage struct {
	WorkerRefRemovedMessage *WorkerRefRemovedSubMessage `protobuf:"bytes,2,opt,name=worker_ref_removed_message,json=workerRefRemovedMessage,proto3,oneof"`
}

type SubMessage_WorkerObjectLocationsMessage struct {
	WorkerObjectLocationsMessage *WorkerObjectLocationsSubMessage `protobuf:"bytes,3,opt,name=worker_object_locations_message,json=workerObjectLocationsMessage,proto3,oneof"`
}

func (*SubMessage_WorkerObjectEvictionMessage) isSubMessage_SubMessageOneOf() {}

func (*SubMessage_WorkerRefRemovedMessage) isSubMessage_SubMessageOneOf() {}

func (*SubMessage_WorkerObjectLocationsMessage) isSubMessage_SubMessageOneOf() {}

type WorkerObjectEvictionSubMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the worker this message is intended for.
	IntendedWorkerId []byte `protobuf:"bytes,1,opt,name=intended_worker_id,json=intendedWorkerId,proto3" json:"intended_worker_id,omitempty"`
	// ObjectID of the pinned object.
	ObjectId []byte `protobuf:"bytes,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// Address of the subscriber.
	SubscriberAddress *Address `protobuf:"bytes,3,opt,name=subscriber_address,json=subscriberAddress,proto3" json:"subscriber_address,omitempty"`
}

func (x *WorkerObjectEvictionSubMessage) Reset() {
	*x = WorkerObjectEvictionSubMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerObjectEvictionSubMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerObjectEvictionSubMessage) ProtoMessage() {}

func (x *WorkerObjectEvictionSubMessage) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerObjectEvictionSubMessage.ProtoReflect.Descriptor instead.
func (*WorkerObjectEvictionSubMessage) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_pubsub_proto_rawDescGZIP(), []int{8}
}

func (x *WorkerObjectEvictionSubMessage) GetIntendedWorkerId() []byte {
	if x != nil {
		return x.IntendedWorkerId
	}
	return nil
}

func (x *WorkerObjectEvictionSubMessage) GetObjectId() []byte {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *WorkerObjectEvictionSubMessage) GetSubscriberAddress() *Address {
	if x != nil {
		return x.SubscriberAddress
	}
	return nil
}

type WorkerRefRemovedSubMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the worker this message is intended for.
	IntendedWorkerId []byte `protobuf:"bytes,1,opt,name=intended_worker_id,json=intendedWorkerId,proto3" json:"intended_worker_id,omitempty"`
	// Object whose removal we are waiting for.
	Reference *ObjectReference `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
	// ObjectID that contains object_id. This is used when an ObjectID is stored
	// inside another object ID that we do not own. Then, we must notify the
	// outer ID's owner that the ID contains object_id.
	ContainedInId []byte `protobuf:"bytes,3,opt,name=contained_in_id,json=containedInId,proto3" json:"contained_in_id,omitempty"`
	// The ID of the worker that waits for the ref removed message.
	SubscriberWorkerId []byte `protobuf:"bytes,4,opt,name=subscriber_worker_id,json=subscriberWorkerId,proto3" json:"subscriber_worker_id,omitempty"`
}

func (x *WorkerRefRemovedSubMessage) Reset() {
	*x = WorkerRefRemovedSubMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerRefRemovedSubMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerRefRemovedSubMessage) ProtoMessage() {}

func (x *WorkerRefRemovedSubMessage) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerRefRemovedSubMessage.ProtoReflect.Descriptor instead.
func (*WorkerRefRemovedSubMessage) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_pubsub_proto_rawDescGZIP(), []int{9}
}

func (x *WorkerRefRemovedSubMessage) GetIntendedWorkerId() []byte {
	if x != nil {
		return x.IntendedWorkerId
	}
	return nil
}

func (x *WorkerRefRemovedSubMessage) GetReference() *ObjectReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *WorkerRefRemovedSubMessage) GetContainedInId() []byte {
	if x != nil {
		return x.ContainedInId
	}
	return nil
}

func (x *WorkerRefRemovedSubMessage) GetSubscriberWorkerId() []byte {
	if x != nil {
		return x.SubscriberWorkerId
	}
	return nil
}

type WorkerObjectLocationsSubMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntendedWorkerId []byte `protobuf:"bytes,1,opt,name=intended_worker_id,json=intendedWorkerId,proto3" json:"intended_worker_id,omitempty"`
	ObjectId         []byte `protobuf:"bytes,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (x *WorkerObjectLocationsSubMessage) Reset() {
	*x = WorkerObjectLocationsSubMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerObjectLocationsSubMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerObjectLocationsSubMessage) ProtoMessage() {}

func (x *WorkerObjectLocationsSubMessage) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerObjectLocationsSubMessage.ProtoReflect.Descriptor instead.
func (*WorkerObjectLocationsSubMessage) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_pubsub_proto_rawDescGZIP(), []int{10}
}

func (x *WorkerObjectLocationsSubMessage) GetIntendedWorkerId() []byte {
	if x != nil {
		return x.IntendedWorkerId
	}
	return nil
}

func (x *WorkerObjectLocationsSubMessage) GetObjectId() []byte {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

type PubsubLongPollingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / The id of the subscriber.
	SubscriberId []byte `protobuf:"bytes,1,opt,name=subscriber_id,json=subscriberId,proto3" json:"subscriber_id,omitempty"`
}

func (x *PubsubLongPollingRequest) Reset() {
	*x = PubsubLongPollingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubsubLongPollingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubsubLongPollingRequest) ProtoMessage() {}

func (x *PubsubLongPollingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubsubLongPollingRequest.ProtoReflect.Descriptor instead.
func (*PubsubLongPollingRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_pubsub_proto_rawDescGZIP(), []int{11}
}

func (x *PubsubLongPollingRequest) GetSubscriberId() []byte {
	if x != nil {
		return x.SubscriberId
	}
	return nil
}

type PubsubLongPollingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / The messages that are published.
	PubMessages []*PubMessage `protobuf:"bytes,1,rep,name=pub_messages,json=pubMessages,proto3" json:"pub_messages,omitempty"`
}

func (x *PubsubLongPollingReply) Reset() {
	*x = PubsubLongPollingReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubsubLongPollingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubsubLongPollingReply) ProtoMessage() {}

func (x *PubsubLongPollingReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubsubLongPollingReply.ProtoReflect.Descriptor instead.
func (*PubsubLongPollingReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_pubsub_proto_rawDescGZIP(), []int{12}
}

func (x *PubsubLongPollingReply) GetPubMessages() []*PubMessage {
	if x != nil {
		return x.PubMessages
	}
	return nil
}

type PubsubCommandBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / The id of the subscriber.
	SubscriberId []byte `protobuf:"bytes,1,opt,name=subscriber_id,json=subscriberId,proto3" json:"subscriber_id,omitempty"`
	// / Set of pubsub commands. Look at pubsub.proto for more details about the term.
	Commands []*Command `protobuf:"bytes,2,rep,name=commands,proto3" json:"commands,omitempty"`
}

func (x *PubsubCommandBatchRequest) Reset() {
	*x = PubsubCommandBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubsubCommandBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubsubCommandBatchRequest) ProtoMessage() {}

func (x *PubsubCommandBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubsubCommandBatchRequest.ProtoReflect.Descriptor instead.
func (*PubsubCommandBatchRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_pubsub_proto_rawDescGZIP(), []int{13}
}

func (x *PubsubCommandBatchRequest) GetSubscriberId() []byte {
	if x != nil {
		return x.SubscriberId
	}
	return nil
}

func (x *PubsubCommandBatchRequest) GetCommands() []*Command {
	if x != nil {
		return x.Commands
	}
	return nil
}

type PubsubCommandBatchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PubsubCommandBatchReply) Reset() {
	*x = PubsubCommandBatchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubsubCommandBatchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubsubCommandBatchReply) ProtoMessage() {}

func (x *PubsubCommandBatchReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_pubsub_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubsubCommandBatchReply.ProtoReflect.Descriptor instead.
func (*PubsubCommandBatchReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_pubsub_proto_rawDescGZIP(), []int{14}
}

var File_src_ray_protobuf_pubsub_proto protoreflect.FileDescriptor

var file_src_ray_protobuf_pubsub_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x72, 0x63, 0x2f, 0x72, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x1a, 0x1d, 0x73, 0x72, 0x63, 0x2f, 0x72, 0x61,
	0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x73, 0x72, 0x63, 0x2f, 0x72, 0x61, 0x79,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x73, 0x72, 0x63, 0x2f,
	0x72, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x73, 0x72, 0x63, 0x2f, 0x72, 0x61, 0x79, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x73, 0x72, 0x63, 0x2f, 0x72, 0x61, 0x79, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x09, 0x0a, 0x0a, 0x50, 0x75, 0x62, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x6b, 0x0a, 0x1e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x5f, 0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x66, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x17, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x52, 0x65, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x71, 0x0a, 0x1f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x75, 0x62,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x6a, 0x6f, 0x62, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4a, 0x6f, 0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x6a, 0x6f, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x42, 0x0a, 0x11, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x63, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x15, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x13, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x12, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x3f, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52,
	0x0f, 0x6c, 0x6f, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x51, 0x0a, 0x17, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x79, 0x74, 0x68,
	0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x70, 0x79,
	0x74, 0x68, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x5b, 0x0a, 0x1b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x18, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x42, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x0a, 0x1b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x22, 0x5d, 0x0a, 0x17, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x66, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x0d,
	0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x0c, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x66, 0x73,
	0x22, 0x9a, 0x02, 0x0a, 0x1f, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x75, 0x62, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x55, 0x72,
	0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x70, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x10, 0x0a,
	0x0e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x87, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x13, 0x75,
	0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x12, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x11, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x10, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x18, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x22, 0x14, 0x0a, 0x12, 0x55, 0x6e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xe9, 0x02, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6e,
	0x0a, 0x1e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x65, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x1b, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45,
	0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x62,
	0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x52, 0x65, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x75, 0x62,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x71, 0x0a, 0x1f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75, 0x62, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x22, 0xac, 0x01, 0x0a, 0x1e,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x12, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x1a, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x53,
	0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x49, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x1f, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x18, 0x50, 0x75, 0x62, 0x73, 0x75,
	0x62, 0x4c, 0x6f, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x16, 0x50, 0x75, 0x62, 0x73,
	0x75, 0x62, 0x4c, 0x6f, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x36, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x70,
	0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x6e, 0x0a, 0x19, 0x50, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x50, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x2a, 0xe9, 0x02, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x5f,
	0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x56, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x46, 0x5f,
	0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10,
	0x01, 0x12, 0x23, 0x0a, 0x1f, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x43, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x4f, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x13, 0x0a,
	0x0f, 0x47, 0x43, 0x53, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c,
	0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x43, 0x53, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x05, 0x12, 0x1d, 0x0a,
	0x19, 0x47, 0x43, 0x53, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18,
	0x47, 0x43, 0x53, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x54, 0x41,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x41,
	0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x41, 0x59, 0x5f, 0x4c, 0x4f,
	0x47, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x52,
	0x41, 0x59, 0x5f, 0x50, 0x59, 0x54, 0x48, 0x4f, 0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x0a, 0x12, 0x23, 0x0a, 0x1f,
	0x52, 0x41, 0x59, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10,
	0x0b, 0x32, 0xc8, 0x01, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x73, 0x75,
	0x62, 0x4c, 0x6f, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x4c, 0x6f, 0x6e,
	0x67, 0x50, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62,
	0x4c, 0x6f, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x5a, 0x0a, 0x12, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x22, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x87, 0x01, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x42, 0x0b, 0x50, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x75, 0x65, 0x69, 0x61, 0x6e, 0x2f, 0x72,
	0x61, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x72, 0x61, 0x79, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0xf8, 0x01, 0x01, 0xa2, 0x02, 0x03, 0x52, 0x52,
	0x58, 0xaa, 0x02, 0x07, 0x52, 0x61, 0x79, 0x2e, 0x52, 0x70, 0x63, 0xca, 0x02, 0x07, 0x52, 0x61,
	0x79, 0x5c, 0x52, 0x70, 0x63, 0xe2, 0x02, 0x13, 0x52, 0x61, 0x79, 0x5c, 0x52, 0x70, 0x63, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x08, 0x52, 0x61,
	0x79, 0x3a, 0x3a, 0x52, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_src_ray_protobuf_pubsub_proto_rawDescOnce sync.Once
	file_src_ray_protobuf_pubsub_proto_rawDescData = file_src_ray_protobuf_pubsub_proto_rawDesc
)

func file_src_ray_protobuf_pubsub_proto_rawDescGZIP() []byte {
	file_src_ray_protobuf_pubsub_proto_rawDescOnce.Do(func() {
		file_src_ray_protobuf_pubsub_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_ray_protobuf_pubsub_proto_rawDescData)
	})
	return file_src_ray_protobuf_pubsub_proto_rawDescData
}

var file_src_ray_protobuf_pubsub_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_src_ray_protobuf_pubsub_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_src_ray_protobuf_pubsub_proto_goTypes = []interface{}{
	(ChannelType)(0),                        // 0: ray.rpc.ChannelType
	(*PubMessage)(nil),                      // 1: ray.rpc.PubMessage
	(*WorkerObjectEvictionMessage)(nil),     // 2: ray.rpc.WorkerObjectEvictionMessage
	(*WorkerRefRemovedMessage)(nil),         // 3: ray.rpc.WorkerRefRemovedMessage
	(*WorkerObjectLocationsPubMessage)(nil), // 4: ray.rpc.WorkerObjectLocationsPubMessage
	(*FailureMessage)(nil),                  // 5: ray.rpc.FailureMessage
	(*Command)(nil),                         // 6: ray.rpc.Command
	(*UnsubscribeMessage)(nil),              // 7: ray.rpc.UnsubscribeMessage
	(*SubMessage)(nil),                      // 8: ray.rpc.SubMessage
	(*WorkerObjectEvictionSubMessage)(nil),  // 9: ray.rpc.WorkerObjectEvictionSubMessage
	(*WorkerRefRemovedSubMessage)(nil),      // 10: ray.rpc.WorkerRefRemovedSubMessage
	(*WorkerObjectLocationsSubMessage)(nil), // 11: ray.rpc.WorkerObjectLocationsSubMessage
	(*PubsubLongPollingRequest)(nil),        // 12: ray.rpc.PubsubLongPollingRequest
	(*PubsubLongPollingReply)(nil),          // 13: ray.rpc.PubsubLongPollingReply
	(*PubsubCommandBatchRequest)(nil),       // 14: ray.rpc.PubsubCommandBatchRequest
	(*PubsubCommandBatchReply)(nil),         // 15: ray.rpc.PubsubCommandBatchReply
	(*ActorTableData)(nil),                  // 16: ray.rpc.ActorTableData
	(*JobTableData)(nil),                    // 17: ray.rpc.JobTableData
	(*GcsNodeInfo)(nil),                     // 18: ray.rpc.GcsNodeInfo
	(*NodeResourceChange)(nil),              // 19: ray.rpc.NodeResourceChange
	(*WorkerDeltaData)(nil),                 // 20: ray.rpc.WorkerDeltaData
	(*ErrorTableData)(nil),                  // 21: ray.rpc.ErrorTableData
	(*LogBatch)(nil),                        // 22: ray.rpc.LogBatch
	(*PythonFunction)(nil),                  // 23: ray.rpc.PythonFunction
	(*NodeResourceUsage)(nil),               // 24: ray.rpc.NodeResourceUsage
	(*ObjectReferenceCount)(nil),            // 25: ray.rpc.ObjectReferenceCount
	(*Address)(nil),                         // 26: ray.rpc.Address
	(*ObjectReference)(nil),                 // 27: ray.rpc.ObjectReference
}
var file_src_ray_protobuf_pubsub_proto_depIdxs = []int32{
	0,  // 0: ray.rpc.PubMessage.channel_type:type_name -> ray.rpc.ChannelType
	2,  // 1: ray.rpc.PubMessage.worker_object_eviction_message:type_name -> ray.rpc.WorkerObjectEvictionMessage
	3,  // 2: ray.rpc.PubMessage.worker_ref_removed_message:type_name -> ray.rpc.WorkerRefRemovedMessage
	4,  // 3: ray.rpc.PubMessage.worker_object_locations_message:type_name -> ray.rpc.WorkerObjectLocationsPubMessage
	16, // 4: ray.rpc.PubMessage.actor_message:type_name -> ray.rpc.ActorTableData
	17, // 5: ray.rpc.PubMessage.job_message:type_name -> ray.rpc.JobTableData
	18, // 6: ray.rpc.PubMessage.node_info_message:type_name -> ray.rpc.GcsNodeInfo
	19, // 7: ray.rpc.PubMessage.node_resource_message:type_name -> ray.rpc.NodeResourceChange
	20, // 8: ray.rpc.PubMessage.worker_delta_message:type_name -> ray.rpc.WorkerDeltaData
	21, // 9: ray.rpc.PubMessage.error_info_message:type_name -> ray.rpc.ErrorTableData
	22, // 10: ray.rpc.PubMessage.log_batch_message:type_name -> ray.rpc.LogBatch
	23, // 11: ray.rpc.PubMessage.python_function_message:type_name -> ray.rpc.PythonFunction
	24, // 12: ray.rpc.PubMessage.node_resource_usage_message:type_name -> ray.rpc.NodeResourceUsage
	5,  // 13: ray.rpc.PubMessage.failure_message:type_name -> ray.rpc.FailureMessage
	25, // 14: ray.rpc.WorkerRefRemovedMessage.borrowed_refs:type_name -> ray.rpc.ObjectReferenceCount
	0,  // 15: ray.rpc.Command.channel_type:type_name -> ray.rpc.ChannelType
	7,  // 16: ray.rpc.Command.unsubscribe_message:type_name -> ray.rpc.UnsubscribeMessage
	8,  // 17: ray.rpc.Command.subscribe_message:type_name -> ray.rpc.SubMessage
	9,  // 18: ray.rpc.SubMessage.worker_object_eviction_message:type_name -> ray.rpc.WorkerObjectEvictionSubMessage
	10, // 19: ray.rpc.SubMessage.worker_ref_removed_message:type_name -> ray.rpc.WorkerRefRemovedSubMessage
	11, // 20: ray.rpc.SubMessage.worker_object_locations_message:type_name -> ray.rpc.WorkerObjectLocationsSubMessage
	26, // 21: ray.rpc.WorkerObjectEvictionSubMessage.subscriber_address:type_name -> ray.rpc.Address
	27, // 22: ray.rpc.WorkerRefRemovedSubMessage.reference:type_name -> ray.rpc.ObjectReference
	1,  // 23: ray.rpc.PubsubLongPollingReply.pub_messages:type_name -> ray.rpc.PubMessage
	6,  // 24: ray.rpc.PubsubCommandBatchRequest.commands:type_name -> ray.rpc.Command
	12, // 25: ray.rpc.SubscriberService.PubsubLongPolling:input_type -> ray.rpc.PubsubLongPollingRequest
	14, // 26: ray.rpc.SubscriberService.PubsubCommandBatch:input_type -> ray.rpc.PubsubCommandBatchRequest
	13, // 27: ray.rpc.SubscriberService.PubsubLongPolling:output_type -> ray.rpc.PubsubLongPollingReply
	15, // 28: ray.rpc.SubscriberService.PubsubCommandBatch:output_type -> ray.rpc.PubsubCommandBatchReply
	27, // [27:29] is the sub-list for method output_type
	25, // [25:27] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_src_ray_protobuf_pubsub_proto_init() }
func file_src_ray_protobuf_pubsub_proto_init() {
	if File_src_ray_protobuf_pubsub_proto != nil {
		return
	}
	file_src_ray_protobuf_common_proto_init()
	file_src_ray_protobuf_dependency_proto_init()
	file_src_ray_protobuf_gcs_proto_init()
	file_src_ray_protobuf_logging_proto_init()
	file_src_ray_protobuf_reporter_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_src_ray_protobuf_pubsub_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_pubsub_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerObjectEvictionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_pubsub_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerRefRemovedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_pubsub_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerObjectLocationsPubMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_pubsub_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_pubsub_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_pubsub_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsubscribeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_pubsub_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_pubsub_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerObjectEvictionSubMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_pubsub_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerRefRemovedSubMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_pubsub_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerObjectLocationsSubMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_pubsub_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubsubLongPollingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_pubsub_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubsubLongPollingReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_pubsub_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubsubCommandBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_pubsub_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubsubCommandBatchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_src_ray_protobuf_pubsub_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*PubMessage_WorkerObjectEvictionMessage)(nil),
		(*PubMessage_WorkerRefRemovedMessage)(nil),
		(*PubMessage_WorkerObjectLocationsMessage)(nil),
		(*PubMessage_ActorMessage)(nil),
		(*PubMessage_JobMessage)(nil),
		(*PubMessage_NodeInfoMessage)(nil),
		(*PubMessage_NodeResourceMessage)(nil),
		(*PubMessage_WorkerDeltaMessage)(nil),
		(*PubMessage_ErrorInfoMessage)(nil),
		(*PubMessage_LogBatchMessage)(nil),
		(*PubMessage_PythonFunctionMessage)(nil),
		(*PubMessage_NodeResourceUsageMessage)(nil),
		(*PubMessage_FailureMessage)(nil),
	}
	file_src_ray_protobuf_pubsub_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Command_UnsubscribeMessage)(nil),
		(*Command_SubscribeMessage)(nil),
	}
	file_src_ray_protobuf_pubsub_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*SubMessage_WorkerObjectEvictionMessage)(nil),
		(*SubMessage_WorkerRefRemovedMessage)(nil),
		(*SubMessage_WorkerObjectLocationsMessage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_ray_protobuf_pubsub_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_src_ray_protobuf_pubsub_proto_goTypes,
		DependencyIndexes: file_src_ray_protobuf_pubsub_proto_depIdxs,
		EnumInfos:         file_src_ray_protobuf_pubsub_proto_enumTypes,
		MessageInfos:      file_src_ray_protobuf_pubsub_proto_msgTypes,
	}.Build()
	File_src_ray_protobuf_pubsub_proto = out.File
	file_src_ray_protobuf_pubsub_proto_rawDesc = nil
	file_src_ray_protobuf_pubsub_proto_goTypes = nil
	file_src_ray_protobuf_pubsub_proto_depIdxs = nil
}
