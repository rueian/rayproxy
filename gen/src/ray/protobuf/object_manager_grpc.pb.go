// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: src/ray/protobuf/object_manager.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ObjectManagerServiceClient is the client API for ObjectManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjectManagerServiceClient interface {
	// Push service used to send object chunks
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushReply, error)
	// Try to pull object from remote object manager
	Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*PullReply, error)
	// Tell remote object manager to free some objects
	FreeObjects(ctx context.Context, in *FreeObjectsRequest, opts ...grpc.CallOption) (*FreeObjectsReply, error)
}

type objectManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectManagerServiceClient(cc grpc.ClientConnInterface) ObjectManagerServiceClient {
	return &objectManagerServiceClient{cc}
}

func (c *objectManagerServiceClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushReply, error) {
	out := new(PushReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.ObjectManagerService/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectManagerServiceClient) Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*PullReply, error) {
	out := new(PullReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.ObjectManagerService/Pull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectManagerServiceClient) FreeObjects(ctx context.Context, in *FreeObjectsRequest, opts ...grpc.CallOption) (*FreeObjectsReply, error) {
	out := new(FreeObjectsReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.ObjectManagerService/FreeObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectManagerServiceServer is the server API for ObjectManagerService service.
// All implementations should embed UnimplementedObjectManagerServiceServer
// for forward compatibility
type ObjectManagerServiceServer interface {
	// Push service used to send object chunks
	Push(context.Context, *PushRequest) (*PushReply, error)
	// Try to pull object from remote object manager
	Pull(context.Context, *PullRequest) (*PullReply, error)
	// Tell remote object manager to free some objects
	FreeObjects(context.Context, *FreeObjectsRequest) (*FreeObjectsReply, error)
}

// UnimplementedObjectManagerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedObjectManagerServiceServer struct {
}

func (UnimplementedObjectManagerServiceServer) Push(context.Context, *PushRequest) (*PushReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedObjectManagerServiceServer) Pull(context.Context, *PullRequest) (*PullReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (UnimplementedObjectManagerServiceServer) FreeObjects(context.Context, *FreeObjectsRequest) (*FreeObjectsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreeObjects not implemented")
}

// UnsafeObjectManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectManagerServiceServer will
// result in compilation errors.
type UnsafeObjectManagerServiceServer interface {
	mustEmbedUnimplementedObjectManagerServiceServer()
}

func RegisterObjectManagerServiceServer(s grpc.ServiceRegistrar, srv ObjectManagerServiceServer) {
	s.RegisterService(&ObjectManagerService_ServiceDesc, srv)
}

func _ObjectManagerService_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectManagerServiceServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.ObjectManagerService/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectManagerServiceServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectManagerService_Pull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectManagerServiceServer).Pull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.ObjectManagerService/Pull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectManagerServiceServer).Pull(ctx, req.(*PullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectManagerService_FreeObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreeObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectManagerServiceServer).FreeObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.ObjectManagerService/FreeObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectManagerServiceServer).FreeObjects(ctx, req.(*FreeObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ObjectManagerService_ServiceDesc is the grpc.ServiceDesc for ObjectManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObjectManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ray.rpc.ObjectManagerService",
	HandlerType: (*ObjectManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _ObjectManagerService_Push_Handler,
		},
		{
			MethodName: "Pull",
			Handler:    _ObjectManagerService_Pull_Handler,
		},
		{
			MethodName: "FreeObjects",
			Handler:    _ObjectManagerService_FreeObjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/ray/protobuf/object_manager.proto",
}
