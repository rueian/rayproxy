// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: src/ray/protobuf/pubsub.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubscriberServiceClient is the client API for SubscriberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriberServiceClient interface {
	// / The long polling request sent to the publisher for pubsub operations.
	// / It is replied once there are batch of objects that need to be published to
	// / the caller (subscriber).
	PubsubLongPolling(ctx context.Context, in *PubsubLongPollingRequest, opts ...grpc.CallOption) (*PubsubLongPollingReply, error)
	// / The pubsub command batch request used by the subscriber.
	PubsubCommandBatch(ctx context.Context, in *PubsubCommandBatchRequest, opts ...grpc.CallOption) (*PubsubCommandBatchReply, error)
}

type subscriberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriberServiceClient(cc grpc.ClientConnInterface) SubscriberServiceClient {
	return &subscriberServiceClient{cc}
}

func (c *subscriberServiceClient) PubsubLongPolling(ctx context.Context, in *PubsubLongPollingRequest, opts ...grpc.CallOption) (*PubsubLongPollingReply, error) {
	out := new(PubsubLongPollingReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.SubscriberService/PubsubLongPolling", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberServiceClient) PubsubCommandBatch(ctx context.Context, in *PubsubCommandBatchRequest, opts ...grpc.CallOption) (*PubsubCommandBatchReply, error) {
	out := new(PubsubCommandBatchReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.SubscriberService/PubsubCommandBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriberServiceServer is the server API for SubscriberService service.
// All implementations should embed UnimplementedSubscriberServiceServer
// for forward compatibility
type SubscriberServiceServer interface {
	// / The long polling request sent to the publisher for pubsub operations.
	// / It is replied once there are batch of objects that need to be published to
	// / the caller (subscriber).
	PubsubLongPolling(context.Context, *PubsubLongPollingRequest) (*PubsubLongPollingReply, error)
	// / The pubsub command batch request used by the subscriber.
	PubsubCommandBatch(context.Context, *PubsubCommandBatchRequest) (*PubsubCommandBatchReply, error)
}

// UnimplementedSubscriberServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSubscriberServiceServer struct {
}

func (UnimplementedSubscriberServiceServer) PubsubLongPolling(context.Context, *PubsubLongPollingRequest) (*PubsubLongPollingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PubsubLongPolling not implemented")
}
func (UnimplementedSubscriberServiceServer) PubsubCommandBatch(context.Context, *PubsubCommandBatchRequest) (*PubsubCommandBatchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PubsubCommandBatch not implemented")
}

// UnsafeSubscriberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriberServiceServer will
// result in compilation errors.
type UnsafeSubscriberServiceServer interface {
	mustEmbedUnimplementedSubscriberServiceServer()
}

func RegisterSubscriberServiceServer(s grpc.ServiceRegistrar, srv SubscriberServiceServer) {
	s.RegisterService(&SubscriberService_ServiceDesc, srv)
}

func _SubscriberService_PubsubLongPolling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubsubLongPollingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberServiceServer).PubsubLongPolling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.SubscriberService/PubsubLongPolling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberServiceServer).PubsubLongPolling(ctx, req.(*PubsubLongPollingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberService_PubsubCommandBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubsubCommandBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberServiceServer).PubsubCommandBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.SubscriberService/PubsubCommandBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberServiceServer).PubsubCommandBatch(ctx, req.(*PubsubCommandBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriberService_ServiceDesc is the grpc.ServiceDesc for SubscriberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ray.rpc.SubscriberService",
	HandlerType: (*SubscriberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PubsubLongPolling",
			Handler:    _SubscriberService_PubsubLongPolling_Handler,
		},
		{
			MethodName: "PubsubCommandBatch",
			Handler:    _SubscriberService_PubsubCommandBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/ray/protobuf/pubsub.proto",
}
