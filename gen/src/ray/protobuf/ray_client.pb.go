// Copyright 2020 The Ray Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: src/ray/protobuf/ray_client.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Type int32

const (
	Type_DEFAULT Type = 0
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "DEFAULT",
	}
	Type_value = map[string]int32{
		"DEFAULT": 0,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_ray_client_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_ray_client_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{0}
}

type Arg_Locality int32

const (
	Arg_INTERNED  Arg_Locality = 0
	Arg_REFERENCE Arg_Locality = 1
)

// Enum value maps for Arg_Locality.
var (
	Arg_Locality_name = map[int32]string{
		0: "INTERNED",
		1: "REFERENCE",
	}
	Arg_Locality_value = map[string]int32{
		"INTERNED":  0,
		"REFERENCE": 1,
	}
)

func (x Arg_Locality) Enum() *Arg_Locality {
	p := new(Arg_Locality)
	*p = x
	return p
}

func (x Arg_Locality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Arg_Locality) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_ray_client_proto_enumTypes[1].Descriptor()
}

func (Arg_Locality) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_ray_client_proto_enumTypes[1]
}

func (x Arg_Locality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Arg_Locality.Descriptor instead.
func (Arg_Locality) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{0, 0}
}

type ClientTask_RemoteExecType int32

const (
	ClientTask_FUNCTION      ClientTask_RemoteExecType = 0
	ClientTask_ACTOR         ClientTask_RemoteExecType = 1
	ClientTask_METHOD        ClientTask_RemoteExecType = 2
	ClientTask_STATIC_METHOD ClientTask_RemoteExecType = 3
	ClientTask_NAMED_ACTOR   ClientTask_RemoteExecType = 4
)

// Enum value maps for ClientTask_RemoteExecType.
var (
	ClientTask_RemoteExecType_name = map[int32]string{
		0: "FUNCTION",
		1: "ACTOR",
		2: "METHOD",
		3: "STATIC_METHOD",
		4: "NAMED_ACTOR",
	}
	ClientTask_RemoteExecType_value = map[string]int32{
		"FUNCTION":      0,
		"ACTOR":         1,
		"METHOD":        2,
		"STATIC_METHOD": 3,
		"NAMED_ACTOR":   4,
	}
)

func (x ClientTask_RemoteExecType) Enum() *ClientTask_RemoteExecType {
	p := new(ClientTask_RemoteExecType)
	*p = x
	return p
}

func (x ClientTask_RemoteExecType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientTask_RemoteExecType) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_ray_client_proto_enumTypes[2].Descriptor()
}

func (ClientTask_RemoteExecType) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_ray_client_proto_enumTypes[2]
}

func (x ClientTask_RemoteExecType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientTask_RemoteExecType.Descriptor instead.
func (ClientTask_RemoteExecType) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{2, 0}
}

// Namespace the enum, as it collides in the overall package.
type ClusterInfoType_TypeEnum int32

const (
	ClusterInfoType_IS_INITIALIZED      ClusterInfoType_TypeEnum = 0
	ClusterInfoType_NODES               ClusterInfoType_TypeEnum = 1
	ClusterInfoType_CLUSTER_RESOURCES   ClusterInfoType_TypeEnum = 2
	ClusterInfoType_AVAILABLE_RESOURCES ClusterInfoType_TypeEnum = 3
	ClusterInfoType_RUNTIME_CONTEXT     ClusterInfoType_TypeEnum = 4
	ClusterInfoType_TIMELINE            ClusterInfoType_TypeEnum = 5
	ClusterInfoType_PING                ClusterInfoType_TypeEnum = 6
)

// Enum value maps for ClusterInfoType_TypeEnum.
var (
	ClusterInfoType_TypeEnum_name = map[int32]string{
		0: "IS_INITIALIZED",
		1: "NODES",
		2: "CLUSTER_RESOURCES",
		3: "AVAILABLE_RESOURCES",
		4: "RUNTIME_CONTEXT",
		5: "TIMELINE",
		6: "PING",
	}
	ClusterInfoType_TypeEnum_value = map[string]int32{
		"IS_INITIALIZED":      0,
		"NODES":               1,
		"CLUSTER_RESOURCES":   2,
		"AVAILABLE_RESOURCES": 3,
		"RUNTIME_CONTEXT":     4,
		"TIMELINE":            5,
		"PING":                6,
	}
)

func (x ClusterInfoType_TypeEnum) Enum() *ClusterInfoType_TypeEnum {
	p := new(ClusterInfoType_TypeEnum)
	*p = x
	return p
}

func (x ClusterInfoType_TypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterInfoType_TypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_ray_client_proto_enumTypes[3].Descriptor()
}

func (ClusterInfoType_TypeEnum) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_ray_client_proto_enumTypes[3]
}

func (x ClusterInfoType_TypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterInfoType_TypeEnum.Descriptor instead.
func (ClusterInfoType_TypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{10, 0}
}

// An argument to a ClientTask.
type Arg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of argument this is -- whether a data blob or a reference.
	Local Arg_Locality `protobuf:"varint,1,opt,name=local,proto3,enum=ray.rpc.Arg_Locality" json:"local,omitempty"`
	// The reference id, if a reference.
	ReferenceId []byte `protobuf:"bytes,2,opt,name=reference_id,json=referenceId,proto3" json:"reference_id,omitempty"`
	// A data blob, if passed in-band.
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// How to decode this data blob.
	Type Type `protobuf:"varint,4,opt,name=type,proto3,enum=ray.rpc.Type" json:"type,omitempty"`
}

func (x *Arg) Reset() {
	*x = Arg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Arg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Arg) ProtoMessage() {}

func (x *Arg) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Arg.ProtoReflect.Descriptor instead.
func (*Arg) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{0}
}

func (x *Arg) GetLocal() Arg_Locality {
	if x != nil {
		return x.Local
	}
	return Arg_INTERNED
}

func (x *Arg) GetReferenceId() []byte {
	if x != nil {
		return x.ReferenceId
	}
	return nil
}

func (x *Arg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Arg) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_DEFAULT
}

// A message representing the valid options to modify a task exectution
//
// TODO(barakmich): In the longer term, if everything were a client,
// this message could be the actual standard for which options are
// allowed in the API. Today, however, it's a bit flexible and defined in the
// Python code. So for now, it's a stand-in message with a pickle field, but
// this is forwards-compatible with deprecating that field and instituting
// strongly defined and typed fields, without migrating the original ClientTask.
type TaskOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PickledOptions []byte `protobuf:"bytes,1,opt,name=pickled_options,json=pickledOptions,proto3" json:"pickled_options,omitempty"`
}

func (x *TaskOptions) Reset() {
	*x = TaskOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskOptions) ProtoMessage() {}

func (x *TaskOptions) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskOptions.ProtoReflect.Descriptor instead.
func (*TaskOptions) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{1}
}

func (x *TaskOptions) GetPickledOptions() []byte {
	if x != nil {
		return x.PickledOptions
	}
	return nil
}

// Represents one unit of work to be executed by the server.
type ClientTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Which type of work this request represents.
	Type ClientTask_RemoteExecType `protobuf:"varint,1,opt,name=type,proto3,enum=ray.rpc.ClientTask_RemoteExecType" json:"type,omitempty"`
	// A name parameter, if the payload can be called in more than one way
	// (like a method on a payload object).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// A reference to the payload.
	PayloadId []byte `protobuf:"bytes,3,opt,name=payload_id,json=payloadId,proto3" json:"payload_id,omitempty"`
	// Positional parameters to pass to this call.
	Args []*Arg `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
	// Keyword parameters to pass to this call.
	Kwargs map[string]*Arg `protobuf:"bytes,5,rep,name=kwargs,proto3" json:"kwargs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The ID of the client namespace associated with the Datapath stream
	// making this request.
	ClientId string `protobuf:"bytes,6,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Options for modifying the remote task execution environment.
	Options *TaskOptions `protobuf:"bytes,7,opt,name=options,proto3" json:"options,omitempty"`
	// Options passed to create the default remote task excution environment.
	BaselineOptions *TaskOptions `protobuf:"bytes,8,opt,name=baseline_options,json=baselineOptions,proto3" json:"baseline_options,omitempty"`
	// A namespace parameter.
	Namespace string `protobuf:"bytes,9,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *ClientTask) Reset() {
	*x = ClientTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientTask) ProtoMessage() {}

func (x *ClientTask) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientTask.ProtoReflect.Descriptor instead.
func (*ClientTask) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{2}
}

func (x *ClientTask) GetType() ClientTask_RemoteExecType {
	if x != nil {
		return x.Type
	}
	return ClientTask_FUNCTION
}

func (x *ClientTask) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClientTask) GetPayloadId() []byte {
	if x != nil {
		return x.PayloadId
	}
	return nil
}

func (x *ClientTask) GetArgs() []*Arg {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ClientTask) GetKwargs() map[string]*Arg {
	if x != nil {
		return x.Kwargs
	}
	return nil
}

func (x *ClientTask) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ClientTask) GetOptions() *TaskOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ClientTask) GetBaselineOptions() *TaskOptions {
	if x != nil {
		return x.BaselineOptions
	}
	return nil
}

func (x *ClientTask) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type ClientTaskTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Was the task successful?
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	// A reference to the returned values from the execution.
	ReturnIds [][]byte `protobuf:"bytes,2,rep,name=return_ids,json=returnIds,proto3" json:"return_ids,omitempty"`
	// If unsuccessful, an encoding of the error.
	Error []byte `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ClientTaskTicket) Reset() {
	*x = ClientTaskTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientTaskTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientTaskTicket) ProtoMessage() {}

func (x *ClientTaskTicket) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientTaskTicket.ProtoReflect.Descriptor instead.
func (*ClientTaskTicket) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{3}
}

func (x *ClientTaskTicket) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *ClientTaskTicket) GetReturnIds() [][]byte {
	if x != nil {
		return x.ReturnIds
	}
	return nil
}

func (x *ClientTaskTicket) GetError() []byte {
	if x != nil {
		return x.Error
	}
	return nil
}

// Delivers data to the server
type PutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The data blob for the server to store.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// The ID generated by the client for tracking this object before it has a
	// real reference ID. Used to late-bind references made on the client side
	// during pickling.
	// For example, the data field in this message contains an Actor class that
	// refers to its own ActorClass -- which needs to know the ObjectRef
	// ID that will return from this RPC, but that clearly doesn't exist yet.
	//
	// Empty if no late binding is possible, as in a normal put().
	ClientRefId []byte `protobuf:"bytes,2,opt,name=client_ref_id,json=clientRefId,proto3" json:"client_ref_id,omitempty"`
	// Identifies which chunk the data belongs to
	ChunkId int32 `protobuf:"varint,3,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	// Total number of chunks
	TotalChunks int32 `protobuf:"varint,4,opt,name=total_chunks,json=totalChunks,proto3" json:"total_chunks,omitempty"`
	// Total size in bytes of the data being put
	TotalSize int64 `protobuf:"varint,5,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *PutRequest) Reset() {
	*x = PutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutRequest) ProtoMessage() {}

func (x *PutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutRequest.ProtoReflect.Descriptor instead.
func (*PutRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{4}
}

func (x *PutRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PutRequest) GetClientRefId() []byte {
	if x != nil {
		return x.ClientRefId
	}
	return nil
}

func (x *PutRequest) GetChunkId() int32 {
	if x != nil {
		return x.ChunkId
	}
	return 0
}

func (x *PutRequest) GetTotalChunks() int32 {
	if x != nil {
		return x.TotalChunks
	}
	return 0
}

func (x *PutRequest) GetTotalSize() int64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type PutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference ID for the data that the server has stored.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Whether or not the put was successful.
	Valid bool `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
	// An error blob (for example, an exception) on failure.
	Error []byte `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *PutResponse) Reset() {
	*x = PutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutResponse) ProtoMessage() {}

func (x *PutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutResponse.ProtoReflect.Descriptor instead.
func (*PutResponse) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{5}
}

func (x *PutResponse) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PutResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *PutResponse) GetError() []byte {
	if x != nil {
		return x.Error
	}
	return nil
}

// Requests data from the server.
type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference ID for the requested object data
	Ids [][]byte `protobuf:"bytes,4,rep,name=ids,proto3" json:"ids,omitempty"`
	// Length of time to wait for data to be available, in seconds. Zero is no timeout.
	Timeout float32 `protobuf:"fixed32,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Whether to schedule this as a callback on the server side.
	Asynchronous bool `protobuf:"varint,3,opt,name=asynchronous,proto3" json:"asynchronous,omitempty"`
	// The chunk_id to start retrieving data from, in case the request is interrupted
	// after partial retrieval by a disconnect
	StartChunkId int32 `protobuf:"varint,5,opt,name=start_chunk_id,json=startChunkId,proto3" json:"start_chunk_id,omitempty"`
	// Deprecated fields.
	//
	// Deprecated: Do not use.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{6}
}

func (x *GetRequest) GetIds() [][]byte {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *GetRequest) GetTimeout() float32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *GetRequest) GetAsynchronous() bool {
	if x != nil {
		return x.Asynchronous
	}
	return false
}

func (x *GetRequest) GetStartChunkId() int32 {
	if x != nil {
		return x.StartChunkId
	}
	return 0
}

// Deprecated: Do not use.
func (x *GetRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether or not the data was successfully retrieved
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	// The data blob containing a list of serialized objects, on success.
	// Total size and the order of objects match those in `GetRequest.ids`.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// An error blob (for example, an exception) on failure.
	Error []byte `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	// Identifies which chunk the data belongs to
	ChunkId int32 `protobuf:"varint,4,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	// Total number of chunks
	TotalChunks int32 `protobuf:"varint,5,opt,name=total_chunks,json=totalChunks,proto3" json:"total_chunks,omitempty"`
	// Total size in bytes of the data being retrieved
	TotalSize uint64 `protobuf:"varint,6,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{7}
}

func (x *GetResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *GetResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetResponse) GetError() []byte {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetResponse) GetChunkId() int32 {
	if x != nil {
		return x.ChunkId
	}
	return 0
}

func (x *GetResponse) GetTotalChunks() int32 {
	if x != nil {
		return x.TotalChunks
	}
	return 0
}

func (x *GetResponse) GetTotalSize() uint64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// Waits for data to be ready on the server, with a timeout.
type WaitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The IDs of the data to wait for ready status.
	ObjectIds [][]byte `protobuf:"bytes,1,rep,name=object_ids,json=objectIds,proto3" json:"object_ids,omitempty"`
	// How many of the above ids to wait for before returning.
	NumReturns int64 `protobuf:"varint,2,opt,name=num_returns,json=numReturns,proto3" json:"num_returns,omitempty"`
	// How long to wait for these IDs to become ready.
	Timeout float64 `protobuf:"fixed64,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// The Client namespace associated with the Datapath stream that holds these IDs.
	ClientId string `protobuf:"bytes,4,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *WaitRequest) Reset() {
	*x = WaitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitRequest) ProtoMessage() {}

func (x *WaitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitRequest.ProtoReflect.Descriptor instead.
func (*WaitRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{8}
}

func (x *WaitRequest) GetObjectIds() [][]byte {
	if x != nil {
		return x.ObjectIds
	}
	return nil
}

func (x *WaitRequest) GetNumReturns() int64 {
	if x != nil {
		return x.NumReturns
	}
	return 0
}

func (x *WaitRequest) GetTimeout() float64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *WaitRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

type WaitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid              bool     `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	ReadyObjectIds     [][]byte `protobuf:"bytes,2,rep,name=ready_object_ids,json=readyObjectIds,proto3" json:"ready_object_ids,omitempty"`
	RemainingObjectIds [][]byte `protobuf:"bytes,3,rep,name=remaining_object_ids,json=remainingObjectIds,proto3" json:"remaining_object_ids,omitempty"`
}

func (x *WaitResponse) Reset() {
	*x = WaitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitResponse) ProtoMessage() {}

func (x *WaitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitResponse.ProtoReflect.Descriptor instead.
func (*WaitResponse) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{9}
}

func (x *WaitResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *WaitResponse) GetReadyObjectIds() [][]byte {
	if x != nil {
		return x.ReadyObjectIds
	}
	return nil
}

func (x *WaitResponse) GetRemainingObjectIds() [][]byte {
	if x != nil {
		return x.RemainingObjectIds
	}
	return nil
}

type ClusterInfoType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClusterInfoType) Reset() {
	*x = ClusterInfoType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInfoType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInfoType) ProtoMessage() {}

func (x *ClusterInfoType) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInfoType.ProtoReflect.Descriptor instead.
func (*ClusterInfoType) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{10}
}

type ClusterInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ClusterInfoType_TypeEnum `protobuf:"varint,1,opt,name=type,proto3,enum=ray.rpc.ClusterInfoType_TypeEnum" json:"type,omitempty"`
}

func (x *ClusterInfoRequest) Reset() {
	*x = ClusterInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInfoRequest) ProtoMessage() {}

func (x *ClusterInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInfoRequest.ProtoReflect.Descriptor instead.
func (*ClusterInfoRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{11}
}

func (x *ClusterInfoRequest) GetType() ClusterInfoType_TypeEnum {
	if x != nil {
		return x.Type
	}
	return ClusterInfoType_IS_INITIALIZED
}

type ClusterInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ClusterInfoType_TypeEnum `protobuf:"varint,1,opt,name=type,proto3,enum=ray.rpc.ClusterInfoType_TypeEnum" json:"type,omitempty"`
	// Types that are assignable to ResponseType:
	//
	//	*ClusterInfoResponse_Json
	//	*ClusterInfoResponse_ResourceTable_
	//	*ClusterInfoResponse_RuntimeContext_
	ResponseType isClusterInfoResponse_ResponseType `protobuf_oneof:"response_type"`
}

func (x *ClusterInfoResponse) Reset() {
	*x = ClusterInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInfoResponse) ProtoMessage() {}

func (x *ClusterInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInfoResponse.ProtoReflect.Descriptor instead.
func (*ClusterInfoResponse) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{12}
}

func (x *ClusterInfoResponse) GetType() ClusterInfoType_TypeEnum {
	if x != nil {
		return x.Type
	}
	return ClusterInfoType_IS_INITIALIZED
}

func (m *ClusterInfoResponse) GetResponseType() isClusterInfoResponse_ResponseType {
	if m != nil {
		return m.ResponseType
	}
	return nil
}

func (x *ClusterInfoResponse) GetJson() string {
	if x, ok := x.GetResponseType().(*ClusterInfoResponse_Json); ok {
		return x.Json
	}
	return ""
}

func (x *ClusterInfoResponse) GetResourceTable() *ClusterInfoResponse_ResourceTable {
	if x, ok := x.GetResponseType().(*ClusterInfoResponse_ResourceTable_); ok {
		return x.ResourceTable
	}
	return nil
}

func (x *ClusterInfoResponse) GetRuntimeContext() *ClusterInfoResponse_RuntimeContext {
	if x, ok := x.GetResponseType().(*ClusterInfoResponse_RuntimeContext_); ok {
		return x.RuntimeContext
	}
	return nil
}

type isClusterInfoResponse_ResponseType interface {
	isClusterInfoResponse_ResponseType()
}

type ClusterInfoResponse_Json struct {
	Json string `protobuf:"bytes,2,opt,name=json,proto3,oneof"`
}

type ClusterInfoResponse_ResourceTable_ struct {
	ResourceTable *ClusterInfoResponse_ResourceTable `protobuf:"bytes,3,opt,name=resource_table,json=resourceTable,proto3,oneof"`
}

type ClusterInfoResponse_RuntimeContext_ struct {
	RuntimeContext *ClusterInfoResponse_RuntimeContext `protobuf:"bytes,4,opt,name=runtime_context,json=runtimeContext,proto3,oneof"`
}

func (*ClusterInfoResponse_Json) isClusterInfoResponse_ResponseType() {}

func (*ClusterInfoResponse_ResourceTable_) isClusterInfoResponse_ResponseType() {}

func (*ClusterInfoResponse_RuntimeContext_) isClusterInfoResponse_ResponseType() {}

type TerminateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Types that are assignable to TerminateType:
	//
	//	*TerminateRequest_Actor
	//	*TerminateRequest_TaskObject
	TerminateType isTerminateRequest_TerminateType `protobuf_oneof:"terminate_type"`
}

func (x *TerminateRequest) Reset() {
	*x = TerminateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateRequest) ProtoMessage() {}

func (x *TerminateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateRequest.ProtoReflect.Descriptor instead.
func (*TerminateRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{13}
}

func (x *TerminateRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (m *TerminateRequest) GetTerminateType() isTerminateRequest_TerminateType {
	if m != nil {
		return m.TerminateType
	}
	return nil
}

func (x *TerminateRequest) GetActor() *TerminateRequest_ActorTerminate {
	if x, ok := x.GetTerminateType().(*TerminateRequest_Actor); ok {
		return x.Actor
	}
	return nil
}

func (x *TerminateRequest) GetTaskObject() *TerminateRequest_TaskObjectTerminate {
	if x, ok := x.GetTerminateType().(*TerminateRequest_TaskObject); ok {
		return x.TaskObject
	}
	return nil
}

type isTerminateRequest_TerminateType interface {
	isTerminateRequest_TerminateType()
}

type TerminateRequest_Actor struct {
	Actor *TerminateRequest_ActorTerminate `protobuf:"bytes,2,opt,name=actor,proto3,oneof"`
}

type TerminateRequest_TaskObject struct {
	TaskObject *TerminateRequest_TaskObjectTerminate `protobuf:"bytes,3,opt,name=task_object,json=taskObject,proto3,oneof"`
}

func (*TerminateRequest_Actor) isTerminateRequest_TerminateType() {}

func (*TerminateRequest_TaskObject) isTerminateRequest_TerminateType() {}

type TerminateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *TerminateResponse) Reset() {
	*x = TerminateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateResponse) ProtoMessage() {}

func (x *TerminateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateResponse.ProtoReflect.Descriptor instead.
func (*TerminateResponse) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{14}
}

func (x *TerminateResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type KVExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *KVExistsRequest) Reset() {
	*x = KVExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVExistsRequest) ProtoMessage() {}

func (x *KVExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVExistsRequest.ProtoReflect.Descriptor instead.
func (*KVExistsRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{15}
}

func (x *KVExistsRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type KVExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *KVExistsResponse) Reset() {
	*x = KVExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVExistsResponse) ProtoMessage() {}

func (x *KVExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVExistsResponse.ProtoReflect.Descriptor instead.
func (*KVExistsResponse) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{16}
}

func (x *KVExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type KVGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *KVGetRequest) Reset() {
	*x = KVGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVGetRequest) ProtoMessage() {}

func (x *KVGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVGetRequest.ProtoReflect.Descriptor instead.
func (*KVGetRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{17}
}

func (x *KVGetRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type KVGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Not set when key does not exist.
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *KVGetResponse) Reset() {
	*x = KVGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVGetResponse) ProtoMessage() {}

func (x *KVGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVGetResponse.ProtoReflect.Descriptor instead.
func (*KVGetResponse) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{18}
}

func (x *KVGetResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type KVPutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value     []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Overwrite bool   `protobuf:"varint,3,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
}

func (x *KVPutRequest) Reset() {
	*x = KVPutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVPutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVPutRequest) ProtoMessage() {}

func (x *KVPutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVPutRequest.ProtoReflect.Descriptor instead.
func (*KVPutRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{19}
}

func (x *KVPutRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KVPutRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *KVPutRequest) GetOverwrite() bool {
	if x != nil {
		return x.Overwrite
	}
	return false
}

type KVPutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlreadyExists bool `protobuf:"varint,1,opt,name=already_exists,json=alreadyExists,proto3" json:"already_exists,omitempty"`
}

func (x *KVPutResponse) Reset() {
	*x = KVPutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVPutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVPutResponse) ProtoMessage() {}

func (x *KVPutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVPutResponse.ProtoReflect.Descriptor instead.
func (*KVPutResponse) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{20}
}

func (x *KVPutResponse) GetAlreadyExists() bool {
	if x != nil {
		return x.AlreadyExists
	}
	return false
}

type KVDelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *KVDelRequest) Reset() {
	*x = KVDelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVDelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVDelRequest) ProtoMessage() {}

func (x *KVDelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVDelRequest.ProtoReflect.Descriptor instead.
func (*KVDelRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{21}
}

func (x *KVDelRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type KVDelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KVDelResponse) Reset() {
	*x = KVDelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVDelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVDelResponse) ProtoMessage() {}

func (x *KVDelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVDelResponse.ProtoReflect.Descriptor instead.
func (*KVDelResponse) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{22}
}

type KVListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix []byte `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *KVListRequest) Reset() {
	*x = KVListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVListRequest) ProtoMessage() {}

func (x *KVListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVListRequest.ProtoReflect.Descriptor instead.
func (*KVListRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{23}
}

func (x *KVListRequest) GetPrefix() []byte {
	if x != nil {
		return x.Prefix
	}
	return nil
}

type KVListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys [][]byte `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *KVListResponse) Reset() {
	*x = KVListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVListResponse) ProtoMessage() {}

func (x *KVListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVListResponse.ProtoReflect.Descriptor instead.
func (*KVListResponse) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{24}
}

func (x *KVListResponse) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

type InitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// job_config of ray.init
	JobConfig            []byte `protobuf:"bytes,1,opt,name=job_config,json=jobConfig,proto3" json:"job_config,omitempty"`
	RayInitKwargs        string `protobuf:"bytes,2,opt,name=ray_init_kwargs,json=rayInitKwargs,proto3" json:"ray_init_kwargs,omitempty"`
	ReconnectGracePeriod int32  `protobuf:"varint,3,opt,name=reconnect_grace_period,json=reconnectGracePeriod,proto3" json:"reconnect_grace_period,omitempty"`
}

func (x *InitRequest) Reset() {
	*x = InitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitRequest) ProtoMessage() {}

func (x *InitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitRequest.ProtoReflect.Descriptor instead.
func (*InitRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{25}
}

func (x *InitRequest) GetJobConfig() []byte {
	if x != nil {
		return x.JobConfig
	}
	return nil
}

func (x *InitRequest) GetRayInitKwargs() string {
	if x != nil {
		return x.RayInitKwargs
	}
	return ""
}

func (x *InitRequest) GetReconnectGracePeriod() int32 {
	if x != nil {
		return x.ReconnectGracePeriod
	}
	return 0
}

type InitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok  bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *InitResponse) Reset() {
	*x = InitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitResponse) ProtoMessage() {}

func (x *InitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitResponse.ProtoReflect.Descriptor instead.
func (*InitResponse) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{26}
}

func (x *InitResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *InitResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type PrepRuntimeEnvRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PrepRuntimeEnvRequest) Reset() {
	*x = PrepRuntimeEnvRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepRuntimeEnvRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepRuntimeEnvRequest) ProtoMessage() {}

func (x *PrepRuntimeEnvRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepRuntimeEnvRequest.ProtoReflect.Descriptor instead.
func (*PrepRuntimeEnvRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{27}
}

type PrepRuntimeEnvResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PrepRuntimeEnvResponse) Reset() {
	*x = PrepRuntimeEnvResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepRuntimeEnvResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepRuntimeEnvResponse) ProtoMessage() {}

func (x *PrepRuntimeEnvResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepRuntimeEnvResponse.ProtoReflect.Descriptor instead.
func (*PrepRuntimeEnvResponse) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{28}
}

type ClientListNamedActorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllNamespaces bool `protobuf:"varint,1,opt,name=all_namespaces,json=allNamespaces,proto3" json:"all_namespaces,omitempty"`
}

func (x *ClientListNamedActorsRequest) Reset() {
	*x = ClientListNamedActorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientListNamedActorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientListNamedActorsRequest) ProtoMessage() {}

func (x *ClientListNamedActorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientListNamedActorsRequest.ProtoReflect.Descriptor instead.
func (*ClientListNamedActorsRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{29}
}

func (x *ClientListNamedActorsRequest) GetAllNamespaces() bool {
	if x != nil {
		return x.AllNamespaces
	}
	return false
}

type ClientListNamedActorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorsJson string `protobuf:"bytes,1,opt,name=actors_json,json=actorsJson,proto3" json:"actors_json,omitempty"`
}

func (x *ClientListNamedActorsResponse) Reset() {
	*x = ClientListNamedActorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientListNamedActorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientListNamedActorsResponse) ProtoMessage() {}

func (x *ClientListNamedActorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientListNamedActorsResponse.ProtoReflect.Descriptor instead.
func (*ClientListNamedActorsResponse) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{30}
}

func (x *ClientListNamedActorsResponse) GetActorsJson() string {
	if x != nil {
		return x.ActorsJson
	}
	return ""
}

type ReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The IDs to release from the server; the client connected on this stream no
	// longer holds a reference to them.
	Ids [][]byte `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ReleaseRequest) Reset() {
	*x = ReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseRequest) ProtoMessage() {}

func (x *ReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseRequest.ProtoReflect.Descriptor instead.
func (*ReleaseRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{31}
}

func (x *ReleaseRequest) GetIds() [][]byte {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For each requested ID, whether or not it was released.
	Ok []bool `protobuf:"varint,2,rep,packed,name=ok,proto3" json:"ok,omitempty"`
}

func (x *ReleaseResponse) Reset() {
	*x = ReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseResponse) ProtoMessage() {}

func (x *ReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseResponse.ProtoReflect.Descriptor instead.
func (*ReleaseResponse) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{32}
}

func (x *ReleaseResponse) GetOk() []bool {
	if x != nil {
		return x.Ok
	}
	return nil
}

type ConnectionInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConnectionInfoRequest) Reset() {
	*x = ConnectionInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionInfoRequest) ProtoMessage() {}

func (x *ConnectionInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionInfoRequest.ProtoReflect.Descriptor instead.
func (*ConnectionInfoRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{33}
}

type ConnectionInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of data clients connected to the server, including the caller.
	NumClients int32 `protobuf:"varint,1,opt,name=num_clients,json=numClients,proto3" json:"num_clients,omitempty"`
	// The Ray version (e.g., "1.2.0").
	RayVersion string `protobuf:"bytes,2,opt,name=ray_version,json=rayVersion,proto3" json:"ray_version,omitempty"`
	// The Ray commit (git sha1 hash).
	RayCommit string `protobuf:"bytes,3,opt,name=ray_commit,json=rayCommit,proto3" json:"ray_commit,omitempty"`
	// The Python version (e.g., "3.7.2").
	PythonVersion string `protobuf:"bytes,4,opt,name=python_version,json=pythonVersion,proto3" json:"python_version,omitempty"`
	// The protocol version of the server (e.g., "2020-02-01").
	ProtocolVersion string `protobuf:"bytes,5,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
}

func (x *ConnectionInfoResponse) Reset() {
	*x = ConnectionInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionInfoResponse) ProtoMessage() {}

func (x *ConnectionInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionInfoResponse.ProtoReflect.Descriptor instead.
func (*ConnectionInfoResponse) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{34}
}

func (x *ConnectionInfoResponse) GetNumClients() int32 {
	if x != nil {
		return x.NumClients
	}
	return 0
}

func (x *ConnectionInfoResponse) GetRayVersion() string {
	if x != nil {
		return x.RayVersion
	}
	return ""
}

func (x *ConnectionInfoResponse) GetRayCommit() string {
	if x != nil {
		return x.RayCommit
	}
	return ""
}

func (x *ConnectionInfoResponse) GetPythonVersion() string {
	if x != nil {
		return x.PythonVersion
	}
	return ""
}

func (x *ConnectionInfoResponse) GetProtocolVersion() string {
	if x != nil {
		return x.ProtocolVersion
	}
	return ""
}

type ConnectionCleanupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConnectionCleanupRequest) Reset() {
	*x = ConnectionCleanupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionCleanupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionCleanupRequest) ProtoMessage() {}

func (x *ConnectionCleanupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionCleanupRequest.ProtoReflect.Descriptor instead.
func (*ConnectionCleanupRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{35}
}

type ConnectionCleanupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConnectionCleanupResponse) Reset() {
	*x = ConnectionCleanupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionCleanupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionCleanupResponse) ProtoMessage() {}

func (x *ConnectionCleanupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionCleanupResponse.ProtoReflect.Descriptor instead.
func (*ConnectionCleanupResponse) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{36}
}

type AcknowledgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Used to acknowledge that all requests up to the given req_id have been
	// received
	ReqId int32 `protobuf:"varint,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
}

func (x *AcknowledgeRequest) Reset() {
	*x = AcknowledgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcknowledgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcknowledgeRequest) ProtoMessage() {}

func (x *AcknowledgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcknowledgeRequest.ProtoReflect.Descriptor instead.
func (*AcknowledgeRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{37}
}

func (x *AcknowledgeRequest) GetReqId() int32 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

type DataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An incrementing counter of request IDs on the Datapath,
	// to match requests with responses asynchronously.
	ReqId int32 `protobuf:"varint,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	// Types that are assignable to Type:
	//
	//	*DataRequest_Get
	//	*DataRequest_Put
	//	*DataRequest_Release
	//	*DataRequest_ConnectionInfo
	//	*DataRequest_Init
	//	*DataRequest_PrepRuntimeEnv
	//	*DataRequest_ConnectionCleanup
	//	*DataRequest_Acknowledge
	//	*DataRequest_Task
	//	*DataRequest_Terminate
	//	*DataRequest_ListNamedActors
	Type isDataRequest_Type `protobuf_oneof:"type"`
}

func (x *DataRequest) Reset() {
	*x = DataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRequest) ProtoMessage() {}

func (x *DataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRequest.ProtoReflect.Descriptor instead.
func (*DataRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{38}
}

func (x *DataRequest) GetReqId() int32 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

func (m *DataRequest) GetType() isDataRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *DataRequest) GetGet() *GetRequest {
	if x, ok := x.GetType().(*DataRequest_Get); ok {
		return x.Get
	}
	return nil
}

func (x *DataRequest) GetPut() *PutRequest {
	if x, ok := x.GetType().(*DataRequest_Put); ok {
		return x.Put
	}
	return nil
}

func (x *DataRequest) GetRelease() *ReleaseRequest {
	if x, ok := x.GetType().(*DataRequest_Release); ok {
		return x.Release
	}
	return nil
}

func (x *DataRequest) GetConnectionInfo() *ConnectionInfoRequest {
	if x, ok := x.GetType().(*DataRequest_ConnectionInfo); ok {
		return x.ConnectionInfo
	}
	return nil
}

func (x *DataRequest) GetInit() *InitRequest {
	if x, ok := x.GetType().(*DataRequest_Init); ok {
		return x.Init
	}
	return nil
}

func (x *DataRequest) GetPrepRuntimeEnv() *PrepRuntimeEnvRequest {
	if x, ok := x.GetType().(*DataRequest_PrepRuntimeEnv); ok {
		return x.PrepRuntimeEnv
	}
	return nil
}

func (x *DataRequest) GetConnectionCleanup() *ConnectionCleanupRequest {
	if x, ok := x.GetType().(*DataRequest_ConnectionCleanup); ok {
		return x.ConnectionCleanup
	}
	return nil
}

func (x *DataRequest) GetAcknowledge() *AcknowledgeRequest {
	if x, ok := x.GetType().(*DataRequest_Acknowledge); ok {
		return x.Acknowledge
	}
	return nil
}

func (x *DataRequest) GetTask() *ClientTask {
	if x, ok := x.GetType().(*DataRequest_Task); ok {
		return x.Task
	}
	return nil
}

func (x *DataRequest) GetTerminate() *TerminateRequest {
	if x, ok := x.GetType().(*DataRequest_Terminate); ok {
		return x.Terminate
	}
	return nil
}

func (x *DataRequest) GetListNamedActors() *ClientListNamedActorsRequest {
	if x, ok := x.GetType().(*DataRequest_ListNamedActors); ok {
		return x.ListNamedActors
	}
	return nil
}

type isDataRequest_Type interface {
	isDataRequest_Type()
}

type DataRequest_Get struct {
	Get *GetRequest `protobuf:"bytes,2,opt,name=get,proto3,oneof"`
}

type DataRequest_Put struct {
	Put *PutRequest `protobuf:"bytes,3,opt,name=put,proto3,oneof"`
}

type DataRequest_Release struct {
	Release *ReleaseRequest `protobuf:"bytes,4,opt,name=release,proto3,oneof"`
}

type DataRequest_ConnectionInfo struct {
	ConnectionInfo *ConnectionInfoRequest `protobuf:"bytes,5,opt,name=connection_info,json=connectionInfo,proto3,oneof"`
}

type DataRequest_Init struct {
	Init *InitRequest `protobuf:"bytes,6,opt,name=init,proto3,oneof"`
}

type DataRequest_PrepRuntimeEnv struct {
	PrepRuntimeEnv *PrepRuntimeEnvRequest `protobuf:"bytes,7,opt,name=prep_runtime_env,json=prepRuntimeEnv,proto3,oneof"`
}

type DataRequest_ConnectionCleanup struct {
	ConnectionCleanup *ConnectionCleanupRequest `protobuf:"bytes,8,opt,name=connection_cleanup,json=connectionCleanup,proto3,oneof"`
}

type DataRequest_Acknowledge struct {
	Acknowledge *AcknowledgeRequest `protobuf:"bytes,9,opt,name=acknowledge,proto3,oneof"`
}

type DataRequest_Task struct {
	Task *ClientTask `protobuf:"bytes,10,opt,name=task,proto3,oneof"`
}

type DataRequest_Terminate struct {
	Terminate *TerminateRequest `protobuf:"bytes,11,opt,name=terminate,proto3,oneof"`
}

type DataRequest_ListNamedActors struct {
	ListNamedActors *ClientListNamedActorsRequest `protobuf:"bytes,12,opt,name=list_named_actors,json=listNamedActors,proto3,oneof"`
}

func (*DataRequest_Get) isDataRequest_Type() {}

func (*DataRequest_Put) isDataRequest_Type() {}

func (*DataRequest_Release) isDataRequest_Type() {}

func (*DataRequest_ConnectionInfo) isDataRequest_Type() {}

func (*DataRequest_Init) isDataRequest_Type() {}

func (*DataRequest_PrepRuntimeEnv) isDataRequest_Type() {}

func (*DataRequest_ConnectionCleanup) isDataRequest_Type() {}

func (*DataRequest_Acknowledge) isDataRequest_Type() {}

func (*DataRequest_Task) isDataRequest_Type() {}

func (*DataRequest_Terminate) isDataRequest_Type() {}

func (*DataRequest_ListNamedActors) isDataRequest_Type() {}

type DataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The request id that this response matches with.
	ReqId int32 `protobuf:"varint,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	// Types that are assignable to Type:
	//
	//	*DataResponse_Get
	//	*DataResponse_Put
	//	*DataResponse_Release
	//	*DataResponse_ConnectionInfo
	//	*DataResponse_Init
	//	*DataResponse_PrepRuntimeEnv
	//	*DataResponse_ConnectionCleanup
	//	*DataResponse_TaskTicket
	//	*DataResponse_Terminate
	//	*DataResponse_ListNamedActors
	Type isDataResponse_Type `protobuf_oneof:"type"`
}

func (x *DataResponse) Reset() {
	*x = DataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataResponse) ProtoMessage() {}

func (x *DataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataResponse.ProtoReflect.Descriptor instead.
func (*DataResponse) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{39}
}

func (x *DataResponse) GetReqId() int32 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

func (m *DataResponse) GetType() isDataResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *DataResponse) GetGet() *GetResponse {
	if x, ok := x.GetType().(*DataResponse_Get); ok {
		return x.Get
	}
	return nil
}

func (x *DataResponse) GetPut() *PutResponse {
	if x, ok := x.GetType().(*DataResponse_Put); ok {
		return x.Put
	}
	return nil
}

func (x *DataResponse) GetRelease() *ReleaseResponse {
	if x, ok := x.GetType().(*DataResponse_Release); ok {
		return x.Release
	}
	return nil
}

func (x *DataResponse) GetConnectionInfo() *ConnectionInfoResponse {
	if x, ok := x.GetType().(*DataResponse_ConnectionInfo); ok {
		return x.ConnectionInfo
	}
	return nil
}

func (x *DataResponse) GetInit() *InitResponse {
	if x, ok := x.GetType().(*DataResponse_Init); ok {
		return x.Init
	}
	return nil
}

func (x *DataResponse) GetPrepRuntimeEnv() *PrepRuntimeEnvResponse {
	if x, ok := x.GetType().(*DataResponse_PrepRuntimeEnv); ok {
		return x.PrepRuntimeEnv
	}
	return nil
}

func (x *DataResponse) GetConnectionCleanup() *ConnectionCleanupResponse {
	if x, ok := x.GetType().(*DataResponse_ConnectionCleanup); ok {
		return x.ConnectionCleanup
	}
	return nil
}

func (x *DataResponse) GetTaskTicket() *ClientTaskTicket {
	if x, ok := x.GetType().(*DataResponse_TaskTicket); ok {
		return x.TaskTicket
	}
	return nil
}

func (x *DataResponse) GetTerminate() *TerminateResponse {
	if x, ok := x.GetType().(*DataResponse_Terminate); ok {
		return x.Terminate
	}
	return nil
}

func (x *DataResponse) GetListNamedActors() *ClientListNamedActorsResponse {
	if x, ok := x.GetType().(*DataResponse_ListNamedActors); ok {
		return x.ListNamedActors
	}
	return nil
}

type isDataResponse_Type interface {
	isDataResponse_Type()
}

type DataResponse_Get struct {
	Get *GetResponse `protobuf:"bytes,2,opt,name=get,proto3,oneof"`
}

type DataResponse_Put struct {
	Put *PutResponse `protobuf:"bytes,3,opt,name=put,proto3,oneof"`
}

type DataResponse_Release struct {
	Release *ReleaseResponse `protobuf:"bytes,4,opt,name=release,proto3,oneof"`
}

type DataResponse_ConnectionInfo struct {
	ConnectionInfo *ConnectionInfoResponse `protobuf:"bytes,5,opt,name=connection_info,json=connectionInfo,proto3,oneof"`
}

type DataResponse_Init struct {
	Init *InitResponse `protobuf:"bytes,6,opt,name=init,proto3,oneof"`
}

type DataResponse_PrepRuntimeEnv struct {
	PrepRuntimeEnv *PrepRuntimeEnvResponse `protobuf:"bytes,7,opt,name=prep_runtime_env,json=prepRuntimeEnv,proto3,oneof"`
}

type DataResponse_ConnectionCleanup struct {
	ConnectionCleanup *ConnectionCleanupResponse `protobuf:"bytes,8,opt,name=connection_cleanup,json=connectionCleanup,proto3,oneof"`
}

type DataResponse_TaskTicket struct {
	TaskTicket *ClientTaskTicket `protobuf:"bytes,10,opt,name=task_ticket,json=taskTicket,proto3,oneof"`
}

type DataResponse_Terminate struct {
	Terminate *TerminateResponse `protobuf:"bytes,11,opt,name=terminate,proto3,oneof"`
}

type DataResponse_ListNamedActors struct {
	ListNamedActors *ClientListNamedActorsResponse `protobuf:"bytes,12,opt,name=list_named_actors,json=listNamedActors,proto3,oneof"`
}

func (*DataResponse_Get) isDataResponse_Type() {}

func (*DataResponse_Put) isDataResponse_Type() {}

func (*DataResponse_Release) isDataResponse_Type() {}

func (*DataResponse_ConnectionInfo) isDataResponse_Type() {}

func (*DataResponse_Init) isDataResponse_Type() {}

func (*DataResponse_PrepRuntimeEnv) isDataResponse_Type() {}

func (*DataResponse_ConnectionCleanup) isDataResponse_Type() {}

func (*DataResponse_TaskTicket) isDataResponse_Type() {}

func (*DataResponse_Terminate) isDataResponse_Type() {}

func (*DataResponse_ListNamedActors) isDataResponse_Type() {}

// A request to change the quantity or type of the logs
// currently being streamed. Initially, all logs are disabled.
type LogSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set to recieve logs.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// At what loglevel should logs be forwarded on the stream.
	Loglevel int32 `protobuf:"varint,2,opt,name=loglevel,proto3" json:"loglevel,omitempty"` // TODO(barakmich): More log filtering options.
}

func (x *LogSettingsRequest) Reset() {
	*x = LogSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogSettingsRequest) ProtoMessage() {}

func (x *LogSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogSettingsRequest.ProtoReflect.Descriptor instead.
func (*LogSettingsRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{40}
}

func (x *LogSettingsRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *LogSettingsRequest) GetLoglevel() int32 {
	if x != nil {
		return x.Loglevel
	}
	return 0
}

type LogData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The message data in the log
	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	// The loglevel at which this log should be displayed.
	// * level > 0: Log leveling as per python's logging library
	// * level == -1: stdout (fd 1)
	// * level == -2: stderr (fd 2)
	Level int32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	// The name of the logger that generated this message.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *LogData) Reset() {
	*x = LogData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogData) ProtoMessage() {}

func (x *LogData) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogData.ProtoReflect.Descriptor instead.
func (*LogData) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{41}
}

func (x *LogData) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *LogData) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *LogData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ClusterInfoResponse_ResourceTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table map[string]float64 `protobuf:"bytes,1,rep,name=table,proto3" json:"table,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *ClusterInfoResponse_ResourceTable) Reset() {
	*x = ClusterInfoResponse_ResourceTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInfoResponse_ResourceTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInfoResponse_ResourceTable) ProtoMessage() {}

func (x *ClusterInfoResponse_ResourceTable) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInfoResponse_ResourceTable.ProtoReflect.Descriptor instead.
func (*ClusterInfoResponse_ResourceTable) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{12, 0}
}

func (x *ClusterInfoResponse_ResourceTable) GetTable() map[string]float64 {
	if x != nil {
		return x.Table
	}
	return nil
}

type ClusterInfoResponse_RuntimeContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId              []byte `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	NodeId             []byte `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Namespace          string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	RuntimeEnv         string `protobuf:"bytes,4,opt,name=runtime_env,json=runtimeEnv,proto3" json:"runtime_env,omitempty"`
	CaptureClientTasks bool   `protobuf:"varint,5,opt,name=capture_client_tasks,json=captureClientTasks,proto3" json:"capture_client_tasks,omitempty"`
}

func (x *ClusterInfoResponse_RuntimeContext) Reset() {
	*x = ClusterInfoResponse_RuntimeContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInfoResponse_RuntimeContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInfoResponse_RuntimeContext) ProtoMessage() {}

func (x *ClusterInfoResponse_RuntimeContext) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInfoResponse_RuntimeContext.ProtoReflect.Descriptor instead.
func (*ClusterInfoResponse_RuntimeContext) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{12, 1}
}

func (x *ClusterInfoResponse_RuntimeContext) GetJobId() []byte {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *ClusterInfoResponse_RuntimeContext) GetNodeId() []byte {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *ClusterInfoResponse_RuntimeContext) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ClusterInfoResponse_RuntimeContext) GetRuntimeEnv() string {
	if x != nil {
		return x.RuntimeEnv
	}
	return ""
}

func (x *ClusterInfoResponse_RuntimeContext) GetCaptureClientTasks() bool {
	if x != nil {
		return x.CaptureClientTasks
	}
	return false
}

type TerminateRequest_ActorTerminate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NoRestart bool   `protobuf:"varint,2,opt,name=no_restart,json=noRestart,proto3" json:"no_restart,omitempty"`
}

func (x *TerminateRequest_ActorTerminate) Reset() {
	*x = TerminateRequest_ActorTerminate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateRequest_ActorTerminate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateRequest_ActorTerminate) ProtoMessage() {}

func (x *TerminateRequest_ActorTerminate) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateRequest_ActorTerminate.ProtoReflect.Descriptor instead.
func (*TerminateRequest_ActorTerminate) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{13, 0}
}

func (x *TerminateRequest_ActorTerminate) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TerminateRequest_ActorTerminate) GetNoRestart() bool {
	if x != nil {
		return x.NoRestart
	}
	return false
}

type TerminateRequest_TaskObjectTerminate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Force     bool   `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	Recursive bool   `protobuf:"varint,3,opt,name=recursive,proto3" json:"recursive,omitempty"`
}

func (x *TerminateRequest_TaskObjectTerminate) Reset() {
	*x = TerminateRequest_TaskObjectTerminate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateRequest_TaskObjectTerminate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateRequest_TaskObjectTerminate) ProtoMessage() {}

func (x *TerminateRequest_TaskObjectTerminate) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_ray_client_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateRequest_TaskObjectTerminate.ProtoReflect.Descriptor instead.
func (*TerminateRequest_TaskObjectTerminate) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_ray_client_proto_rawDescGZIP(), []int{13, 1}
}

func (x *TerminateRequest_TaskObjectTerminate) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TerminateRequest_TaskObjectTerminate) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *TerminateRequest_TaskObjectTerminate) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

var File_src_ray_protobuf_ray_client_proto protoreflect.FileDescriptor

var file_src_ray_protobuf_ray_client_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x72, 0x63, 0x2f, 0x72, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x72, 0x61, 0x79, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x22, 0xb5, 0x01, 0x0a,
	0x03, 0x41, 0x72, 0x67, 0x12, 0x2b, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x72,
	0x67, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x27, 0x0a, 0x08, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e,
	0x43, 0x45, 0x10, 0x01, 0x22, 0x36, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x64, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x70, 0x69,
	0x63, 0x6b, 0x6c, 0x65, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa2, 0x04, 0x0a,
	0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x36, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x72, 0x67, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x6b, 0x77, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x4b, 0x77,
	0x61, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f,
	0x0a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f,
	0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x47, 0x0a,
	0x0b, 0x4b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x72, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x59, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x45, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x55, 0x4e, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x03,
	0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x41, 0x4d, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x10,
	0x04, 0x22, 0x5d, 0x0a, 0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0xa1, 0x01, 0x0a, 0x0a, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0x49, 0x0a, 0x0b, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x96, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x73,
	0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x12, 0x24,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x0b, 0x57, 0x61, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x80, 0x01, 0x0a,
	0x0c, 0x57, 0x61, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x12, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x22,
	0x9a, 0x01, 0x0a, 0x0f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x12, 0x0a, 0x0e, 0x49, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x4f, 0x44, 0x45, 0x53, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x53, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x10, 0x03, 0x12,
	0x13, 0x0a, 0x0f, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45,
	0x58, 0x54, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e, 0x45,
	0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x22, 0x4b, 0x0a, 0x12,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xed, 0x04, 0x0a, 0x13, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x53,
	0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x96, 0x01, 0x0a, 0x0d,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4b, 0x0a,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0xb1, 0x01, 0x0a, 0x0e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x65, 0x6e, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xf1, 0x02, 0x0a, 0x10, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x50, 0x0a,
	0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a,
	0x3f, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x1a, 0x59, 0x0a, 0x13, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x23, 0x0a,
	0x11, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02,
	0x6f, 0x6b, 0x22, 0x23, 0x0a, 0x0f, 0x4b, 0x56, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x2a, 0x0a, 0x10, 0x4b, 0x56, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x22, 0x20, 0x0a, 0x0c, 0x4b, 0x56, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x34, 0x0a, 0x0d, 0x4b, 0x56, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x54, 0x0a, 0x0c, 0x4b,
	0x56, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x22, 0x36, 0x0a, 0x0d, 0x4b, 0x56, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x20, 0x0a, 0x0c, 0x4b, 0x56, 0x44,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x0f, 0x0a, 0x0d, 0x4b,
	0x56, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x0a, 0x0d,
	0x4b, 0x56, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x24, 0x0a, 0x0e, 0x4b, 0x56, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x0b,
	0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6a,
	0x6f, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x6a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x61,
	0x79, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x61, 0x79, 0x49, 0x6e, 0x69, 0x74, 0x4b, 0x77, 0x61, 0x72,
	0x67, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f,
	0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61,
	0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x30, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x17, 0x0a, 0x15, 0x50, 0x72,
	0x65, 0x70, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x50, 0x72, 0x65, 0x70, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x0a,
	0x1c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x1d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f,
	0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x22, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x21, 0x0a, 0x0f, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x6f, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x17, 0x0a,
	0x15, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x61, 0x79, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x79, 0x74, 0x68,
	0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x1b, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x65, 0x61, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x0a,
	0x12, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x22, 0xc6, 0x05, 0x0a, 0x0b, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65,
	0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x03, 0x67, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x03, 0x70, 0x75,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x03,
	0x70, 0x75, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12,
	0x4a, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x70, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x65, 0x6e, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x65,
	0x70, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x12, 0x52, 0x0a, 0x12, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x65, 0x61,
	0x6e, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x12,
	0x3f, 0x0a, 0x0b, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x12, 0x29, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x39, 0x0a, 0x09, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xb5, 0x05, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x03, 0x67,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x03, 0x67, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x03, 0x70, 0x75, 0x74, 0x12,
	0x34, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2b, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x4b,
	0x0a, 0x10, 0x70, 0x72, 0x65, 0x70, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65,
	0x6e, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e,
	0x76, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x65,
	0x70, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x12, 0x53, 0x0a, 0x12, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x65, 0x61,
	0x6e, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70,
	0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x3a,
	0x0a, 0x09, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x54, 0x0a, 0x11, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x0f, 0x6c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x52, 0x0b,
	0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x22, 0x4a, 0x0a, 0x12, 0x4c,
	0x6f, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x67, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c,
	0x6f, 0x67, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x45, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x13,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x10, 0x00, 0x32, 0xaf, 0x07, 0x0a, 0x0c, 0x52, 0x61, 0x79, 0x6c, 0x65, 0x74, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x04, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x14, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x50,
	0x72, 0x65, 0x70, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x12, 0x1e, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x13, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x38, 0x0a, 0x09,
	0x50, 0x75, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x13, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0a, 0x57, 0x61, 0x69, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57,
	0x61, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x13, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x1a, 0x19, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x22,
	0x00, 0x12, 0x44, 0x0a, 0x09, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x19,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x05, 0x4b, 0x56, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x56, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x56,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a,
	0x05, 0x4b, 0x56, 0x50, 0x75, 0x74, 0x12, 0x15, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x4b, 0x56, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x56, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x05, 0x4b, 0x56, 0x44, 0x65, 0x6c,
	0x12, 0x15, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x56, 0x44, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x4b, 0x56, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3b, 0x0a, 0x06, 0x4b, 0x56, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x56, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x56,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41,
	0x0a, 0x08, 0x4b, 0x56, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x18, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x56, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4b,
	0x56, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x62, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x53, 0x0a, 0x12, 0x52, 0x61, 0x79, 0x6c, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x08, 0x44,
	0x61, 0x74, 0x61, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x32, 0x55, 0x0a, 0x11, 0x52, 0x61,
	0x79, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x12,
	0x40, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1b, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x28, 0x01, 0x30,
	0x01, 0x42, 0x8a, 0x01, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x42, 0x0e, 0x52, 0x61, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x72, 0x75, 0x65, 0x69, 0x61, 0x6e, 0x2f, 0x72, 0x61, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f,
	0x73, 0x72, 0x63, 0x2f, 0x72, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0xf8, 0x01, 0x01, 0xa2, 0x02, 0x03, 0x52, 0x52, 0x58, 0xaa, 0x02, 0x07, 0x52, 0x61, 0x79, 0x2e,
	0x52, 0x70, 0x63, 0xca, 0x02, 0x07, 0x52, 0x61, 0x79, 0x5c, 0x52, 0x70, 0x63, 0xe2, 0x02, 0x13,
	0x52, 0x61, 0x79, 0x5c, 0x52, 0x70, 0x63, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x08, 0x52, 0x61, 0x79, 0x3a, 0x3a, 0x52, 0x70, 0x63, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_src_ray_protobuf_ray_client_proto_rawDescOnce sync.Once
	file_src_ray_protobuf_ray_client_proto_rawDescData = file_src_ray_protobuf_ray_client_proto_rawDesc
)

func file_src_ray_protobuf_ray_client_proto_rawDescGZIP() []byte {
	file_src_ray_protobuf_ray_client_proto_rawDescOnce.Do(func() {
		file_src_ray_protobuf_ray_client_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_ray_protobuf_ray_client_proto_rawDescData)
	})
	return file_src_ray_protobuf_ray_client_proto_rawDescData
}

var file_src_ray_protobuf_ray_client_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_src_ray_protobuf_ray_client_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_src_ray_protobuf_ray_client_proto_goTypes = []interface{}{
	(Type)(0),                                  // 0: ray.rpc.Type
	(Arg_Locality)(0),                          // 1: ray.rpc.Arg.Locality
	(ClientTask_RemoteExecType)(0),             // 2: ray.rpc.ClientTask.RemoteExecType
	(ClusterInfoType_TypeEnum)(0),              // 3: ray.rpc.ClusterInfoType.TypeEnum
	(*Arg)(nil),                                // 4: ray.rpc.Arg
	(*TaskOptions)(nil),                        // 5: ray.rpc.TaskOptions
	(*ClientTask)(nil),                         // 6: ray.rpc.ClientTask
	(*ClientTaskTicket)(nil),                   // 7: ray.rpc.ClientTaskTicket
	(*PutRequest)(nil),                         // 8: ray.rpc.PutRequest
	(*PutResponse)(nil),                        // 9: ray.rpc.PutResponse
	(*GetRequest)(nil),                         // 10: ray.rpc.GetRequest
	(*GetResponse)(nil),                        // 11: ray.rpc.GetResponse
	(*WaitRequest)(nil),                        // 12: ray.rpc.WaitRequest
	(*WaitResponse)(nil),                       // 13: ray.rpc.WaitResponse
	(*ClusterInfoType)(nil),                    // 14: ray.rpc.ClusterInfoType
	(*ClusterInfoRequest)(nil),                 // 15: ray.rpc.ClusterInfoRequest
	(*ClusterInfoResponse)(nil),                // 16: ray.rpc.ClusterInfoResponse
	(*TerminateRequest)(nil),                   // 17: ray.rpc.TerminateRequest
	(*TerminateResponse)(nil),                  // 18: ray.rpc.TerminateResponse
	(*KVExistsRequest)(nil),                    // 19: ray.rpc.KVExistsRequest
	(*KVExistsResponse)(nil),                   // 20: ray.rpc.KVExistsResponse
	(*KVGetRequest)(nil),                       // 21: ray.rpc.KVGetRequest
	(*KVGetResponse)(nil),                      // 22: ray.rpc.KVGetResponse
	(*KVPutRequest)(nil),                       // 23: ray.rpc.KVPutRequest
	(*KVPutResponse)(nil),                      // 24: ray.rpc.KVPutResponse
	(*KVDelRequest)(nil),                       // 25: ray.rpc.KVDelRequest
	(*KVDelResponse)(nil),                      // 26: ray.rpc.KVDelResponse
	(*KVListRequest)(nil),                      // 27: ray.rpc.KVListRequest
	(*KVListResponse)(nil),                     // 28: ray.rpc.KVListResponse
	(*InitRequest)(nil),                        // 29: ray.rpc.InitRequest
	(*InitResponse)(nil),                       // 30: ray.rpc.InitResponse
	(*PrepRuntimeEnvRequest)(nil),              // 31: ray.rpc.PrepRuntimeEnvRequest
	(*PrepRuntimeEnvResponse)(nil),             // 32: ray.rpc.PrepRuntimeEnvResponse
	(*ClientListNamedActorsRequest)(nil),       // 33: ray.rpc.ClientListNamedActorsRequest
	(*ClientListNamedActorsResponse)(nil),      // 34: ray.rpc.ClientListNamedActorsResponse
	(*ReleaseRequest)(nil),                     // 35: ray.rpc.ReleaseRequest
	(*ReleaseResponse)(nil),                    // 36: ray.rpc.ReleaseResponse
	(*ConnectionInfoRequest)(nil),              // 37: ray.rpc.ConnectionInfoRequest
	(*ConnectionInfoResponse)(nil),             // 38: ray.rpc.ConnectionInfoResponse
	(*ConnectionCleanupRequest)(nil),           // 39: ray.rpc.ConnectionCleanupRequest
	(*ConnectionCleanupResponse)(nil),          // 40: ray.rpc.ConnectionCleanupResponse
	(*AcknowledgeRequest)(nil),                 // 41: ray.rpc.AcknowledgeRequest
	(*DataRequest)(nil),                        // 42: ray.rpc.DataRequest
	(*DataResponse)(nil),                       // 43: ray.rpc.DataResponse
	(*LogSettingsRequest)(nil),                 // 44: ray.rpc.LogSettingsRequest
	(*LogData)(nil),                            // 45: ray.rpc.LogData
	nil,                                        // 46: ray.rpc.ClientTask.KwargsEntry
	(*ClusterInfoResponse_ResourceTable)(nil),  // 47: ray.rpc.ClusterInfoResponse.ResourceTable
	(*ClusterInfoResponse_RuntimeContext)(nil), // 48: ray.rpc.ClusterInfoResponse.RuntimeContext
	nil,                                     // 49: ray.rpc.ClusterInfoResponse.ResourceTable.TableEntry
	(*TerminateRequest_ActorTerminate)(nil), // 50: ray.rpc.TerminateRequest.ActorTerminate
	(*TerminateRequest_TaskObjectTerminate)(nil), // 51: ray.rpc.TerminateRequest.TaskObjectTerminate
}
var file_src_ray_protobuf_ray_client_proto_depIdxs = []int32{
	1,  // 0: ray.rpc.Arg.local:type_name -> ray.rpc.Arg.Locality
	0,  // 1: ray.rpc.Arg.type:type_name -> ray.rpc.Type
	2,  // 2: ray.rpc.ClientTask.type:type_name -> ray.rpc.ClientTask.RemoteExecType
	4,  // 3: ray.rpc.ClientTask.args:type_name -> ray.rpc.Arg
	46, // 4: ray.rpc.ClientTask.kwargs:type_name -> ray.rpc.ClientTask.KwargsEntry
	5,  // 5: ray.rpc.ClientTask.options:type_name -> ray.rpc.TaskOptions
	5,  // 6: ray.rpc.ClientTask.baseline_options:type_name -> ray.rpc.TaskOptions
	3,  // 7: ray.rpc.ClusterInfoRequest.type:type_name -> ray.rpc.ClusterInfoType.TypeEnum
	3,  // 8: ray.rpc.ClusterInfoResponse.type:type_name -> ray.rpc.ClusterInfoType.TypeEnum
	47, // 9: ray.rpc.ClusterInfoResponse.resource_table:type_name -> ray.rpc.ClusterInfoResponse.ResourceTable
	48, // 10: ray.rpc.ClusterInfoResponse.runtime_context:type_name -> ray.rpc.ClusterInfoResponse.RuntimeContext
	50, // 11: ray.rpc.TerminateRequest.actor:type_name -> ray.rpc.TerminateRequest.ActorTerminate
	51, // 12: ray.rpc.TerminateRequest.task_object:type_name -> ray.rpc.TerminateRequest.TaskObjectTerminate
	10, // 13: ray.rpc.DataRequest.get:type_name -> ray.rpc.GetRequest
	8,  // 14: ray.rpc.DataRequest.put:type_name -> ray.rpc.PutRequest
	35, // 15: ray.rpc.DataRequest.release:type_name -> ray.rpc.ReleaseRequest
	37, // 16: ray.rpc.DataRequest.connection_info:type_name -> ray.rpc.ConnectionInfoRequest
	29, // 17: ray.rpc.DataRequest.init:type_name -> ray.rpc.InitRequest
	31, // 18: ray.rpc.DataRequest.prep_runtime_env:type_name -> ray.rpc.PrepRuntimeEnvRequest
	39, // 19: ray.rpc.DataRequest.connection_cleanup:type_name -> ray.rpc.ConnectionCleanupRequest
	41, // 20: ray.rpc.DataRequest.acknowledge:type_name -> ray.rpc.AcknowledgeRequest
	6,  // 21: ray.rpc.DataRequest.task:type_name -> ray.rpc.ClientTask
	17, // 22: ray.rpc.DataRequest.terminate:type_name -> ray.rpc.TerminateRequest
	33, // 23: ray.rpc.DataRequest.list_named_actors:type_name -> ray.rpc.ClientListNamedActorsRequest
	11, // 24: ray.rpc.DataResponse.get:type_name -> ray.rpc.GetResponse
	9,  // 25: ray.rpc.DataResponse.put:type_name -> ray.rpc.PutResponse
	36, // 26: ray.rpc.DataResponse.release:type_name -> ray.rpc.ReleaseResponse
	38, // 27: ray.rpc.DataResponse.connection_info:type_name -> ray.rpc.ConnectionInfoResponse
	30, // 28: ray.rpc.DataResponse.init:type_name -> ray.rpc.InitResponse
	32, // 29: ray.rpc.DataResponse.prep_runtime_env:type_name -> ray.rpc.PrepRuntimeEnvResponse
	40, // 30: ray.rpc.DataResponse.connection_cleanup:type_name -> ray.rpc.ConnectionCleanupResponse
	7,  // 31: ray.rpc.DataResponse.task_ticket:type_name -> ray.rpc.ClientTaskTicket
	18, // 32: ray.rpc.DataResponse.terminate:type_name -> ray.rpc.TerminateResponse
	34, // 33: ray.rpc.DataResponse.list_named_actors:type_name -> ray.rpc.ClientListNamedActorsResponse
	4,  // 34: ray.rpc.ClientTask.KwargsEntry.value:type_name -> ray.rpc.Arg
	49, // 35: ray.rpc.ClusterInfoResponse.ResourceTable.table:type_name -> ray.rpc.ClusterInfoResponse.ResourceTable.TableEntry
	29, // 36: ray.rpc.RayletDriver.Init:input_type -> ray.rpc.InitRequest
	31, // 37: ray.rpc.RayletDriver.PrepRuntimeEnv:input_type -> ray.rpc.PrepRuntimeEnvRequest
	10, // 38: ray.rpc.RayletDriver.GetObject:input_type -> ray.rpc.GetRequest
	8,  // 39: ray.rpc.RayletDriver.PutObject:input_type -> ray.rpc.PutRequest
	12, // 40: ray.rpc.RayletDriver.WaitObject:input_type -> ray.rpc.WaitRequest
	6,  // 41: ray.rpc.RayletDriver.Schedule:input_type -> ray.rpc.ClientTask
	17, // 42: ray.rpc.RayletDriver.Terminate:input_type -> ray.rpc.TerminateRequest
	15, // 43: ray.rpc.RayletDriver.ClusterInfo:input_type -> ray.rpc.ClusterInfoRequest
	21, // 44: ray.rpc.RayletDriver.KVGet:input_type -> ray.rpc.KVGetRequest
	23, // 45: ray.rpc.RayletDriver.KVPut:input_type -> ray.rpc.KVPutRequest
	25, // 46: ray.rpc.RayletDriver.KVDel:input_type -> ray.rpc.KVDelRequest
	27, // 47: ray.rpc.RayletDriver.KVList:input_type -> ray.rpc.KVListRequest
	19, // 48: ray.rpc.RayletDriver.KVExists:input_type -> ray.rpc.KVExistsRequest
	33, // 49: ray.rpc.RayletDriver.ListNamedActors:input_type -> ray.rpc.ClientListNamedActorsRequest
	42, // 50: ray.rpc.RayletDataStreamer.Datapath:input_type -> ray.rpc.DataRequest
	44, // 51: ray.rpc.RayletLogStreamer.Logstream:input_type -> ray.rpc.LogSettingsRequest
	30, // 52: ray.rpc.RayletDriver.Init:output_type -> ray.rpc.InitResponse
	32, // 53: ray.rpc.RayletDriver.PrepRuntimeEnv:output_type -> ray.rpc.PrepRuntimeEnvResponse
	11, // 54: ray.rpc.RayletDriver.GetObject:output_type -> ray.rpc.GetResponse
	9,  // 55: ray.rpc.RayletDriver.PutObject:output_type -> ray.rpc.PutResponse
	13, // 56: ray.rpc.RayletDriver.WaitObject:output_type -> ray.rpc.WaitResponse
	7,  // 57: ray.rpc.RayletDriver.Schedule:output_type -> ray.rpc.ClientTaskTicket
	18, // 58: ray.rpc.RayletDriver.Terminate:output_type -> ray.rpc.TerminateResponse
	16, // 59: ray.rpc.RayletDriver.ClusterInfo:output_type -> ray.rpc.ClusterInfoResponse
	22, // 60: ray.rpc.RayletDriver.KVGet:output_type -> ray.rpc.KVGetResponse
	24, // 61: ray.rpc.RayletDriver.KVPut:output_type -> ray.rpc.KVPutResponse
	26, // 62: ray.rpc.RayletDriver.KVDel:output_type -> ray.rpc.KVDelResponse
	28, // 63: ray.rpc.RayletDriver.KVList:output_type -> ray.rpc.KVListResponse
	20, // 64: ray.rpc.RayletDriver.KVExists:output_type -> ray.rpc.KVExistsResponse
	34, // 65: ray.rpc.RayletDriver.ListNamedActors:output_type -> ray.rpc.ClientListNamedActorsResponse
	43, // 66: ray.rpc.RayletDataStreamer.Datapath:output_type -> ray.rpc.DataResponse
	45, // 67: ray.rpc.RayletLogStreamer.Logstream:output_type -> ray.rpc.LogData
	52, // [52:68] is the sub-list for method output_type
	36, // [36:52] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_src_ray_protobuf_ray_client_proto_init() }
func file_src_ray_protobuf_ray_client_proto_init() {
	if File_src_ray_protobuf_ray_client_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_src_ray_protobuf_ray_client_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Arg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientTaskTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInfoType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVPutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVPutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVDelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVDelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepRuntimeEnvRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepRuntimeEnvResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientListNamedActorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientListNamedActorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionCleanupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionCleanupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcknowledgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInfoResponse_ResourceTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInfoResponse_RuntimeContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminateRequest_ActorTerminate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_ray_client_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminateRequest_TaskObjectTerminate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_src_ray_protobuf_ray_client_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*ClusterInfoResponse_Json)(nil),
		(*ClusterInfoResponse_ResourceTable_)(nil),
		(*ClusterInfoResponse_RuntimeContext_)(nil),
	}
	file_src_ray_protobuf_ray_client_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*TerminateRequest_Actor)(nil),
		(*TerminateRequest_TaskObject)(nil),
	}
	file_src_ray_protobuf_ray_client_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_src_ray_protobuf_ray_client_proto_msgTypes[38].OneofWrappers = []interface{}{
		(*DataRequest_Get)(nil),
		(*DataRequest_Put)(nil),
		(*DataRequest_Release)(nil),
		(*DataRequest_ConnectionInfo)(nil),
		(*DataRequest_Init)(nil),
		(*DataRequest_PrepRuntimeEnv)(nil),
		(*DataRequest_ConnectionCleanup)(nil),
		(*DataRequest_Acknowledge)(nil),
		(*DataRequest_Task)(nil),
		(*DataRequest_Terminate)(nil),
		(*DataRequest_ListNamedActors)(nil),
	}
	file_src_ray_protobuf_ray_client_proto_msgTypes[39].OneofWrappers = []interface{}{
		(*DataResponse_Get)(nil),
		(*DataResponse_Put)(nil),
		(*DataResponse_Release)(nil),
		(*DataResponse_ConnectionInfo)(nil),
		(*DataResponse_Init)(nil),
		(*DataResponse_PrepRuntimeEnv)(nil),
		(*DataResponse_ConnectionCleanup)(nil),
		(*DataResponse_TaskTicket)(nil),
		(*DataResponse_Terminate)(nil),
		(*DataResponse_ListNamedActors)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_ray_protobuf_ray_client_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_src_ray_protobuf_ray_client_proto_goTypes,
		DependencyIndexes: file_src_ray_protobuf_ray_client_proto_depIdxs,
		EnumInfos:         file_src_ray_protobuf_ray_client_proto_enumTypes,
		MessageInfos:      file_src_ray_protobuf_ray_client_proto_msgTypes,
	}.Build()
	File_src_ray_protobuf_ray_client_proto = out.File
	file_src_ray_protobuf_ray_client_proto_rawDesc = nil
	file_src_ray_protobuf_ray_client_proto_goTypes = nil
	file_src_ray_protobuf_ray_client_proto_depIdxs = nil
}
