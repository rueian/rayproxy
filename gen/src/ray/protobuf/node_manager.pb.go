// Copyright 2017 The Ray Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: src/ray/protobuf/node_manager.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RequestWorkerLeaseReply_SchedulingFailureType int32

const (
	// The default failure type is "not failed".
	RequestWorkerLeaseReply_NOT_FAILED RequestWorkerLeaseReply_SchedulingFailureType = 0
	// Scheduling is failed on this node.
	RequestWorkerLeaseReply_SCHEDULING_FAILED RequestWorkerLeaseReply_SchedulingFailureType = 1
	// Scheduling is cancelled because task/actor's placement is removed.
	RequestWorkerLeaseReply_SCHEDULING_CANCELLED_PLACEMENT_GROUP_REMOVED RequestWorkerLeaseReply_SchedulingFailureType = 2
	// Scheduling is cancelled because task/actor's runtime environment setup is failed
	RequestWorkerLeaseReply_SCHEDULING_CANCELLED_RUNTIME_ENV_SETUP_FAILED RequestWorkerLeaseReply_SchedulingFailureType = 3
	// Scheduling is cancelled because task/actor is intentionally cancelled. E.g.,
	// ray.kill or ray.cancel
	RequestWorkerLeaseReply_SCHEDULING_CANCELLED_INTENDED RequestWorkerLeaseReply_SchedulingFailureType = 4
	// Scheduling is cancelled because the task/actor is no longer schedulable.
	RequestWorkerLeaseReply_SCHEDULING_CANCELLED_UNSCHEDULABLE RequestWorkerLeaseReply_SchedulingFailureType = 5
)

// Enum value maps for RequestWorkerLeaseReply_SchedulingFailureType.
var (
	RequestWorkerLeaseReply_SchedulingFailureType_name = map[int32]string{
		0: "NOT_FAILED",
		1: "SCHEDULING_FAILED",
		2: "SCHEDULING_CANCELLED_PLACEMENT_GROUP_REMOVED",
		3: "SCHEDULING_CANCELLED_RUNTIME_ENV_SETUP_FAILED",
		4: "SCHEDULING_CANCELLED_INTENDED",
		5: "SCHEDULING_CANCELLED_UNSCHEDULABLE",
	}
	RequestWorkerLeaseReply_SchedulingFailureType_value = map[string]int32{
		"NOT_FAILED":        0,
		"SCHEDULING_FAILED": 1,
		"SCHEDULING_CANCELLED_PLACEMENT_GROUP_REMOVED":  2,
		"SCHEDULING_CANCELLED_RUNTIME_ENV_SETUP_FAILED": 3,
		"SCHEDULING_CANCELLED_INTENDED":                 4,
		"SCHEDULING_CANCELLED_UNSCHEDULABLE":            5,
	}
)

func (x RequestWorkerLeaseReply_SchedulingFailureType) Enum() *RequestWorkerLeaseReply_SchedulingFailureType {
	p := new(RequestWorkerLeaseReply_SchedulingFailureType)
	*p = x
	return p
}

func (x RequestWorkerLeaseReply_SchedulingFailureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestWorkerLeaseReply_SchedulingFailureType) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_node_manager_proto_enumTypes[0].Descriptor()
}

func (RequestWorkerLeaseReply_SchedulingFailureType) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_node_manager_proto_enumTypes[0]
}

func (x RequestWorkerLeaseReply_SchedulingFailureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestWorkerLeaseReply_SchedulingFailureType.Descriptor instead.
func (RequestWorkerLeaseReply_SchedulingFailureType) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{4, 0}
}

type WorkerBacklogReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TaskSpec indicating the scheduling class.
	// Cannot send scheduling class directly
	// since it's local to each process.
	ResourceSpec *TaskSpec `protobuf:"bytes,1,opt,name=resource_spec,json=resourceSpec,proto3" json:"resource_spec,omitempty"`
	// Size of the backlog for the above scheduling class.
	BacklogSize int64 `protobuf:"varint,2,opt,name=backlog_size,json=backlogSize,proto3" json:"backlog_size,omitempty"`
}

func (x *WorkerBacklogReport) Reset() {
	*x = WorkerBacklogReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerBacklogReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerBacklogReport) ProtoMessage() {}

func (x *WorkerBacklogReport) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerBacklogReport.ProtoReflect.Descriptor instead.
func (*WorkerBacklogReport) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{0}
}

func (x *WorkerBacklogReport) GetResourceSpec() *TaskSpec {
	if x != nil {
		return x.ResourceSpec
	}
	return nil
}

func (x *WorkerBacklogReport) GetBacklogSize() int64 {
	if x != nil {
		return x.BacklogSize
	}
	return 0
}

type ReportWorkerBacklogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id of the worker that's reporting the backlog
	WorkerId []byte `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	// Backlog report per scheduling class
	BacklogReports []*WorkerBacklogReport `protobuf:"bytes,2,rep,name=backlog_reports,json=backlogReports,proto3" json:"backlog_reports,omitempty"`
}

func (x *ReportWorkerBacklogRequest) Reset() {
	*x = ReportWorkerBacklogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportWorkerBacklogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportWorkerBacklogRequest) ProtoMessage() {}

func (x *ReportWorkerBacklogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportWorkerBacklogRequest.ProtoReflect.Descriptor instead.
func (*ReportWorkerBacklogRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{1}
}

func (x *ReportWorkerBacklogRequest) GetWorkerId() []byte {
	if x != nil {
		return x.WorkerId
	}
	return nil
}

func (x *ReportWorkerBacklogRequest) GetBacklogReports() []*WorkerBacklogReport {
	if x != nil {
		return x.BacklogReports
	}
	return nil
}

type ReportWorkerBacklogReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportWorkerBacklogReply) Reset() {
	*x = ReportWorkerBacklogReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportWorkerBacklogReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportWorkerBacklogReply) ProtoMessage() {}

func (x *ReportWorkerBacklogReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportWorkerBacklogReply.ProtoReflect.Descriptor instead.
func (*ReportWorkerBacklogReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{2}
}

// Request a worker from the raylet with the specified resources.
type RequestWorkerLeaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TaskSpec containing the requested resources.
	ResourceSpec *TaskSpec `protobuf:"bytes,1,opt,name=resource_spec,json=resourceSpec,proto3" json:"resource_spec,omitempty"`
	// Worker's backlog size for this spec's shape.
	BacklogSize int64 `protobuf:"varint,2,opt,name=backlog_size,json=backlogSize,proto3" json:"backlog_size,omitempty"`
	// If it's true, either grant the lease if the task is
	// locally schedulable or reject the request.
	// Else, the raylet may return another raylet at which to retry the request.
	GrantOrReject bool `protobuf:"varint,3,opt,name=grant_or_reject,json=grantOrReject,proto3" json:"grant_or_reject,omitempty"`
	// If it's true, then the current raylet is selected
	// due to the locality of task arguments.
	IsSelectedBasedOnLocality bool `protobuf:"varint,4,opt,name=is_selected_based_on_locality,json=isSelectedBasedOnLocality,proto3" json:"is_selected_based_on_locality,omitempty"`
}

func (x *RequestWorkerLeaseRequest) Reset() {
	*x = RequestWorkerLeaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestWorkerLeaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestWorkerLeaseRequest) ProtoMessage() {}

func (x *RequestWorkerLeaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestWorkerLeaseRequest.ProtoReflect.Descriptor instead.
func (*RequestWorkerLeaseRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{3}
}

func (x *RequestWorkerLeaseRequest) GetResourceSpec() *TaskSpec {
	if x != nil {
		return x.ResourceSpec
	}
	return nil
}

func (x *RequestWorkerLeaseRequest) GetBacklogSize() int64 {
	if x != nil {
		return x.BacklogSize
	}
	return 0
}

func (x *RequestWorkerLeaseRequest) GetGrantOrReject() bool {
	if x != nil {
		return x.GrantOrReject
	}
	return false
}

func (x *RequestWorkerLeaseRequest) GetIsSelectedBasedOnLocality() bool {
	if x != nil {
		return x.IsSelectedBasedOnLocality
	}
	return false
}

type RequestWorkerLeaseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the leased worker. If this is empty, then the request should be
	// retried at the provided raylet address.
	WorkerAddress *Address `protobuf:"bytes,1,opt,name=worker_address,json=workerAddress,proto3" json:"worker_address,omitempty"`
	// Address of the raylet to spill back to, if any.
	RetryAtRayletAddress *Address `protobuf:"bytes,2,opt,name=retry_at_raylet_address,json=retryAtRayletAddress,proto3" json:"retry_at_raylet_address,omitempty"`
	// Resource mapping ids acquired by the leased worker.
	ResourceMapping []*ResourceMapEntry `protobuf:"bytes,3,rep,name=resource_mapping,json=resourceMapping,proto3" json:"resource_mapping,omitempty"`
	// Whether this lease request was canceled.
	Canceled bool `protobuf:"varint,4,opt,name=canceled,proto3" json:"canceled,omitempty"`
	// PID of the worker process.
	WorkerPid uint32 `protobuf:"varint,6,opt,name=worker_pid,json=workerPid,proto3" json:"worker_pid,omitempty"`
	// Whether the request was rejected because of insufficient resources.
	Rejected bool `protobuf:"varint,7,opt,name=rejected,proto3" json:"rejected,omitempty"`
	// The (normal task) resources data to be carried by the Reply.
	ResourcesData *ResourcesData `protobuf:"bytes,8,opt,name=resources_data,json=resourcesData,proto3" json:"resources_data,omitempty"`
	// Scheduling failure type.
	// Must be set only when canceled is set.
	FailureType RequestWorkerLeaseReply_SchedulingFailureType `protobuf:"varint,9,opt,name=failure_type,json=failureType,proto3,enum=ray.rpc.RequestWorkerLeaseReply_SchedulingFailureType" json:"failure_type,omitempty"`
	// The error message explaining why scheduling has failed.
	// Must be an empty string if failure_type is `NOT_FAILED`.
	SchedulingFailureMessage string `protobuf:"bytes,10,opt,name=scheduling_failure_message,json=schedulingFailureMessage,proto3" json:"scheduling_failure_message,omitempty"`
}

func (x *RequestWorkerLeaseReply) Reset() {
	*x = RequestWorkerLeaseReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestWorkerLeaseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestWorkerLeaseReply) ProtoMessage() {}

func (x *RequestWorkerLeaseReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestWorkerLeaseReply.ProtoReflect.Descriptor instead.
func (*RequestWorkerLeaseReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{4}
}

func (x *RequestWorkerLeaseReply) GetWorkerAddress() *Address {
	if x != nil {
		return x.WorkerAddress
	}
	return nil
}

func (x *RequestWorkerLeaseReply) GetRetryAtRayletAddress() *Address {
	if x != nil {
		return x.RetryAtRayletAddress
	}
	return nil
}

func (x *RequestWorkerLeaseReply) GetResourceMapping() []*ResourceMapEntry {
	if x != nil {
		return x.ResourceMapping
	}
	return nil
}

func (x *RequestWorkerLeaseReply) GetCanceled() bool {
	if x != nil {
		return x.Canceled
	}
	return false
}

func (x *RequestWorkerLeaseReply) GetWorkerPid() uint32 {
	if x != nil {
		return x.WorkerPid
	}
	return 0
}

func (x *RequestWorkerLeaseReply) GetRejected() bool {
	if x != nil {
		return x.Rejected
	}
	return false
}

func (x *RequestWorkerLeaseReply) GetResourcesData() *ResourcesData {
	if x != nil {
		return x.ResourcesData
	}
	return nil
}

func (x *RequestWorkerLeaseReply) GetFailureType() RequestWorkerLeaseReply_SchedulingFailureType {
	if x != nil {
		return x.FailureType
	}
	return RequestWorkerLeaseReply_NOT_FAILED
}

func (x *RequestWorkerLeaseReply) GetSchedulingFailureMessage() string {
	if x != nil {
		return x.SchedulingFailureMessage
	}
	return ""
}

type PrepareBundleResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bundles that containing the requested resources.
	BundleSpecs []*Bundle `protobuf:"bytes,1,rep,name=bundle_specs,json=bundleSpecs,proto3" json:"bundle_specs,omitempty"`
}

func (x *PrepareBundleResourcesRequest) Reset() {
	*x = PrepareBundleResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareBundleResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareBundleResourcesRequest) ProtoMessage() {}

func (x *PrepareBundleResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareBundleResourcesRequest.ProtoReflect.Descriptor instead.
func (*PrepareBundleResourcesRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{5}
}

func (x *PrepareBundleResourcesRequest) GetBundleSpecs() []*Bundle {
	if x != nil {
		return x.BundleSpecs
	}
	return nil
}

type PrepareBundleResourcesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status if prepare request was successful.
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *PrepareBundleResourcesReply) Reset() {
	*x = PrepareBundleResourcesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareBundleResourcesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareBundleResourcesReply) ProtoMessage() {}

func (x *PrepareBundleResourcesReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareBundleResourcesReply.ProtoReflect.Descriptor instead.
func (*PrepareBundleResourcesReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{6}
}

func (x *PrepareBundleResourcesReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type CommitBundleResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bundles containing the requested resources.
	BundleSpecs []*Bundle `protobuf:"bytes,1,rep,name=bundle_specs,json=bundleSpecs,proto3" json:"bundle_specs,omitempty"`
}

func (x *CommitBundleResourcesRequest) Reset() {
	*x = CommitBundleResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitBundleResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitBundleResourcesRequest) ProtoMessage() {}

func (x *CommitBundleResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitBundleResourcesRequest.ProtoReflect.Descriptor instead.
func (*CommitBundleResourcesRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{7}
}

func (x *CommitBundleResourcesRequest) GetBundleSpecs() []*Bundle {
	if x != nil {
		return x.BundleSpecs
	}
	return nil
}

type CommitBundleResourcesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommitBundleResourcesReply) Reset() {
	*x = CommitBundleResourcesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitBundleResourcesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitBundleResourcesReply) ProtoMessage() {}

func (x *CommitBundleResourcesReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitBundleResourcesReply.ProtoReflect.Descriptor instead.
func (*CommitBundleResourcesReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{8}
}

type CancelResourceReserveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bundle containing the requested resources.
	BundleSpec *Bundle `protobuf:"bytes,1,opt,name=bundle_spec,json=bundleSpec,proto3" json:"bundle_spec,omitempty"`
}

func (x *CancelResourceReserveRequest) Reset() {
	*x = CancelResourceReserveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelResourceReserveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelResourceReserveRequest) ProtoMessage() {}

func (x *CancelResourceReserveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelResourceReserveRequest.ProtoReflect.Descriptor instead.
func (*CancelResourceReserveRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{9}
}

func (x *CancelResourceReserveRequest) GetBundleSpec() *Bundle {
	if x != nil {
		return x.BundleSpec
	}
	return nil
}

type CancelResourceReserveReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelResourceReserveReply) Reset() {
	*x = CancelResourceReserveReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelResourceReserveReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelResourceReserveReply) ProtoMessage() {}

func (x *CancelResourceReserveReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelResourceReserveReply.ProtoReflect.Descriptor instead.
func (*CancelResourceReserveReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{10}
}

// Release a worker back to its raylet.
type ReturnWorkerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Port of the leased worker that we are now returning.
	WorkerPort int32 `protobuf:"varint,1,opt,name=worker_port,json=workerPort,proto3" json:"worker_port,omitempty"`
	// Unique id of the leased worker we are now returning.
	WorkerId []byte `protobuf:"bytes,2,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	// If true, there was some unrecoverable error and the raylet should
	// disconnect the worker.
	DisconnectWorker bool `protobuf:"varint,3,opt,name=disconnect_worker,json=disconnectWorker,proto3" json:"disconnect_worker,omitempty"`
	// Whether the worker is exiting and cannot be reused.
	WorkerExiting bool `protobuf:"varint,4,opt,name=worker_exiting,json=workerExiting,proto3" json:"worker_exiting,omitempty"`
}

func (x *ReturnWorkerRequest) Reset() {
	*x = ReturnWorkerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnWorkerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnWorkerRequest) ProtoMessage() {}

func (x *ReturnWorkerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnWorkerRequest.ProtoReflect.Descriptor instead.
func (*ReturnWorkerRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{11}
}

func (x *ReturnWorkerRequest) GetWorkerPort() int32 {
	if x != nil {
		return x.WorkerPort
	}
	return 0
}

func (x *ReturnWorkerRequest) GetWorkerId() []byte {
	if x != nil {
		return x.WorkerId
	}
	return nil
}

func (x *ReturnWorkerRequest) GetDisconnectWorker() bool {
	if x != nil {
		return x.DisconnectWorker
	}
	return false
}

func (x *ReturnWorkerRequest) GetWorkerExiting() bool {
	if x != nil {
		return x.WorkerExiting
	}
	return false
}

type ReturnWorkerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReturnWorkerReply) Reset() {
	*x = ReturnWorkerReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnWorkerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnWorkerReply) ProtoMessage() {}

func (x *ReturnWorkerReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnWorkerReply.ProtoReflect.Descriptor instead.
func (*ReturnWorkerReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{12}
}

type ReleaseUnusedWorkersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerIdsInUse [][]byte `protobuf:"bytes,1,rep,name=worker_ids_in_use,json=workerIdsInUse,proto3" json:"worker_ids_in_use,omitempty"`
}

func (x *ReleaseUnusedWorkersRequest) Reset() {
	*x = ReleaseUnusedWorkersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseUnusedWorkersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseUnusedWorkersRequest) ProtoMessage() {}

func (x *ReleaseUnusedWorkersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseUnusedWorkersRequest.ProtoReflect.Descriptor instead.
func (*ReleaseUnusedWorkersRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{13}
}

func (x *ReleaseUnusedWorkersRequest) GetWorkerIdsInUse() [][]byte {
	if x != nil {
		return x.WorkerIdsInUse
	}
	return nil
}

type ReleaseUnusedWorkersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReleaseUnusedWorkersReply) Reset() {
	*x = ReleaseUnusedWorkersReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseUnusedWorkersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseUnusedWorkersReply) ProtoMessage() {}

func (x *ReleaseUnusedWorkersReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseUnusedWorkersReply.ProtoReflect.Descriptor instead.
func (*ReleaseUnusedWorkersReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{14}
}

type ShutdownRayletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Whether the shutdown request is graceful or not.
	Graceful bool `protobuf:"varint,1,opt,name=graceful,proto3" json:"graceful,omitempty"`
}

func (x *ShutdownRayletRequest) Reset() {
	*x = ShutdownRayletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutdownRayletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownRayletRequest) ProtoMessage() {}

func (x *ShutdownRayletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownRayletRequest.ProtoReflect.Descriptor instead.
func (*ShutdownRayletRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{15}
}

func (x *ShutdownRayletRequest) GetGraceful() bool {
	if x != nil {
		return x.Graceful
	}
	return false
}

type ShutdownRayletReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShutdownRayletReply) Reset() {
	*x = ShutdownRayletReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutdownRayletReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownRayletReply) ProtoMessage() {}

func (x *ShutdownRayletReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownRayletReply.ProtoReflect.Descriptor instead.
func (*ShutdownRayletReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{16}
}

type CancelWorkerLeaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The task to cancel.
	TaskId []byte `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *CancelWorkerLeaseRequest) Reset() {
	*x = CancelWorkerLeaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelWorkerLeaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelWorkerLeaseRequest) ProtoMessage() {}

func (x *CancelWorkerLeaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelWorkerLeaseRequest.ProtoReflect.Descriptor instead.
func (*CancelWorkerLeaseRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{17}
}

func (x *CancelWorkerLeaseRequest) GetTaskId() []byte {
	if x != nil {
		return x.TaskId
	}
	return nil
}

type CancelWorkerLeaseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the cancellation request was successful. Cancellation
	// succeeds if the node manager has the task queued upon receiving
	// the cancellation request, and the node manager has not yet
	// granted the lease.
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *CancelWorkerLeaseReply) Reset() {
	*x = CancelWorkerLeaseReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelWorkerLeaseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelWorkerLeaseReply) ProtoMessage() {}

func (x *CancelWorkerLeaseReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelWorkerLeaseReply.ProtoReflect.Descriptor instead.
func (*CancelWorkerLeaseReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{18}
}

func (x *CancelWorkerLeaseReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type PinObjectIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the owner to ask when to unpin the objects.
	OwnerAddress *Address `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	// ObjectIDs to pin.
	ObjectIds [][]byte `protobuf:"bytes,2,rep,name=object_ids,json=objectIds,proto3" json:"object_ids,omitempty"`
}

func (x *PinObjectIDsRequest) Reset() {
	*x = PinObjectIDsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinObjectIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinObjectIDsRequest) ProtoMessage() {}

func (x *PinObjectIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinObjectIDsRequest.ProtoReflect.Descriptor instead.
func (*PinObjectIDsRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{19}
}

func (x *PinObjectIDsRequest) GetOwnerAddress() *Address {
	if x != nil {
		return x.OwnerAddress
	}
	return nil
}

func (x *PinObjectIDsRequest) GetObjectIds() [][]byte {
	if x != nil {
		return x.ObjectIds
	}
	return nil
}

type PinObjectIDsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PinObjectIDsReply) Reset() {
	*x = PinObjectIDsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinObjectIDsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinObjectIDsReply) ProtoMessage() {}

func (x *PinObjectIDsReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinObjectIDsReply.ProtoReflect.Descriptor instead.
func (*PinObjectIDsReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{20}
}

type GetNodeStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to include memory stats. This could be large since it includes
	// metadata for all live object references.
	IncludeMemoryInfo bool `protobuf:"varint,1,opt,name=include_memory_info,json=includeMemoryInfo,proto3" json:"include_memory_info,omitempty"`
}

func (x *GetNodeStatsRequest) Reset() {
	*x = GetNodeStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeStatsRequest) ProtoMessage() {}

func (x *GetNodeStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeStatsRequest.ProtoReflect.Descriptor instead.
func (*GetNodeStatsRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{21}
}

func (x *GetNodeStatsRequest) GetIncludeMemoryInfo() bool {
	if x != nil {
		return x.IncludeMemoryInfo
	}
	return false
}

// Object store stats, which may be reported per-node or aggregated across
// multiple nodes in the cluster (values are additive).
type ObjectStoreStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The amount of wall time total where spilling was happening.
	SpillTimeTotalS float64 `protobuf:"fixed64,1,opt,name=spill_time_total_s,json=spillTimeTotalS,proto3" json:"spill_time_total_s,omitempty"`
	// The number of bytes spilled total.
	SpilledBytesTotal int64 `protobuf:"varint,2,opt,name=spilled_bytes_total,json=spilledBytesTotal,proto3" json:"spilled_bytes_total,omitempty"`
	// The number of objects spilled total.
	SpilledObjectsTotal int64 `protobuf:"varint,3,opt,name=spilled_objects_total,json=spilledObjectsTotal,proto3" json:"spilled_objects_total,omitempty"`
	// The amount of wall time total where object restore was happening.
	RestoreTimeTotalS float64 `protobuf:"fixed64,4,opt,name=restore_time_total_s,json=restoreTimeTotalS,proto3" json:"restore_time_total_s,omitempty"`
	// The number of bytes restored total.
	RestoredBytesTotal int64 `protobuf:"varint,5,opt,name=restored_bytes_total,json=restoredBytesTotal,proto3" json:"restored_bytes_total,omitempty"`
	// The number of objects restored total.
	RestoredObjectsTotal int64 `protobuf:"varint,6,opt,name=restored_objects_total,json=restoredObjectsTotal,proto3" json:"restored_objects_total,omitempty"`
	// The current usage of the object store.
	ObjectStoreBytesUsed int64 `protobuf:"varint,7,opt,name=object_store_bytes_used,json=objectStoreBytesUsed,proto3" json:"object_store_bytes_used,omitempty"`
	// The max capacity of the object store.
	ObjectStoreBytesAvail int64 `protobuf:"varint,8,opt,name=object_store_bytes_avail,json=objectStoreBytesAvail,proto3" json:"object_store_bytes_avail,omitempty"`
	// The number of bytes pinned as the primary copy of objects.
	ObjectStoreBytesPrimaryCopy int64 `protobuf:"varint,9,opt,name=object_store_bytes_primary_copy,json=objectStoreBytesPrimaryCopy,proto3" json:"object_store_bytes_primary_copy,omitempty"`
	// The number of bytes allocated from the filesystem (fallback allocs).
	ObjectStoreBytesFallback int64 `protobuf:"varint,10,opt,name=object_store_bytes_fallback,json=objectStoreBytesFallback,proto3" json:"object_store_bytes_fallback,omitempty"`
	// The number of local objects total.
	NumLocalObjects int64 `protobuf:"varint,11,opt,name=num_local_objects,json=numLocalObjects,proto3" json:"num_local_objects,omitempty"`
	// The number of plasma object bytes that are consumed by core workers.
	ConsumedBytes int64 `protobuf:"varint,12,opt,name=consumed_bytes,json=consumedBytes,proto3" json:"consumed_bytes,omitempty"`
	// Whether this node has object pulls queued. This can happen if
	// the node has more pull requests than available object store
	// memory.
	ObjectPullsQueued bool `protobuf:"varint,13,opt,name=object_pulls_queued,json=objectPullsQueued,proto3" json:"object_pulls_queued,omitempty"`
}

func (x *ObjectStoreStats) Reset() {
	*x = ObjectStoreStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectStoreStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectStoreStats) ProtoMessage() {}

func (x *ObjectStoreStats) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectStoreStats.ProtoReflect.Descriptor instead.
func (*ObjectStoreStats) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{22}
}

func (x *ObjectStoreStats) GetSpillTimeTotalS() float64 {
	if x != nil {
		return x.SpillTimeTotalS
	}
	return 0
}

func (x *ObjectStoreStats) GetSpilledBytesTotal() int64 {
	if x != nil {
		return x.SpilledBytesTotal
	}
	return 0
}

func (x *ObjectStoreStats) GetSpilledObjectsTotal() int64 {
	if x != nil {
		return x.SpilledObjectsTotal
	}
	return 0
}

func (x *ObjectStoreStats) GetRestoreTimeTotalS() float64 {
	if x != nil {
		return x.RestoreTimeTotalS
	}
	return 0
}

func (x *ObjectStoreStats) GetRestoredBytesTotal() int64 {
	if x != nil {
		return x.RestoredBytesTotal
	}
	return 0
}

func (x *ObjectStoreStats) GetRestoredObjectsTotal() int64 {
	if x != nil {
		return x.RestoredObjectsTotal
	}
	return 0
}

func (x *ObjectStoreStats) GetObjectStoreBytesUsed() int64 {
	if x != nil {
		return x.ObjectStoreBytesUsed
	}
	return 0
}

func (x *ObjectStoreStats) GetObjectStoreBytesAvail() int64 {
	if x != nil {
		return x.ObjectStoreBytesAvail
	}
	return 0
}

func (x *ObjectStoreStats) GetObjectStoreBytesPrimaryCopy() int64 {
	if x != nil {
		return x.ObjectStoreBytesPrimaryCopy
	}
	return 0
}

func (x *ObjectStoreStats) GetObjectStoreBytesFallback() int64 {
	if x != nil {
		return x.ObjectStoreBytesFallback
	}
	return 0
}

func (x *ObjectStoreStats) GetNumLocalObjects() int64 {
	if x != nil {
		return x.NumLocalObjects
	}
	return 0
}

func (x *ObjectStoreStats) GetConsumedBytes() int64 {
	if x != nil {
		return x.ConsumedBytes
	}
	return 0
}

func (x *ObjectStoreStats) GetObjectPullsQueued() bool {
	if x != nil {
		return x.ObjectPullsQueued
	}
	return false
}

type GetNodeStatsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoreWorkersStats []*CoreWorkerStats `protobuf:"bytes,1,rep,name=core_workers_stats,json=coreWorkersStats,proto3" json:"core_workers_stats,omitempty"`
	ViewData         []*ViewData        `protobuf:"bytes,2,rep,name=view_data,json=viewData,proto3" json:"view_data,omitempty"`
	NumWorkers       uint32             `protobuf:"varint,3,opt,name=num_workers,json=numWorkers,proto3" json:"num_workers,omitempty"`
	InfeasibleTasks  []*TaskSpec        `protobuf:"bytes,4,rep,name=infeasible_tasks,json=infeasibleTasks,proto3" json:"infeasible_tasks,omitempty"`
	ReadyTasks       []*TaskSpec        `protobuf:"bytes,5,rep,name=ready_tasks,json=readyTasks,proto3" json:"ready_tasks,omitempty"`
	StoreStats       *ObjectStoreStats  `protobuf:"bytes,6,opt,name=store_stats,json=storeStats,proto3" json:"store_stats,omitempty"`
}

func (x *GetNodeStatsReply) Reset() {
	*x = GetNodeStatsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeStatsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeStatsReply) ProtoMessage() {}

func (x *GetNodeStatsReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeStatsReply.ProtoReflect.Descriptor instead.
func (*GetNodeStatsReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{23}
}

func (x *GetNodeStatsReply) GetCoreWorkersStats() []*CoreWorkerStats {
	if x != nil {
		return x.CoreWorkersStats
	}
	return nil
}

func (x *GetNodeStatsReply) GetViewData() []*ViewData {
	if x != nil {
		return x.ViewData
	}
	return nil
}

func (x *GetNodeStatsReply) GetNumWorkers() uint32 {
	if x != nil {
		return x.NumWorkers
	}
	return 0
}

func (x *GetNodeStatsReply) GetInfeasibleTasks() []*TaskSpec {
	if x != nil {
		return x.InfeasibleTasks
	}
	return nil
}

func (x *GetNodeStatsReply) GetReadyTasks() []*TaskSpec {
	if x != nil {
		return x.ReadyTasks
	}
	return nil
}

func (x *GetNodeStatsReply) GetStoreStats() *ObjectStoreStats {
	if x != nil {
		return x.StoreStats
	}
	return nil
}

type GlobalGCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GlobalGCRequest) Reset() {
	*x = GlobalGCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalGCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalGCRequest) ProtoMessage() {}

func (x *GlobalGCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalGCRequest.ProtoReflect.Descriptor instead.
func (*GlobalGCRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{24}
}

type GlobalGCReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GlobalGCReply) Reset() {
	*x = GlobalGCReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalGCReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalGCReply) ProtoMessage() {}

func (x *GlobalGCReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalGCReply.ProtoReflect.Descriptor instead.
func (*GlobalGCReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{25}
}

// Accumulates memory info across all nodes. To access per-node memory info,
// use GetNodeStats() calls instead.
type FormatGlobalMemoryInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether or not the reply should include memory summary.
	// If it is true, it will add extra overhead to the system
	// because getting memory info requires to ping every core worker
	// in the cluster.
	IncludeMemoryInfo bool `protobuf:"varint,1,opt,name=include_memory_info,json=includeMemoryInfo,proto3" json:"include_memory_info,omitempty"`
}

func (x *FormatGlobalMemoryInfoRequest) Reset() {
	*x = FormatGlobalMemoryInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatGlobalMemoryInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatGlobalMemoryInfoRequest) ProtoMessage() {}

func (x *FormatGlobalMemoryInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatGlobalMemoryInfoRequest.ProtoReflect.Descriptor instead.
func (*FormatGlobalMemoryInfoRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{26}
}

func (x *FormatGlobalMemoryInfoRequest) GetIncludeMemoryInfo() bool {
	if x != nil {
		return x.IncludeMemoryInfo
	}
	return false
}

type FormatGlobalMemoryInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A tabular summary of the memory stats. To get this data in structured form,
	// you can instead use GetNodeStats() directly.
	MemorySummary string `protobuf:"bytes,1,opt,name=memory_summary,json=memorySummary,proto3" json:"memory_summary,omitempty"`
	// Aggregate store stats across all nodes. To get the individual node data,
	// you can instead use GetNodeStats() directly.
	StoreStats *ObjectStoreStats `protobuf:"bytes,2,opt,name=store_stats,json=storeStats,proto3" json:"store_stats,omitempty"`
}

func (x *FormatGlobalMemoryInfoReply) Reset() {
	*x = FormatGlobalMemoryInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatGlobalMemoryInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatGlobalMemoryInfoReply) ProtoMessage() {}

func (x *FormatGlobalMemoryInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatGlobalMemoryInfoReply.ProtoReflect.Descriptor instead.
func (*FormatGlobalMemoryInfoReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{27}
}

func (x *FormatGlobalMemoryInfoReply) GetMemorySummary() string {
	if x != nil {
		return x.MemorySummary
	}
	return ""
}

func (x *FormatGlobalMemoryInfoReply) GetStoreStats() *ObjectStoreStats {
	if x != nil {
		return x.StoreStats
	}
	return nil
}

type RequestObjectSpillageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ObjectID to spill.
	ObjectId []byte `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (x *RequestObjectSpillageRequest) Reset() {
	*x = RequestObjectSpillageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestObjectSpillageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestObjectSpillageRequest) ProtoMessage() {}

func (x *RequestObjectSpillageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestObjectSpillageRequest.ProtoReflect.Descriptor instead.
func (*RequestObjectSpillageRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{28}
}

func (x *RequestObjectSpillageRequest) GetObjectId() []byte {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

type RequestObjectSpillageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the object spilling was successful or not.
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Object URL where the object is spilled.
	ObjectUrl string `protobuf:"bytes,2,opt,name=object_url,json=objectUrl,proto3" json:"object_url,omitempty"`
	// The node id of a node where the object is spilled.
	SpilledNodeId []byte `protobuf:"bytes,3,opt,name=spilled_node_id,json=spilledNodeId,proto3" json:"spilled_node_id,omitempty"`
}

func (x *RequestObjectSpillageReply) Reset() {
	*x = RequestObjectSpillageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestObjectSpillageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestObjectSpillageReply) ProtoMessage() {}

func (x *RequestObjectSpillageReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestObjectSpillageReply.ProtoReflect.Descriptor instead.
func (*RequestObjectSpillageReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{29}
}

func (x *RequestObjectSpillageReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RequestObjectSpillageReply) GetObjectUrl() string {
	if x != nil {
		return x.ObjectUrl
	}
	return ""
}

func (x *RequestObjectSpillageReply) GetSpilledNodeId() []byte {
	if x != nil {
		return x.SpilledNodeId
	}
	return nil
}

type ReleaseUnusedBundlesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BundlesInUse []*Bundle `protobuf:"bytes,1,rep,name=bundles_in_use,json=bundlesInUse,proto3" json:"bundles_in_use,omitempty"`
}

func (x *ReleaseUnusedBundlesRequest) Reset() {
	*x = ReleaseUnusedBundlesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseUnusedBundlesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseUnusedBundlesRequest) ProtoMessage() {}

func (x *ReleaseUnusedBundlesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseUnusedBundlesRequest.ProtoReflect.Descriptor instead.
func (*ReleaseUnusedBundlesRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{30}
}

func (x *ReleaseUnusedBundlesRequest) GetBundlesInUse() []*Bundle {
	if x != nil {
		return x.BundlesInUse
	}
	return nil
}

type ReleaseUnusedBundlesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReleaseUnusedBundlesReply) Reset() {
	*x = ReleaseUnusedBundlesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseUnusedBundlesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseUnusedBundlesReply) ProtoMessage() {}

func (x *ReleaseUnusedBundlesReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseUnusedBundlesReply.ProtoReflect.Descriptor instead.
func (*ReleaseUnusedBundlesReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{31}
}

type GetSystemConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSystemConfigRequest) Reset() {
	*x = GetSystemConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSystemConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemConfigRequest) ProtoMessage() {}

func (x *GetSystemConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemConfigRequest.ProtoReflect.Descriptor instead.
func (*GetSystemConfigRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{32}
}

type GetSystemConfigReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemConfig string `protobuf:"bytes,1,opt,name=system_config,json=systemConfig,proto3" json:"system_config,omitempty"`
}

func (x *GetSystemConfigReply) Reset() {
	*x = GetSystemConfigReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSystemConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemConfigReply) ProtoMessage() {}

func (x *GetSystemConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemConfigReply.ProtoReflect.Descriptor instead.
func (*GetSystemConfigReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{33}
}

func (x *GetSystemConfigReply) GetSystemConfig() string {
	if x != nil {
		return x.SystemConfig
	}
	return ""
}

type RequestResourceReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestResourceReportRequest) Reset() {
	*x = RequestResourceReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestResourceReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestResourceReportRequest) ProtoMessage() {}

func (x *RequestResourceReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestResourceReportRequest.ProtoReflect.Descriptor instead.
func (*RequestResourceReportRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{34}
}

type RequestResourceReportReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resources *ResourcesData `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
}

func (x *RequestResourceReportReply) Reset() {
	*x = RequestResourceReportReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestResourceReportReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestResourceReportReply) ProtoMessage() {}

func (x *RequestResourceReportReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestResourceReportReply.ProtoReflect.Descriptor instead.
func (*RequestResourceReportReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{35}
}

func (x *RequestResourceReportReply) GetResources() *ResourcesData {
	if x != nil {
		return x.Resources
	}
	return nil
}

type UpdateResourceUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is a serialized version of ResourceUsageBatchData. This extra layer of
	// serialization allows the sender to cache the expensive operation of serializing a
	// `ResourceUsageBatchData` when sending this request to all nodes.
	SerializedResourceUsageBatch []byte `protobuf:"bytes,1,opt,name=serialized_resource_usage_batch,json=serializedResourceUsageBatch,proto3" json:"serialized_resource_usage_batch,omitempty"`
}

func (x *UpdateResourceUsageRequest) Reset() {
	*x = UpdateResourceUsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResourceUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResourceUsageRequest) ProtoMessage() {}

func (x *UpdateResourceUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResourceUsageRequest.ProtoReflect.Descriptor instead.
func (*UpdateResourceUsageRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateResourceUsageRequest) GetSerializedResourceUsageBatch() []byte {
	if x != nil {
		return x.SerializedResourceUsageBatch
	}
	return nil
}

type UpdateResourceUsageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateResourceUsageReply) Reset() {
	*x = UpdateResourceUsageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResourceUsageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResourceUsageReply) ProtoMessage() {}

func (x *UpdateResourceUsageReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResourceUsageReply.ProtoReflect.Descriptor instead.
func (*UpdateResourceUsageReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{37}
}

type GetGcsServerAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetGcsServerAddressRequest) Reset() {
	*x = GetGcsServerAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGcsServerAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGcsServerAddressRequest) ProtoMessage() {}

func (x *GetGcsServerAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGcsServerAddressRequest.ProtoReflect.Descriptor instead.
func (*GetGcsServerAddressRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{38}
}

type GetGcsServerAddressReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *GetGcsServerAddressReply) Reset() {
	*x = GetGcsServerAddressReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGcsServerAddressReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGcsServerAddressReply) ProtoMessage() {}

func (x *GetGcsServerAddressReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGcsServerAddressReply.ProtoReflect.Descriptor instead.
func (*GetGcsServerAddressReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{39}
}

func (x *GetGcsServerAddressReply) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *GetGcsServerAddressReply) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type GetTasksInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTasksInfoRequest) Reset() {
	*x = GetTasksInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTasksInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTasksInfoRequest) ProtoMessage() {}

func (x *GetTasksInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTasksInfoRequest.ProtoReflect.Descriptor instead.
func (*GetTasksInfoRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{40}
}

type GetTasksInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskInfoEntries []*TaskInfoEntry `protobuf:"bytes,1,rep,name=task_info_entries,json=taskInfoEntries,proto3" json:"task_info_entries,omitempty"`
}

func (x *GetTasksInfoReply) Reset() {
	*x = GetTasksInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTasksInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTasksInfoReply) ProtoMessage() {}

func (x *GetTasksInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTasksInfoReply.ProtoReflect.Descriptor instead.
func (*GetTasksInfoReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{41}
}

func (x *GetTasksInfoReply) GetTaskInfoEntries() []*TaskInfoEntry {
	if x != nil {
		return x.TaskInfoEntries
	}
	return nil
}

type GetObjectsInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetObjectsInfoRequest) Reset() {
	*x = GetObjectsInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObjectsInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectsInfoRequest) ProtoMessage() {}

func (x *GetObjectsInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectsInfoRequest.ProtoReflect.Descriptor instead.
func (*GetObjectsInfoRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{42}
}

type GetObjectsInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoreWorkersStats []*CoreWorkerStats `protobuf:"bytes,1,rep,name=core_workers_stats,json=coreWorkersStats,proto3" json:"core_workers_stats,omitempty"`
}

func (x *GetObjectsInfoReply) Reset() {
	*x = GetObjectsInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObjectsInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectsInfoReply) ProtoMessage() {}

func (x *GetObjectsInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectsInfoReply.ProtoReflect.Descriptor instead.
func (*GetObjectsInfoReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{43}
}

func (x *GetObjectsInfoReply) GetCoreWorkersStats() []*CoreWorkerStats {
	if x != nil {
		return x.CoreWorkersStats
	}
	return nil
}

type GetResourceLoadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetResourceLoadRequest) Reset() {
	*x = GetResourceLoadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceLoadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceLoadRequest) ProtoMessage() {}

func (x *GetResourceLoadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceLoadRequest.ProtoReflect.Descriptor instead.
func (*GetResourceLoadRequest) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{44}
}

type GetResourceLoadReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resources *ResourcesData `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
}

func (x *GetResourceLoadReply) Reset() {
	*x = GetResourceLoadReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceLoadReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceLoadReply) ProtoMessage() {}

func (x *GetResourceLoadReply) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_node_manager_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceLoadReply.ProtoReflect.Descriptor instead.
func (*GetResourceLoadReply) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_node_manager_proto_rawDescGZIP(), []int{45}
}

func (x *GetResourceLoadReply) GetResources() *ResourcesData {
	if x != nil {
		return x.Resources
	}
	return nil
}

var File_src_ray_protobuf_node_manager_proto protoreflect.FileDescriptor

var file_src_ray_protobuf_node_manager_proto_rawDesc = []byte{
	0x0a, 0x23, 0x73, 0x72, 0x63, 0x2f, 0x72, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x1a, 0x1d,
	0x73, 0x72, 0x63, 0x2f, 0x72, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x73,
	0x72, 0x63, 0x2f, 0x72, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x67, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x70, 0x0a, 0x13, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x36, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b,
	0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x1a,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b,
	0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x6c,
	0x6f, 0x67, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x42, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0e,
	0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x1a,
	0x0a, 0x18, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x42, 0x61,
	0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xe0, 0x01, 0x0a, 0x19, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x5f,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x4f, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x40, 0x0a, 0x1d, 0x69,
	0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64,
	0x5f, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x19, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x61,
	0x73, 0x65, 0x64, 0x4f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x81, 0x06,
	0x0a, 0x17, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37, 0x0a, 0x0e, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x47, 0x0a, 0x17, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x74, 0x5f, 0x72,
	0x61, 0x79, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x14, 0x72, 0x65, 0x74, 0x72, 0x79, 0x41, 0x74, 0x52, 0x61,
	0x79, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x59, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xee, 0x01, 0x0a, 0x15, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e,
	0x47, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x52, 0x55, 0x4e, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x45, 0x4e, 0x56, 0x5f, 0x53, 0x45, 0x54, 0x55, 0x50, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45,
	0x44, 0x5f, 0x55, 0x4e, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x05, 0x22, 0x53, 0x0a, 0x1d, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x0c, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x0b, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x22, 0x37, 0x0a, 0x1b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x52, 0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x0c, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x0b, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x50, 0x0a, 0x1c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x0b, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x0a, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0xa7, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x45, 0x78, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x13, 0x0a, 0x11, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x48, 0x0a, 0x1b, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x75, 0x73, 0x65,
	0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x69, 0x6e,
	0x5f, 0x75, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x33, 0x0a, 0x15, 0x53, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x52, 0x61, 0x79, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x22, 0x15, 0x0a, 0x13,
	0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x61, 0x79, 0x6c, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x33, 0x0a, 0x18, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x6b, 0x0a, 0x13,
	0x50, 0x69, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x50, 0x69, 0x6e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x45,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb4, 0x05, 0x0a, 0x10, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x70,
	0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x70, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x70, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x14, 0x72,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x72, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x12, 0x30, 0x0a, 0x14,
	0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x34,
	0x0a, 0x16, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x17, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x12, 0x44, 0x0a, 0x1f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x70, 0x79, 0x12, 0x3d, 0x0a, 0x1b, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x18, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x73, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x50, 0x75, 0x6c, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x22, 0xda, 0x02, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x46, 0x0a, 0x12, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x72, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75,
	0x6d, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x6e, 0x75, 0x6d, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x10, 0x69,
	0x6e, 0x66, 0x65, 0x61, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0f, 0x69, 0x6e, 0x66, 0x65, 0x61, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x3a, 0x0a,
	0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x11, 0x0a, 0x0f, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0f, 0x0a, 0x0d,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x47, 0x43, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x4f, 0x0a,
	0x1d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x80,
	0x01, 0x0a, 0x1b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25,
	0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x22, 0x3b, 0x0a, 0x1c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x70, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x7d,
	0x0a, 0x1a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x70, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x73, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x54, 0x0a,
	0x1b, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0e,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x0c, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x49, 0x6e,
	0x55, 0x73, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x6e,
	0x75, 0x73, 0x65, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3b, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x1e, 0x0a, 0x1c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x52, 0x0a, 0x1a, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x63, 0x0a, 0x1a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x1c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x22, 0x1a, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1c, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x47, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3e, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x47, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x57, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x11, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x46, 0x0a, 0x12, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x6f, 0x72, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x10, 0x63, 0x6f, 0x72, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4c, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x32, 0xba, 0x0f, 0x0a, 0x12, 0x4e,
	0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x5d, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x51, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c,
	0x6f, 0x61, 0x64, 0x12, 0x1f, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x63, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5a, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x22,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x5d, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x12, 0x23, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x0c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x60, 0x0a,
	0x14, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x24, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x75,
	0x73, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x4e, 0x0a, 0x0e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x61, 0x79, 0x6c, 0x65,
	0x74, 0x12, 0x1e, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x52, 0x61, 0x79, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x52, 0x61, 0x79, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x66, 0x0a, 0x16, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x63, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x25, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x63, 0x0a, 0x15,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x25, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x57, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x21, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x0c, 0x50, 0x69,
	0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x73, 0x12, 0x1c, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x69, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x69, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3c,
	0x0a, 0x08, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x47, 0x43, 0x12, 0x18, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x47, 0x43, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x47, 0x43, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x66, 0x0a, 0x16,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x63, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x70, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x12, 0x25, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x70, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x70, 0x69, 0x6c,
	0x6c, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x60, 0x0a, 0x14, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x12, 0x24, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x51, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5d,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x47, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4e, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x8c, 0x01, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x42, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x75, 0x65, 0x69, 0x61, 0x6e, 0x2f, 0x72,
	0x61, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x72, 0x61, 0x79, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0xf8, 0x01, 0x01, 0xa2, 0x02, 0x03, 0x52, 0x52,
	0x58, 0xaa, 0x02, 0x07, 0x52, 0x61, 0x79, 0x2e, 0x52, 0x70, 0x63, 0xca, 0x02, 0x07, 0x52, 0x61,
	0x79, 0x5c, 0x52, 0x70, 0x63, 0xe2, 0x02, 0x13, 0x52, 0x61, 0x79, 0x5c, 0x52, 0x70, 0x63, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x08, 0x52, 0x61,
	0x79, 0x3a, 0x3a, 0x52, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_src_ray_protobuf_node_manager_proto_rawDescOnce sync.Once
	file_src_ray_protobuf_node_manager_proto_rawDescData = file_src_ray_protobuf_node_manager_proto_rawDesc
)

func file_src_ray_protobuf_node_manager_proto_rawDescGZIP() []byte {
	file_src_ray_protobuf_node_manager_proto_rawDescOnce.Do(func() {
		file_src_ray_protobuf_node_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_ray_protobuf_node_manager_proto_rawDescData)
	})
	return file_src_ray_protobuf_node_manager_proto_rawDescData
}

var file_src_ray_protobuf_node_manager_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_src_ray_protobuf_node_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_src_ray_protobuf_node_manager_proto_goTypes = []interface{}{
	(RequestWorkerLeaseReply_SchedulingFailureType)(0), // 0: ray.rpc.RequestWorkerLeaseReply.SchedulingFailureType
	(*WorkerBacklogReport)(nil),                        // 1: ray.rpc.WorkerBacklogReport
	(*ReportWorkerBacklogRequest)(nil),                 // 2: ray.rpc.ReportWorkerBacklogRequest
	(*ReportWorkerBacklogReply)(nil),                   // 3: ray.rpc.ReportWorkerBacklogReply
	(*RequestWorkerLeaseRequest)(nil),                  // 4: ray.rpc.RequestWorkerLeaseRequest
	(*RequestWorkerLeaseReply)(nil),                    // 5: ray.rpc.RequestWorkerLeaseReply
	(*PrepareBundleResourcesRequest)(nil),              // 6: ray.rpc.PrepareBundleResourcesRequest
	(*PrepareBundleResourcesReply)(nil),                // 7: ray.rpc.PrepareBundleResourcesReply
	(*CommitBundleResourcesRequest)(nil),               // 8: ray.rpc.CommitBundleResourcesRequest
	(*CommitBundleResourcesReply)(nil),                 // 9: ray.rpc.CommitBundleResourcesReply
	(*CancelResourceReserveRequest)(nil),               // 10: ray.rpc.CancelResourceReserveRequest
	(*CancelResourceReserveReply)(nil),                 // 11: ray.rpc.CancelResourceReserveReply
	(*ReturnWorkerRequest)(nil),                        // 12: ray.rpc.ReturnWorkerRequest
	(*ReturnWorkerReply)(nil),                          // 13: ray.rpc.ReturnWorkerReply
	(*ReleaseUnusedWorkersRequest)(nil),                // 14: ray.rpc.ReleaseUnusedWorkersRequest
	(*ReleaseUnusedWorkersReply)(nil),                  // 15: ray.rpc.ReleaseUnusedWorkersReply
	(*ShutdownRayletRequest)(nil),                      // 16: ray.rpc.ShutdownRayletRequest
	(*ShutdownRayletReply)(nil),                        // 17: ray.rpc.ShutdownRayletReply
	(*CancelWorkerLeaseRequest)(nil),                   // 18: ray.rpc.CancelWorkerLeaseRequest
	(*CancelWorkerLeaseReply)(nil),                     // 19: ray.rpc.CancelWorkerLeaseReply
	(*PinObjectIDsRequest)(nil),                        // 20: ray.rpc.PinObjectIDsRequest
	(*PinObjectIDsReply)(nil),                          // 21: ray.rpc.PinObjectIDsReply
	(*GetNodeStatsRequest)(nil),                        // 22: ray.rpc.GetNodeStatsRequest
	(*ObjectStoreStats)(nil),                           // 23: ray.rpc.ObjectStoreStats
	(*GetNodeStatsReply)(nil),                          // 24: ray.rpc.GetNodeStatsReply
	(*GlobalGCRequest)(nil),                            // 25: ray.rpc.GlobalGCRequest
	(*GlobalGCReply)(nil),                              // 26: ray.rpc.GlobalGCReply
	(*FormatGlobalMemoryInfoRequest)(nil),              // 27: ray.rpc.FormatGlobalMemoryInfoRequest
	(*FormatGlobalMemoryInfoReply)(nil),                // 28: ray.rpc.FormatGlobalMemoryInfoReply
	(*RequestObjectSpillageRequest)(nil),               // 29: ray.rpc.RequestObjectSpillageRequest
	(*RequestObjectSpillageReply)(nil),                 // 30: ray.rpc.RequestObjectSpillageReply
	(*ReleaseUnusedBundlesRequest)(nil),                // 31: ray.rpc.ReleaseUnusedBundlesRequest
	(*ReleaseUnusedBundlesReply)(nil),                  // 32: ray.rpc.ReleaseUnusedBundlesReply
	(*GetSystemConfigRequest)(nil),                     // 33: ray.rpc.GetSystemConfigRequest
	(*GetSystemConfigReply)(nil),                       // 34: ray.rpc.GetSystemConfigReply
	(*RequestResourceReportRequest)(nil),               // 35: ray.rpc.RequestResourceReportRequest
	(*RequestResourceReportReply)(nil),                 // 36: ray.rpc.RequestResourceReportReply
	(*UpdateResourceUsageRequest)(nil),                 // 37: ray.rpc.UpdateResourceUsageRequest
	(*UpdateResourceUsageReply)(nil),                   // 38: ray.rpc.UpdateResourceUsageReply
	(*GetGcsServerAddressRequest)(nil),                 // 39: ray.rpc.GetGcsServerAddressRequest
	(*GetGcsServerAddressReply)(nil),                   // 40: ray.rpc.GetGcsServerAddressReply
	(*GetTasksInfoRequest)(nil),                        // 41: ray.rpc.GetTasksInfoRequest
	(*GetTasksInfoReply)(nil),                          // 42: ray.rpc.GetTasksInfoReply
	(*GetObjectsInfoRequest)(nil),                      // 43: ray.rpc.GetObjectsInfoRequest
	(*GetObjectsInfoReply)(nil),                        // 44: ray.rpc.GetObjectsInfoReply
	(*GetResourceLoadRequest)(nil),                     // 45: ray.rpc.GetResourceLoadRequest
	(*GetResourceLoadReply)(nil),                       // 46: ray.rpc.GetResourceLoadReply
	(*TaskSpec)(nil),                                   // 47: ray.rpc.TaskSpec
	(*Address)(nil),                                    // 48: ray.rpc.Address
	(*ResourceMapEntry)(nil),                           // 49: ray.rpc.ResourceMapEntry
	(*ResourcesData)(nil),                              // 50: ray.rpc.ResourcesData
	(*Bundle)(nil),                                     // 51: ray.rpc.Bundle
	(*CoreWorkerStats)(nil),                            // 52: ray.rpc.CoreWorkerStats
	(*ViewData)(nil),                                   // 53: ray.rpc.ViewData
	(*TaskInfoEntry)(nil),                              // 54: ray.rpc.TaskInfoEntry
}
var file_src_ray_protobuf_node_manager_proto_depIdxs = []int32{
	47, // 0: ray.rpc.WorkerBacklogReport.resource_spec:type_name -> ray.rpc.TaskSpec
	1,  // 1: ray.rpc.ReportWorkerBacklogRequest.backlog_reports:type_name -> ray.rpc.WorkerBacklogReport
	47, // 2: ray.rpc.RequestWorkerLeaseRequest.resource_spec:type_name -> ray.rpc.TaskSpec
	48, // 3: ray.rpc.RequestWorkerLeaseReply.worker_address:type_name -> ray.rpc.Address
	48, // 4: ray.rpc.RequestWorkerLeaseReply.retry_at_raylet_address:type_name -> ray.rpc.Address
	49, // 5: ray.rpc.RequestWorkerLeaseReply.resource_mapping:type_name -> ray.rpc.ResourceMapEntry
	50, // 6: ray.rpc.RequestWorkerLeaseReply.resources_data:type_name -> ray.rpc.ResourcesData
	0,  // 7: ray.rpc.RequestWorkerLeaseReply.failure_type:type_name -> ray.rpc.RequestWorkerLeaseReply.SchedulingFailureType
	51, // 8: ray.rpc.PrepareBundleResourcesRequest.bundle_specs:type_name -> ray.rpc.Bundle
	51, // 9: ray.rpc.CommitBundleResourcesRequest.bundle_specs:type_name -> ray.rpc.Bundle
	51, // 10: ray.rpc.CancelResourceReserveRequest.bundle_spec:type_name -> ray.rpc.Bundle
	48, // 11: ray.rpc.PinObjectIDsRequest.owner_address:type_name -> ray.rpc.Address
	52, // 12: ray.rpc.GetNodeStatsReply.core_workers_stats:type_name -> ray.rpc.CoreWorkerStats
	53, // 13: ray.rpc.GetNodeStatsReply.view_data:type_name -> ray.rpc.ViewData
	47, // 14: ray.rpc.GetNodeStatsReply.infeasible_tasks:type_name -> ray.rpc.TaskSpec
	47, // 15: ray.rpc.GetNodeStatsReply.ready_tasks:type_name -> ray.rpc.TaskSpec
	23, // 16: ray.rpc.GetNodeStatsReply.store_stats:type_name -> ray.rpc.ObjectStoreStats
	23, // 17: ray.rpc.FormatGlobalMemoryInfoReply.store_stats:type_name -> ray.rpc.ObjectStoreStats
	51, // 18: ray.rpc.ReleaseUnusedBundlesRequest.bundles_in_use:type_name -> ray.rpc.Bundle
	50, // 19: ray.rpc.RequestResourceReportReply.resources:type_name -> ray.rpc.ResourcesData
	54, // 20: ray.rpc.GetTasksInfoReply.task_info_entries:type_name -> ray.rpc.TaskInfoEntry
	52, // 21: ray.rpc.GetObjectsInfoReply.core_workers_stats:type_name -> ray.rpc.CoreWorkerStats
	50, // 22: ray.rpc.GetResourceLoadReply.resources:type_name -> ray.rpc.ResourcesData
	37, // 23: ray.rpc.NodeManagerService.UpdateResourceUsage:input_type -> ray.rpc.UpdateResourceUsageRequest
	45, // 24: ray.rpc.NodeManagerService.GetResourceLoad:input_type -> ray.rpc.GetResourceLoadRequest
	35, // 25: ray.rpc.NodeManagerService.RequestResourceReport:input_type -> ray.rpc.RequestResourceReportRequest
	4,  // 26: ray.rpc.NodeManagerService.RequestWorkerLease:input_type -> ray.rpc.RequestWorkerLeaseRequest
	2,  // 27: ray.rpc.NodeManagerService.ReportWorkerBacklog:input_type -> ray.rpc.ReportWorkerBacklogRequest
	12, // 28: ray.rpc.NodeManagerService.ReturnWorker:input_type -> ray.rpc.ReturnWorkerRequest
	14, // 29: ray.rpc.NodeManagerService.ReleaseUnusedWorkers:input_type -> ray.rpc.ReleaseUnusedWorkersRequest
	16, // 30: ray.rpc.NodeManagerService.ShutdownRaylet:input_type -> ray.rpc.ShutdownRayletRequest
	6,  // 31: ray.rpc.NodeManagerService.PrepareBundleResources:input_type -> ray.rpc.PrepareBundleResourcesRequest
	8,  // 32: ray.rpc.NodeManagerService.CommitBundleResources:input_type -> ray.rpc.CommitBundleResourcesRequest
	10, // 33: ray.rpc.NodeManagerService.CancelResourceReserve:input_type -> ray.rpc.CancelResourceReserveRequest
	18, // 34: ray.rpc.NodeManagerService.CancelWorkerLease:input_type -> ray.rpc.CancelWorkerLeaseRequest
	20, // 35: ray.rpc.NodeManagerService.PinObjectIDs:input_type -> ray.rpc.PinObjectIDsRequest
	22, // 36: ray.rpc.NodeManagerService.GetNodeStats:input_type -> ray.rpc.GetNodeStatsRequest
	25, // 37: ray.rpc.NodeManagerService.GlobalGC:input_type -> ray.rpc.GlobalGCRequest
	27, // 38: ray.rpc.NodeManagerService.FormatGlobalMemoryInfo:input_type -> ray.rpc.FormatGlobalMemoryInfoRequest
	29, // 39: ray.rpc.NodeManagerService.RequestObjectSpillage:input_type -> ray.rpc.RequestObjectSpillageRequest
	31, // 40: ray.rpc.NodeManagerService.ReleaseUnusedBundles:input_type -> ray.rpc.ReleaseUnusedBundlesRequest
	33, // 41: ray.rpc.NodeManagerService.GetSystemConfig:input_type -> ray.rpc.GetSystemConfigRequest
	39, // 42: ray.rpc.NodeManagerService.GetGcsServerAddress:input_type -> ray.rpc.GetGcsServerAddressRequest
	41, // 43: ray.rpc.NodeManagerService.GetTasksInfo:input_type -> ray.rpc.GetTasksInfoRequest
	43, // 44: ray.rpc.NodeManagerService.GetObjectsInfo:input_type -> ray.rpc.GetObjectsInfoRequest
	38, // 45: ray.rpc.NodeManagerService.UpdateResourceUsage:output_type -> ray.rpc.UpdateResourceUsageReply
	46, // 46: ray.rpc.NodeManagerService.GetResourceLoad:output_type -> ray.rpc.GetResourceLoadReply
	36, // 47: ray.rpc.NodeManagerService.RequestResourceReport:output_type -> ray.rpc.RequestResourceReportReply
	5,  // 48: ray.rpc.NodeManagerService.RequestWorkerLease:output_type -> ray.rpc.RequestWorkerLeaseReply
	3,  // 49: ray.rpc.NodeManagerService.ReportWorkerBacklog:output_type -> ray.rpc.ReportWorkerBacklogReply
	13, // 50: ray.rpc.NodeManagerService.ReturnWorker:output_type -> ray.rpc.ReturnWorkerReply
	15, // 51: ray.rpc.NodeManagerService.ReleaseUnusedWorkers:output_type -> ray.rpc.ReleaseUnusedWorkersReply
	17, // 52: ray.rpc.NodeManagerService.ShutdownRaylet:output_type -> ray.rpc.ShutdownRayletReply
	7,  // 53: ray.rpc.NodeManagerService.PrepareBundleResources:output_type -> ray.rpc.PrepareBundleResourcesReply
	9,  // 54: ray.rpc.NodeManagerService.CommitBundleResources:output_type -> ray.rpc.CommitBundleResourcesReply
	11, // 55: ray.rpc.NodeManagerService.CancelResourceReserve:output_type -> ray.rpc.CancelResourceReserveReply
	19, // 56: ray.rpc.NodeManagerService.CancelWorkerLease:output_type -> ray.rpc.CancelWorkerLeaseReply
	21, // 57: ray.rpc.NodeManagerService.PinObjectIDs:output_type -> ray.rpc.PinObjectIDsReply
	24, // 58: ray.rpc.NodeManagerService.GetNodeStats:output_type -> ray.rpc.GetNodeStatsReply
	26, // 59: ray.rpc.NodeManagerService.GlobalGC:output_type -> ray.rpc.GlobalGCReply
	28, // 60: ray.rpc.NodeManagerService.FormatGlobalMemoryInfo:output_type -> ray.rpc.FormatGlobalMemoryInfoReply
	30, // 61: ray.rpc.NodeManagerService.RequestObjectSpillage:output_type -> ray.rpc.RequestObjectSpillageReply
	32, // 62: ray.rpc.NodeManagerService.ReleaseUnusedBundles:output_type -> ray.rpc.ReleaseUnusedBundlesReply
	34, // 63: ray.rpc.NodeManagerService.GetSystemConfig:output_type -> ray.rpc.GetSystemConfigReply
	40, // 64: ray.rpc.NodeManagerService.GetGcsServerAddress:output_type -> ray.rpc.GetGcsServerAddressReply
	42, // 65: ray.rpc.NodeManagerService.GetTasksInfo:output_type -> ray.rpc.GetTasksInfoReply
	44, // 66: ray.rpc.NodeManagerService.GetObjectsInfo:output_type -> ray.rpc.GetObjectsInfoReply
	45, // [45:67] is the sub-list for method output_type
	23, // [23:45] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_src_ray_protobuf_node_manager_proto_init() }
func file_src_ray_protobuf_node_manager_proto_init() {
	if File_src_ray_protobuf_node_manager_proto != nil {
		return
	}
	file_src_ray_protobuf_common_proto_init()
	file_src_ray_protobuf_gcs_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_src_ray_protobuf_node_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerBacklogReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportWorkerBacklogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportWorkerBacklogReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestWorkerLeaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestWorkerLeaseReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareBundleResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareBundleResourcesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitBundleResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitBundleResourcesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelResourceReserveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelResourceReserveReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnWorkerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnWorkerReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseUnusedWorkersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseUnusedWorkersReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShutdownRayletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShutdownRayletReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelWorkerLeaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelWorkerLeaseReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinObjectIDsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinObjectIDsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectStoreStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeStatsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalGCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalGCReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormatGlobalMemoryInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormatGlobalMemoryInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestObjectSpillageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestObjectSpillageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseUnusedBundlesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseUnusedBundlesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSystemConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSystemConfigReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestResourceReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestResourceReportReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResourceUsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResourceUsageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGcsServerAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGcsServerAddressReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTasksInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTasksInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetObjectsInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetObjectsInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceLoadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_node_manager_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceLoadReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_ray_protobuf_node_manager_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_src_ray_protobuf_node_manager_proto_goTypes,
		DependencyIndexes: file_src_ray_protobuf_node_manager_proto_depIdxs,
		EnumInfos:         file_src_ray_protobuf_node_manager_proto_enumTypes,
		MessageInfos:      file_src_ray_protobuf_node_manager_proto_msgTypes,
	}.Build()
	File_src_ray_protobuf_node_manager_proto = out.File
	file_src_ray_protobuf_node_manager_proto_rawDesc = nil
	file_src_ray_protobuf_node_manager_proto_goTypes = nil
	file_src_ray_protobuf_node_manager_proto_depIdxs = nil
}
