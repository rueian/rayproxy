// Copyright 2017 The Ray Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: src/ray/protobuf/serialization.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The message for metadata of python buffer objects.
type PythonBuffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The offset of the buffer relative to the beginning of the raw buffer section,
	// which is stored in 'PythonObject'.
	Address uint64 `protobuf:"varint,1,opt,name=address,proto3" json:"address,omitempty"`
	// The length of the buffer.
	// It should be equal to 'product(*shape) * itemsize'.
	// 'int64' represents 'Py_ssize_t' of the corresponding python interface.
	Length int64 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	// The size of every element in the buffer.
	// 'int64' represents 'Py_ssize_t' of the corresponding python interface.
	Itemsize int64 `protobuf:"varint,3,opt,name=itemsize,proto3" json:"itemsize,omitempty"`
	// The dimensions of the object (for example, number of tensor axises).
	Ndim int32 `protobuf:"varint,4,opt,name=ndim,proto3" json:"ndim,omitempty"`
	// Readonly flag for this object.
	Readonly bool `protobuf:"varint,5,opt,name=readonly,proto3" json:"readonly,omitempty"`
	// The format string for every item. This is optional.
	// If this is NULL, "B" (unsigned bytes) is assumed.
	Format string `protobuf:"bytes,6,opt,name=format,proto3" json:"format,omitempty"`
	// The shape of the object per dimension. This is NULL when ndim == 0
	// The length of the shape should be equal to 'ndim'.
	// 'int64' represents 'Py_ssize_t' of the corresponding python interface.
	Shape []int64 `protobuf:"varint,7,rep,packed,name=shape,proto3" json:"shape,omitempty"`
	// The stride of the object per dimension. This is NULL when ndim == 0
	// The length of the strides should be equal to 'ndim'.
	// 'int64' represents 'Py_ssize_t' of the corresponding python interface.
	Strides []int64 `protobuf:"varint,8,rep,packed,name=strides,proto3" json:"strides,omitempty"` // 'suboffsets' is ignored since it is required to be NULL by the pickle5 protocol.
}

func (x *PythonBuffer) Reset() {
	*x = PythonBuffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_serialization_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PythonBuffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PythonBuffer) ProtoMessage() {}

func (x *PythonBuffer) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_serialization_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PythonBuffer.ProtoReflect.Descriptor instead.
func (*PythonBuffer) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_serialization_proto_rawDescGZIP(), []int{0}
}

func (x *PythonBuffer) GetAddress() uint64 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *PythonBuffer) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *PythonBuffer) GetItemsize() int64 {
	if x != nil {
		return x.Itemsize
	}
	return 0
}

func (x *PythonBuffer) GetNdim() int32 {
	if x != nil {
		return x.Ndim
	}
	return 0
}

func (x *PythonBuffer) GetReadonly() bool {
	if x != nil {
		return x.Readonly
	}
	return false
}

func (x *PythonBuffer) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *PythonBuffer) GetShape() []int64 {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *PythonBuffer) GetStrides() []int64 {
	if x != nil {
		return x.Strides
	}
	return nil
}

// The message for pickle5 serialized python object.
type PythonObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The size of the inband data section.
	InbandDataSize uint64 `protobuf:"varint,1,opt,name=inband_data_size,json=inbandDataSize,proto3" json:"inband_data_size,omitempty"`
	// The size of the buffers section. It is not used in deserialization
	// because we already have the length and address of every buffer. However, it could
	// be useful for debugging or future adjustment, so we just keep it.
	RawBuffersSize uint64 `protobuf:"varint,2,opt,name=raw_buffers_size,json=rawBuffersSize,proto3" json:"raw_buffers_size,omitempty"`
	// The metadata of python buffer objects.
	Buffer []*PythonBuffer `protobuf:"bytes,3,rep,name=buffer,proto3" json:"buffer,omitempty"`
}

func (x *PythonObject) Reset() {
	*x = PythonObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_serialization_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PythonObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PythonObject) ProtoMessage() {}

func (x *PythonObject) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_serialization_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PythonObject.ProtoReflect.Descriptor instead.
func (*PythonObject) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_serialization_proto_rawDescGZIP(), []int{1}
}

func (x *PythonObject) GetInbandDataSize() uint64 {
	if x != nil {
		return x.InbandDataSize
	}
	return 0
}

func (x *PythonObject) GetRawBuffersSize() uint64 {
	if x != nil {
		return x.RawBuffersSize
	}
	return 0
}

func (x *PythonObject) GetBuffer() []*PythonBuffer {
	if x != nil {
		return x.Buffer
	}
	return nil
}

var File_src_ray_protobuf_serialization_proto protoreflect.FileDescriptor

var file_src_ray_protobuf_serialization_proto_rawDesc = []byte{
	0x0a, 0x24, 0x73, 0x72, 0x63, 0x2f, 0x72, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x72, 0x61, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd4, 0x01, 0x0a, 0x0c, 0x50, 0x79,
	0x74, 0x68, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x64, 0x69, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6e, 0x64, 0x69, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x64, 0x65, 0x73,
	0x22, 0x9b, 0x01, 0x0a, 0x0c, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x62, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x69, 0x6e, 0x62,
	0x61, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72,
	0x61, 0x77, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x61, 0x77, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x73, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0xc0,
	0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x75, 0x65, 0x69, 0x61,
	0x6e, 0x2f, 0x72, 0x61, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x72,
	0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0xf8, 0x01, 0x01, 0xa2, 0x02,
	0x03, 0x52, 0x53, 0x58, 0xaa, 0x02, 0x11, 0x52, 0x61, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0x02, 0x11, 0x52, 0x61, 0x79, 0x5c, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xe2, 0x02, 0x1d, 0x52,
	0x61, 0x79, 0x5c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x52,
	0x61, 0x79, 0x3a, 0x3a, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_src_ray_protobuf_serialization_proto_rawDescOnce sync.Once
	file_src_ray_protobuf_serialization_proto_rawDescData = file_src_ray_protobuf_serialization_proto_rawDesc
)

func file_src_ray_protobuf_serialization_proto_rawDescGZIP() []byte {
	file_src_ray_protobuf_serialization_proto_rawDescOnce.Do(func() {
		file_src_ray_protobuf_serialization_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_ray_protobuf_serialization_proto_rawDescData)
	})
	return file_src_ray_protobuf_serialization_proto_rawDescData
}

var file_src_ray_protobuf_serialization_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_src_ray_protobuf_serialization_proto_goTypes = []interface{}{
	(*PythonBuffer)(nil), // 0: ray.serialization.PythonBuffer
	(*PythonObject)(nil), // 1: ray.serialization.PythonObject
}
var file_src_ray_protobuf_serialization_proto_depIdxs = []int32{
	0, // 0: ray.serialization.PythonObject.buffer:type_name -> ray.serialization.PythonBuffer
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_src_ray_protobuf_serialization_proto_init() }
func file_src_ray_protobuf_serialization_proto_init() {
	if File_src_ray_protobuf_serialization_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_src_ray_protobuf_serialization_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PythonBuffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_serialization_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PythonObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_ray_protobuf_serialization_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_src_ray_protobuf_serialization_proto_goTypes,
		DependencyIndexes: file_src_ray_protobuf_serialization_proto_depIdxs,
		MessageInfos:      file_src_ray_protobuf_serialization_proto_msgTypes,
	}.Build()
	File_src_ray_protobuf_serialization_proto = out.File
	file_src_ray_protobuf_serialization_proto_rawDesc = nil
	file_src_ray_protobuf_serialization_proto_goTypes = nil
	file_src_ray_protobuf_serialization_proto_depIdxs = nil
}
