// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: src/ray/protobuf/reporter.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReporterServiceClient is the client API for ReporterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReporterServiceClient interface {
	// Get the profiling stats.
	GetProfilingStats(ctx context.Context, in *GetProfilingStatsRequest, opts ...grpc.CallOption) (*GetProfilingStatsReply, error)
	// Report metrics to the local metrics agents.
	ReportMetrics(ctx context.Context, in *ReportMetricsRequest, opts ...grpc.CallOption) (*ReportMetricsReply, error)
	// Report OpenCensus metrics to the local metrics agent.
	ReportOCMetrics(ctx context.Context, in *ReportOCMetricsRequest, opts ...grpc.CallOption) (*ReportOCMetricsReply, error)
}

type reporterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReporterServiceClient(cc grpc.ClientConnInterface) ReporterServiceClient {
	return &reporterServiceClient{cc}
}

func (c *reporterServiceClient) GetProfilingStats(ctx context.Context, in *GetProfilingStatsRequest, opts ...grpc.CallOption) (*GetProfilingStatsReply, error) {
	out := new(GetProfilingStatsReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.ReporterService/GetProfilingStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reporterServiceClient) ReportMetrics(ctx context.Context, in *ReportMetricsRequest, opts ...grpc.CallOption) (*ReportMetricsReply, error) {
	out := new(ReportMetricsReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.ReporterService/ReportMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reporterServiceClient) ReportOCMetrics(ctx context.Context, in *ReportOCMetricsRequest, opts ...grpc.CallOption) (*ReportOCMetricsReply, error) {
	out := new(ReportOCMetricsReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.ReporterService/ReportOCMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReporterServiceServer is the server API for ReporterService service.
// All implementations should embed UnimplementedReporterServiceServer
// for forward compatibility
type ReporterServiceServer interface {
	// Get the profiling stats.
	GetProfilingStats(context.Context, *GetProfilingStatsRequest) (*GetProfilingStatsReply, error)
	// Report metrics to the local metrics agents.
	ReportMetrics(context.Context, *ReportMetricsRequest) (*ReportMetricsReply, error)
	// Report OpenCensus metrics to the local metrics agent.
	ReportOCMetrics(context.Context, *ReportOCMetricsRequest) (*ReportOCMetricsReply, error)
}

// UnimplementedReporterServiceServer should be embedded to have forward compatible implementations.
type UnimplementedReporterServiceServer struct {
}

func (UnimplementedReporterServiceServer) GetProfilingStats(context.Context, *GetProfilingStatsRequest) (*GetProfilingStatsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfilingStats not implemented")
}
func (UnimplementedReporterServiceServer) ReportMetrics(context.Context, *ReportMetricsRequest) (*ReportMetricsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportMetrics not implemented")
}
func (UnimplementedReporterServiceServer) ReportOCMetrics(context.Context, *ReportOCMetricsRequest) (*ReportOCMetricsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportOCMetrics not implemented")
}

// UnsafeReporterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReporterServiceServer will
// result in compilation errors.
type UnsafeReporterServiceServer interface {
	mustEmbedUnimplementedReporterServiceServer()
}

func RegisterReporterServiceServer(s grpc.ServiceRegistrar, srv ReporterServiceServer) {
	s.RegisterService(&ReporterService_ServiceDesc, srv)
}

func _ReporterService_GetProfilingStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfilingStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterServiceServer).GetProfilingStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.ReporterService/GetProfilingStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterServiceServer).GetProfilingStats(ctx, req.(*GetProfilingStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReporterService_ReportMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterServiceServer).ReportMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.ReporterService/ReportMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterServiceServer).ReportMetrics(ctx, req.(*ReportMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReporterService_ReportOCMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportOCMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterServiceServer).ReportOCMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.ReporterService/ReportOCMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterServiceServer).ReportOCMetrics(ctx, req.(*ReportOCMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReporterService_ServiceDesc is the grpc.ServiceDesc for ReporterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReporterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ray.rpc.ReporterService",
	HandlerType: (*ReporterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProfilingStats",
			Handler:    _ReporterService_GetProfilingStats_Handler,
		},
		{
			MethodName: "ReportMetrics",
			Handler:    _ReporterService_ReportMetrics_Handler,
		},
		{
			MethodName: "ReportOCMetrics",
			Handler:    _ReporterService_ReportOCMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/ray/protobuf/reporter.proto",
}

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogServiceClient interface {
	// Get the list of logs from the agent.
	ListLogs(ctx context.Context, in *ListLogsRequest, opts ...grpc.CallOption) (*ListLogsReply, error)
	// Streams a log file from the agent.
	StreamLog(ctx context.Context, in *StreamLogRequest, opts ...grpc.CallOption) (LogService_StreamLogClient, error)
}

type logServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServiceClient(cc grpc.ClientConnInterface) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) ListLogs(ctx context.Context, in *ListLogsRequest, opts ...grpc.CallOption) (*ListLogsReply, error) {
	out := new(ListLogsReply)
	err := c.cc.Invoke(ctx, "/ray.rpc.LogService/ListLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) StreamLog(ctx context.Context, in *StreamLogRequest, opts ...grpc.CallOption) (LogService_StreamLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogService_ServiceDesc.Streams[0], "/ray.rpc.LogService/StreamLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &logServiceStreamLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogService_StreamLogClient interface {
	Recv() (*StreamLogReply, error)
	grpc.ClientStream
}

type logServiceStreamLogClient struct {
	grpc.ClientStream
}

func (x *logServiceStreamLogClient) Recv() (*StreamLogReply, error) {
	m := new(StreamLogReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogServiceServer is the server API for LogService service.
// All implementations should embed UnimplementedLogServiceServer
// for forward compatibility
type LogServiceServer interface {
	// Get the list of logs from the agent.
	ListLogs(context.Context, *ListLogsRequest) (*ListLogsReply, error)
	// Streams a log file from the agent.
	StreamLog(*StreamLogRequest, LogService_StreamLogServer) error
}

// UnimplementedLogServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLogServiceServer struct {
}

func (UnimplementedLogServiceServer) ListLogs(context.Context, *ListLogsRequest) (*ListLogsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLogs not implemented")
}
func (UnimplementedLogServiceServer) StreamLog(*StreamLogRequest, LogService_StreamLogServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamLog not implemented")
}

// UnsafeLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServiceServer will
// result in compilation errors.
type UnsafeLogServiceServer interface {
	mustEmbedUnimplementedLogServiceServer()
}

func RegisterLogServiceServer(s grpc.ServiceRegistrar, srv LogServiceServer) {
	s.RegisterService(&LogService_ServiceDesc, srv)
}

func _LogService_ListLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).ListLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ray.rpc.LogService/ListLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).ListLogs(ctx, req.(*ListLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_StreamLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogServiceServer).StreamLog(m, &logServiceStreamLogServer{stream})
}

type LogService_StreamLogServer interface {
	Send(*StreamLogReply) error
	grpc.ServerStream
}

type logServiceStreamLogServer struct {
	grpc.ServerStream
}

func (x *logServiceStreamLogServer) Send(m *StreamLogReply) error {
	return x.ServerStream.SendMsg(m)
}

// LogService_ServiceDesc is the grpc.ServiceDesc for LogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ray.rpc.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLogs",
			Handler:    _LogService_ListLogs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLog",
			Handler:       _LogService_StreamLog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "src/ray/protobuf/reporter.proto",
}
